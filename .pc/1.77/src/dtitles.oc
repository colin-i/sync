
format elfobj64

include "../include/prog.h"

importx "sprintf" sprintf
importx "memcpy" memcpy

import "word_arg_to_stack" word_arg_to_stack

#here iterates swf tags in the sprite, enters DoAction tags, first tag is the pool with the format from dtitles_frame, goes at last string, overwrites 0000 with the final id
function dtitles_conclude(sd finalid,sd mem)
	char bool#1
	if bool=(TRUE)
		#finalid is u16
		char store#5
		call sprintf(#store,"%04X",finalid)

		add mem (WORD+WORD) #id field, frame count
		while 0=0
			sd RECORDHEADER
			set RECORDHEADER word_arg_to_stack(mem)
			add mem (WORD)
			sd length=recordheader_long_mark
			and length RECORDHEADER
			divu RECORDHEADER (recordheader_upperbits)
			if RECORDHEADER=(End)
				break
			end
			if length=(recordheader_long_mark)
				set length mem#
				add mem (DWORD)
			end
			ss cursor
			if RECORDHEADER=(DoAction)
				set cursor mem
				inc cursor           ##ACTIONRECORDHEADER ActionCode
				sd Length
				set Length word_arg_to_stack(cursor)
				add cursor (WORD)
				sd Count
				set Count word_arg_to_stack(cursor)
				add cursor (WORD)
				if Count!=1
					add cursor Length     ##now is +2 in offset [Count is u16]
					sub cursor (1+   4+   1+   1+   2)
					#           here 0000 X    null
					#  previous str0       XXX
					while cursor#!=(Nullchar)  #there are 3 more possible digits
						dec cursor
					end
					inc cursor
				end
				call memcpy(cursor,#store,4)
			end
			add mem length
		end
	end
end

function dtitles_init(sd flags)
	and flags (debug_titles)
	if flags!=0
		set dtitles_conclude.bool (TRUE)
		ret
	end
	set dtitles_conclude.bool (FALSE)
end



aftercallimport ebool



#here adds 0000X[X[X[X]]], if is root 0000 will be final, else is dummy now and will be sprite final id at conclude function
function dtitles_frame(sd index)
	if dtitles_conclude.bool=(TRUE)
		char format={_0,_0,_0,_0} #id
		char frame_index#4+1      #index is uword here, is checked
		call sprintf(#frame_index,"%X",index)
		import "actionpool_value_ex" actionpool_value_ex
		call actionpool_value_ex(#format,(TRUE))  #force the write because debugger will look at the last pool constant there
	end
end
