
#advance the content/size by value
Function advancecursors(data ptrcontent,data ptrsize,data nr)
	Str content#1
	Data size#1
	Set content ptrcontent#
	Set size ptrsize#
	Add content nr

	#take nr if nr>0 or -nr if nr<0. was ok in one case at enumcomma backward
	#Data zero=0;If nr<zero;SetCall nr neg(nr);EndIf

	Sub size nr
	Set ptrcontent# content
	Set ptrsize# size
EndFunction

#advance the content/size by one
Function stepcursors(data ptrcontent,data ptrsize)
	Data one=1
	Call advancecursors(ptrcontent,ptrsize,one)
EndFunction


#String in mem; return size(if string is not),size before string(if string is)
Function stringinmem(str content,data size,str match)
	Data zero=0
	Data nrsz#1
	SetCall nrsz strlen(match)
	If size<nrsz
		Return size
	EndIf
	Str cnt#1
	Set cnt content
	Data sz#1
	Set sz size
	Data b#1
	While sz>=nrsz
		SetCall b memcmp(cnt,match,nrsz)
		If b=zero
			Set nrsz sz
			Inc nrsz
		EndIf
		If b!=zero
			Inc cnt
			Dec sz
		EndIf
	EndWhile
	If b=zero
		Sub cnt content
		return cnt
	EndIf
	Return size
EndFunction
#and this same logic, +1, -1, like there are no 32bit asm instructions
Function stringatmem(ss content,sd size,ss match)
	sd nrsz
	SetCall nrsz strlen(match)
	If size<nrsz
		Return size
	EndIf
	sd sz;set sz nrsz
	while nrsz>0
		if content#!=match#
			return size
		endif
		dec nrsz
		inc content
		inc match
	endwhile
	return sz
EndFunction

#bool
#AB to ab
#match have size
Function stratmem(data pcontent,data psize,str match)
	Data nrsz=0
	Data sz=0
	Str content=0
	Data zero=0
	Data one=1
	Data sizetorun=0

	SetCall nrsz strlen(match)
	Set sz psize#
	Set content pcontent#

	If sz<nrsz
		Return zero
	EndIf

	Set sizetorun nrsz
	While sizetorun!=zero
		Char a_from_az={a_from_az}
		Char z_from_az={z_from_az}
		Char b#1
		Char c#1

		Set b content#
		If b>=a_from_az
			If b<=z_from_az
				Sub b (AZ_to_az)
			EndIf
		EndIf
		Set c match#
		If b!=c
			Return zero
		EndIf
		Inc content
		Inc match
		Dec sizetorun
	EndWhile
	Set pcontent# content
	Sub sz nrsz
	Set psize# sz
	Return one
EndFunction

#new size
function find_whitespaceORcomment(ss content,sd size)
#size is greater than zero but this is not a problem here
	ss end;set end content;add end size
	ss start;set start content
	while content!=end
		char b#1;set b content#
		if b=(commentascii)
			sub content start
			return content
		endif
		sd bool
		setcall bool is_whitespace(b)
		if bool=(TRUE)
			sub content start
			return content
		endif
		inc content
	endwhile
	sub content start
	return content
endfunction
#bool
function is_whitespace(char c)
	if c=(asciispace)
		return (TRUE)
	endif
	if c=(asciitab)
		return (TRUE)
	endif
	return (FALSE)
endfunction
data warn_hidden_whitespaces_times#1
const warn_hidden_whitespaces_times_p^warn_hidden_whitespaces_times
#err
function warn_hidden_whitespaces(sd inc)
	sd p%p_hidden_pref
	if p#=(TRUE)
		data warn_hidden_whitespaces_times_p%warn_hidden_whitespaces_times_p
		if warn_hidden_whitespaces_times_p#=0
		#show once
			sd goodwrongstring
			setcall goodwrongstring errorDefOut("Hidden whitespaces at :",inc)
			call safeMessage(goodwrongstring)
			inc warn_hidden_whitespaces_times_p#
		endif
		sd w%p_w_as_e
		if w#=(TRUE)
			return ""
		endif
	endif
	return (noerror)
endfunction
#err
function warn_hidden_whitespaces_after(sd inc,sd dot_comma_end)
	if dot_comma_end=0
		sd er;setcall er warn_hidden_whitespaces(inc)
		return er
	endif
	return (noerror)
endfunction

#pointer
function mem_spaces(ss content,ss last)
	while content!=last
		sd bool;setcall bool is_whitespace(content#)
		if bool=(FALSE)
			return content
		endif
		inc content
	endwhile
	return content
endfunction
Function spaces_helper(ss cursor,sd size)
	sd end;set end cursor;add end size
	while cursor!=end
		sd b
		setcall b is_whitespace(cursor#)
		if b=(TRUE)
			inc cursor
		else
			return cursor
		endelse
	endwhile
	return cursor
endfunction
#spaces;return 1 if at least one spc/tab;0 otherwise
Function spaces(sd pcontent,sd psize)
	sd start;set start pcontent#
	setcall pcontent# spaces_helper(pcontent#,psize#)
	if pcontent#=start
		return (FALSE)
	endif
	sub start pcontent#
	add psize# start
	return (TRUE)
EndFunction

#bool;return 1 or 0
Function stringsatmemspc(sv pcontent,sd psize,ss match,sd spacereq,ss extstr,sd extbool,sv intercursors)
#												    attention here there is a sd but not working on entire long, so sd is ok
	Data content#1
	Data size#1
	Data bool#1
	Data tocontent^content
	Data tosize^size
	Data zero=FALSE
	Data nonzero=TRUE

	Set content pcontent#
	Set size psize#
	SetCall bool stratmem(tocontent,tosize,match)
	If bool=zero
		Return zero
	EndIf

	If extstr!=zero
		SetCall extbool# stratmem(tocontent,tosize,extstr)
		if intercursors!=(NULL)
			#to work around ...xcall, ...g[if]
			Set intercursors# content
			add intercursors :
			set intercursors#d^ size
		endif
	EndIf

	If spacereq=nonzero
		SetCall bool spaces(tocontent,tosize)
		IF bool=zero
			Return zero
		EndIf
	EndIf
	Set pcontent# content
	Set psize# size
	Return nonzero
EndFunction

#return stringsatmemspc
Function stratmemspc(data pcontent,data psize,str match,data spacereq)
	Data null=NULL
	Data bool#1
	SetCall bool stringsatmemspc(pcontent,psize,match,spacereq,null,null,null)
	Return bool
EndFunction

#return the escaped char and change the size and cursor
Function quotescaped(sv pcontent,sd psize)
	vStr content#1
	Char bs=asciibs
	charx byte#1

	Set content pcontent#
	if content#!=bs
		Return content#
	EndIf
	inc content
	set pcontent# content;dec psize#
	set byte content#
	if byte=(asciin)
		return (asciireturn)
	endif
	if byte=(asciir)
		return (asciicarriage)
	endif
	if byte=(asciit)
		return (asciitab)
	endif
	return byte
EndFunction

#err
function quotinmem_err(ss content,sd pquotsz,sd pescapes,sd null_ok)
	Char quotation=asciidoublequote
	Char bs=asciibs
	Char bnull=0

	sd aux;set aux content
	Set pescapes# 0
	#quotes_forward was called already, the string has a good end, and nulls are not ok at include/import/library but tolerated at decl/arg
	Whiletrue
		if content#=bs
			inc pescapes#
			add content 2
			continue
		endif
		if content#=quotation
			sub content aux
			Set pquotsz# content
			return (noerror)
		endif
		if content#=bnull
			if null_ok=(FALSE)
				return "Null will break the include/import/library statement."
			endif
		endif
		inc content
	EndWhile
EndFunction
#err
Function quotinmem(sv ptrcontent,sd ptrsize,sd pquotsz,sd pescapes)
	Char quotation={asciidoublequote,0}
	vStr pquotation^quotation
	sd intnr
	SetCall intnr stratmem(ptrcontent,ptrsize,pquotation)
	If intnr=0
		Return "Expecting quotation mark."
	EndIf
	sd err;setcall err quotinmem_err(ptrcontent#,pquotsz,pescapes,(FALSE))
	return err
endfunction
Function quotinmem_started(sv ptrcontent,sd ptrsize,sd pquotsz,sd pescapes)
	call stepcursors(ptrcontent,ptrsize)
	sd err;setcall err quotinmem_err(ptrcontent#,pquotsz,pescapes,(FALSE))
	return err
EndFunction
Function quotinmem_started_blind(sv ptrcontent,sd ptrsize,sd pquotsz,sd pescapes)
	call stepcursors(ptrcontent,ptrsize)
	sd err;setcall err quotinmem_err(ptrcontent#,pquotsz,pescapes,(TRUE))
	return err
EndFunction
Function quotinmem_started_blind_noerr(sv ptrcontent,sd ptrsize,sd pquotsz,sd pescapes)
	call stepcursors(ptrcontent,ptrsize)
	call quotinmem_err(ptrcontent#,pquotsz,pescapes,(TRUE)) #null_ok will continue there
EndFunction
Function quotinmem_noerr(sv ptrcontent,sd ptrsize,sd pquotsz,sd pescapes)
	call stepcursors(ptrcontent,ptrsize)
	Call quotinmem_err(ptrcontent#,pquotsz,pescapes) #null_ok is irelevant, spelling was already
EndFunction

#err
function maxpathverif(str safecurrentdirtopath,str logextension)
	data size1#1
	data size2#1
	setcall size1 strlen(safecurrentdirtopath)
	setcall size2 strlen(logextension)
	add size1 size2
	inc size1

	data err#1
	setcall err compareagainstmaxpath(size1)
	return err
endfunction

#err
function quotes_forward(sd p_content,ss last,sd p_newlines,sd p_lastlinestart)
#this version is knowing that the first char is "
	char delim=asciidoublequote
	ss content
	set content p_content#
	str unend="end string (\") expected"
	sd escapes=0
	inc content
	if content=last
		return unend
	endif
	sd newlines=0
	while content#!=delim
		char escape_c=asciibs
		while content#=escape_c
			if escapes=0
				set escapes 1
			else
				set escapes 0
			endelse
			inc content
			if content=last
				return unend
			endif
		endwhile
		char newline=asciireturn
		if content#=newline
			if p_newlines!=0
				inc newlines
				set p_lastlinestart# content
				inc p_lastlinestart#
			endif
		endif
		if escapes=1
			inc content
			set escapes 0
		elseif content#!=delim
			inc content
		endelseif
		if content=last
			return unend
		endif
	endwhile
	inc content
	set p_content# content
	if p_newlines!=0
		set p_newlines# newlines
	endif
	return (noerror)
endfunction
