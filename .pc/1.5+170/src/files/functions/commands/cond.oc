
const condpack_codereg=dwsz
const condpack_number=dwsz
const condpack_whilebegin=dwsz    #this is a coderegpart
const condpack_ifinscribe=dwsz    #this a numberpart
const condpack_elseinscribe=dwsz      #same
const condpacksize=condpack_codereg+condpack_number
const elseinscribe_write=0
const elseinscribe_skip=1

#err
Function coderegtocondloop()
	Data codesec%%ptr_codesec
	Data codeReg#1
	Data ptrcodeReg^codeReg

	Call getcontReg(codesec,ptrcodeReg)

	Data err#1
	Data condloopsec%%ptr_conditionsloops

	SetCall err addtosec(ptrcodeReg,(condpack_codereg),condloopsec)
	Return err
EndFunction

#err
Function condbeginwrite(data condnumber)
	Data err#1
	Data noerr=noerror

	SetCall err coderegtocondloop()
	If err!=noerr
		Return err
	EndIf

	Data condloopsec%%ptr_conditionsloops

	Data ptrcondnumber^condnumber
	SetCall err addtosec(ptrcondnumber,(condpack_number),condloopsec)
	Return err
EndFunction

#err
Function condbegin(data ptrcontent,data ptrsize,data condnumber)
	Data cond#1
	Data ptrcond^cond
	Data err#1
	Data noerr=noerror

	if main.parses=(pass_write)
		setcall err xfile_add_char_if(condnumber)
		If err!=noerr;Return err;EndIf
		SetCall err twoargs(ptrcontent,ptrsize,(not_a_subtype),ptrcond)
		If err!=noerr;Return err;EndIf
	else
		call advancecursors(ptrcontent,ptrsize,ptrsize#)
	endelse
	SetCall err condbeginwrite(condnumber)
	Return err
EndFunction

#err
Function checkcondloopclose()
	Data regnr#1
	Data ptrregnr^regnr
	Data condloop%%ptr_conditionsloops
	Call getcontReg(condloop,ptrregnr)
	Data zero=0
	If regnr!=zero
		Char closeerr="All conditions/loops within a scope must be closed."
		Str _closeerr^closeerr
		Return _closeerr
	EndIf
	Data noerr=noerror
	Return noerr
EndFunction

Const backjumpsize=5
#err
Function condjump(data size)
	Char jump={0xe9}
	Data jsize#1
	Data bjsz=backjumpsize

	Data pjsize^jsize

	Set pjsize# size

	Data pjump^jump

	Data err#1
	Data code%%ptr_codesec
	SetCall err addtosec(pjump,bjsz,code)
	Return err
EndFunction

#err
Function condend(data number)
	Data condloop%%ptr_conditionsloops
	Data ptrcReg#1
	Data ptrptrcReg^ptrcReg

	Call getptrcontReg(condloop,ptrptrcReg)
	If ptrcReg#=0
		Char uncloseerr="Unexpected condition/loop close command."
		Str _uncloseerr^uncloseerr
		Return _uncloseerr
	EndIf

	Data codeoffset#1
	Data ptrcodeoff^codeoffset
	Data codesec%%ptr_codesec
	Data whilenr=whilenumber
	Data structure#1
	Data ptrstructure^structure

	Call getcontReg(codesec,ptrcodeoff)
	If number=whilenr
		Add codeoffset (backjumpsize)
	EndIf
	Call getcont(condloop,ptrstructure)
	Add structure ptrcReg#
	sd reg;set reg structure

	sd err;setcall err condendtest(#structure,number,codeoffset)
	if err=(noerror)
		if number=(elsenumber)
			sd marker;set marker structure
			sub structure (condpack_elseinscribe) #to match for ptrcReg
			if main.parses=(pass_write)
				if structure#=(elseinscribe_write)
					call condendwrite(marker,codeoffset)
				endif
			endif
		elseIf number=whilenr
			if main.parses=(pass_write)
				setcall err jumpback(codeoffset,structure)
				If err!=(noerror)
					Return err
				EndIf
				call condendwrite(structure,codeoffset)
			endif
			sub structure (condpack_whilebegin)   #to match for ptrcReg
		elseif main.parses=(pass_write)
			call condendwrite(structure,codeoffset)
		EndelseIf

		sub reg structure
		Sub ptrcReg# reg
	endif
	return err
EndFunction

#err
function condendtest(sv p_conds,sd number,sd codeoffset)
	sd conds;set conds p_conds#

	#for breaks inside conditions
	sd last;set last conds

	while 1=1
		Data lastcondition#1

		sub conds (condpack_number)
		Set lastcondition conds#
		sub conds (condpack_codereg)

		if lastcondition=(breaknumber)
			if number=(whilenumber)
				call condendwrite(conds,codeoffset)
			endif
		elseIf lastcondition!=number
			Char difcloseerr="The previous condition/loop is from a different type."
			vStr _difcloseerr^difcloseerr
			Return _difcloseerr
		else
			if number!=(whilenumber)
				sub last (condpacksize)
				if conds!=last   ##here are breaks
					#move it to last to match the reg set outside
					#and move ifinscribe/elseinscribe if it is the case
					#ignore type, it will only be removed outside
					#don't increase size to align ifinscribe and just swap

					sd cursor;set cursor conds
					sub cursor (condpack_number)
					sd size
					set size (condpack_codereg)
					if cursor#=(ifinscribe)
						add size (condpack_ifinscribe)
					elseif number=(elsenumber)
						add size (condpack_elseinscribe)
						sd test;set test cursor
						sub test (condpack_elseinscribe)
						if test#=(ifinscribe) #need to get also ifinscribe, it will be closed in conditionscondend
							sub cursor (condpack_ifinscribe)
							add size (condpack_ifinscribe)
						endif
					else
						add cursor (condpack_number)
					endelse
					sd aux#3
					call memtomem(#aux,cursor,size)
					while conds!=last
						add conds (condpacksize)
						call memtomem(cursor,conds,(condpacksize))
						add cursor (condpacksize)
					endwhile
					call memtomem(cursor,#aux,size)
				endif
			endif
			set p_conds# conds
			return (noerror)
		Endelse
	endwhile
endfunction

function condendwrite(sd structure,sd codeoffset)
	Data jumploc#1
	Data codesec%%ptr_codesec
	vData writeloc#1
	Data ptrwriteloc^writeloc

	Call getcont(codesec,ptrwriteloc)

	Set jumploc structure#
	Sub codeoffset jumploc
	Add writeloc jumploc
	Sub writeloc (dwsz)

	Set writeloc# codeoffset
endfunction

#err
function jumpback(sd codeoffset,sd condstruct)
	sub condstruct (condpack_codereg)
	sub codeoffset condstruct#
	neg codeoffset
	sd err
	SetCall err condjump(codeoffset)
	return err
endfunction

#err
Function conditionscondend(data close1,data close2)
	Data err#1
	Data noerr=noerror

	setcall err xfile_add_end_ifif()
	if err=(noerror)
		Data number#1
		Set number close1

		Data ifnr=ifnumber
		Data elsenr=elsenumber
		Data structure%%ptr_conditionsloops

		While 1=1
			SetCall err condend(number)
			If err!=noerr
				Return err
			EndIf
			sd c
			If number=ifnr
				If close2=elsenr
					Set number elsenr
					setcall c prevcond()
					if c=(ifinscribe)
						call Message("Warning: ENDELSEIF not matching IF")
					endif
					continue
				endif
				break
			EndIf
			If number=elsenr
				setcall c prevcond()
				if c=(ifinscribe)
					break
				endif
			EndIf
		EndWhile

		Data ptrReg#1
		Data ptrptrReg^ptrReg
		Call getptrcontReg(structure,ptrptrReg)
		Data Reg#1
		Set Reg ptrReg#
		Sub Reg (condpack_ifinscribe)
		Set ptrReg# Reg
	endif
	Return err
EndFunction
function prevcond()
	vData cl#1
	vData structure%%ptr_conditionsloops
	Call getcontplusReg(structure,#cl)
	Sub cl (condpack_number)
	return cl#
endfunction

Function closeifopenelse()
	Data err#1
	Data noerr=noerror

	if main.parses=(pass_write)
		if main.ret_cont_break=(FALSE)
			SetCall err condjump(0)
			If err!=noerr
				Return err
			EndIf
		endif
	endif
	Data ifnr=ifnumber
	SetCall err condend(ifnr)
	If err!=noerr
		Return err
	EndIf

	setcall err xfile_add_char_ifif((Xfile_else))
	if err=(noerror)
		#this for unreachable else jumps bool
		vData structure%%ptr_conditionsloops
		if main.ret_cont_break=(FALSE)
			data e1=elseinscribe_write
			setcall err addtosec(#e1,(condpack_elseinscribe),structure)
			if err=(noerror)
				Data elsenr=elsenumber
				SetCall err condbeginwrite(elsenr)
			endif
		else
			data e2=elseinscribe_skip
			data *ignored codesection index#1
			data *nr=elsenumber
			setcall err addtosec(#e2,(condpack_elseinscribe+condpacksize),structure)
		endelse
	endif
	Return err
EndFunction

#err
function continue()
	sd regnr
	sd structure
	vData condloop%%ptr_conditionsloops
	call getcontandcontReg(condloop,#structure,#regnr)
	if regnr!=0
		sd start;set start structure
		add structure regnr
		while start!=structure
			sd type
			sub structure (condpack_number)
			set type structure#
			if type!=(ifinscribe)
				sub structure (condpack_codereg)
				if type=(whilenumber)
					vdata ptrcodesec%%ptr_codesec
					sd codeoffset
					call getcontReg(ptrcodesec,#codeoffset)
					Add codeoffset (backjumpsize)
					sd err;setcall err jumpback(codeoffset,structure)
					return err
				endif
				if type=(elsenumber)
					sub structure (condpack_elseinscribe)
				endif
			endif
		endwhile
	endif
	return "There is no loop to continue."
endfunction

#err
function break()
	sd regnr
	sd structure
	vData condloop%%ptr_conditionsloops
	call getcontandcontReg(condloop,#structure,#regnr)
	if regnr!=0
		sd start;set start structure
		add structure regnr
		while start!=structure
			sd type
			sub structure (condpack_number)
			set type structure#
			if type!=(ifinscribe)
				sub structure (condpack_codereg)
				if type=(whilenumber)
					sd err
					SetCall err condjump(0)
					if err=(noerror)
						SetCall err condbeginwrite((breaknumber))
					endif
					Return err
				endif
				if type=(elsenumber)
					sub structure (condpack_elseinscribe)
				endif
			endif
		endwhile
	endif
	return "There is no loop to break."
endfunction

#err
function whileend()
	sd err;setcall err xfile_add_end_ifif()
	If err=(noerror)
		SetCall err condend((whilenumber))
	EndIf
	return err
endfunction

#err
function prev_cond(sd psecond)
	sd structure
	vData condloop%%ptr_conditionsloops
	call getcontReg(condloop,#structure)
	if structure=0
		return (nocondnumber) #function
	endif
	call getcontplusReg(condloop,#structure)
	sub structure (condpack_number)
	while structure#=(breaknumber)
		sub structure (condpacksize)
	endwhile
	if structure#=(whilenumber)
		return (whilenumber)
	endif
	if structure#=(elsenumber)
		set psecond# (nocondnumber)
		return (elsenumber)
	endif
	sub structure (condpacksize)
	if structure#=(ifinscribe)
		set psecond# (nocondnumber)
	else
	#structure#=(elsenumber)
		set psecond# (elsenumber)
	endelse
	return (ifnumber) #if,elseif
endfunction
