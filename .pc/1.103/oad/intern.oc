
format elfobj64

override include_sec 1
include "common.h" "common.h.oh"

importx "fopen" fopen
importx "fseek" fseek
importx "ftell" ftell
importx "malloc" malloc
importx "fread" fread
importx "fclose" fclose

#multithread unsafe
dataxu xoffset#1
#

function fcontent(sd path,sv psize)
	sd f;set f fopen(path,"rb")
	if f!=(NULL)
		call fseek(f,0,(SEEK_END))
		sd size;set size ftell(f)
		if size!=-1
			call fseek(f,0,(SEEK_SET))
			sd mem;set mem malloc(size)
			if mem!=(NULL)
				call fread(mem,size,1,f)
				call fclose(f)
				set psize# size
				return mem
			end
		end
		call fclose(f)
	end
	return (NULL)
end

function memnl(ss log,sv pnext)
	set pnext# 1
	if log#!=(NewLine) #emptyrow
		inc log
		while log#!=(NewLine)
			inc log
		end
		add pnext# log
		dec log
		if log#!=(CReturn)  #an example: ffdec action output is \r\n
			inc log
		end
	else
		add pnext# log
	end
	return log
end
function memdec(ss start,value end)
	sub end start
	add start end
	sd nr=1
	sd n;sd val=0
	while end>^0
		dec start

		set n start#
		sub n (ZeroChar)
		mult n nr
		add val n

		mult nr 10 #is ok on 32 where sizeof long is 4
		dec end
	end
	return val
end
#end
function memhex_parse_withinc(ss start,sd out) #will max be a jump in DoAction
	inc start
	ss a;set a start
	whiletrue
		charx c#1;set c a#
		if c<(ZeroChar);break;end
		if c<=(NineChar)
		elseif c<(A);break;end
		if c>(F);break;end
		inc a
	end
	set out# 0
	if a!=start   ##there are many ,, with no size
		ss b;set b a
		dataxu n#1;set n 1
		while start!=b
			dec b
			dataxu nr#1
			set nr b#
			if nr<=(NineChar)
				sub nr (ZeroChar)
			else
				sub nr (A+10)
			end
			mult nr n
			add out# nr
			mult n 0x10
		end
	end
	return a
end

function newbranch(sv px,sv pxx)
	sd xx;set xx pxx#
	sd branchsize;set branchsize xx#
	sub branchsize global.xoffset
	add global.xoffset branchsize
	add px# branchsize
	add pxx# (xlog_code_size)
end
function actionrow(ss log,sd end,sv px,sv pxx)
	inc log    ##first is a digit
	whiletrue # break} is still with / (also resolves are there) but it is a row with \n end anyway
		charx chr#1
		set chr log#
		if log<(ZeroChar)
			break
		end
		if log>(NineChar)
			break
		end
		inc log
	end
	while log!=end
		dataxu number#1  #u16,u32,u16
		if log#=(xlog_act) #action
			set log memhex_parse_withinc(log,#number)
		elseif log#=(xlog_string) #string
			ss xxcontent;set xxcontent pxx#
			add pxx# (xlog_type_size)
			if xxcontent#=(xlog_unique)
			elseif xxcontent#=(xlog_new)
				add pxx# (xlog_new_size)
			else #xlog_id
				add pxx# (xlog_id_size)
			end
			inc log
		elseif log#=(xlog_jump)
			set log memhex_parse_withinc(log,#number)
		elseif log#=(xlog_branch) #branch start
			call newbranch(px,pxx)
			inc log
		elseif log#=(xlog_innerbranchend) #innerbranch end
			call newbranch(px,pxx)
			inc log
		else
		#if log#=(xlog_function)
			set log memhex_parse_withinc(log,#number)
		end
	end
end

import "presprite_init" presprite_init
import "presprite_done" presprite_done

function loop(ss log,sd x,sd xx,sd logsize,sv ppresprites,sv psprites,sv data)
	add logsize log
	if log!=logsize  ##else no action sprites/shows
		set global.xoffset 0
		sd next
		ss p;set p memnl(log,#next)
		whiletrue
			wordxu preid#1
			set preid memdec(log,p) #[log,p) ui16
			set log next

			charx ok#1
			set p memnl(log,#next)
			if log=p
				set log next
				# empty: show/done
				set p memnl(log,#next)
				if log=p ##show ui16
					set ok presprite_init(preid,ppresprites,psprites,(from_show))
					if ok!=(EXIT_SUCCESS)
						return (EXIT_FAILURE)
					end
				else #done, here for sprite, already opened or ignore it (no action/show)
					wordxu id#1
					set id memdec(log,p) #[log,p) ui16
					set ok presprite_done(psprites#,preid,id,data)
					if ok!=(EXIT_SUCCESS)
						return (EXIT_FAILURE)
					end
				end
				set log next
				if log=logsize
					return (EXIT_SUCCESS)
				end
				set p memnl(log,#next)
			else
				#ainit
				charx ainit#1;set ainit memdec(log,p) #[log,p) 0/1
				set log next

				set ok presprite_init(preid,ppresprites,psprites,(from_action),ainit)
				if ok!=(EXIT_SUCCESS)
					return (EXIT_FAILURE)
				end

				#linesnr
				set p memnl(log,#next)
				value linesnr#1;set linesnr memdec(log,p)
				set log next

				while linesnr>^0
					set p memnl(log,#next)
					set log next
					dec linesnr
				end

				#[actions]
				whiletrue
					if log=logsize
						return (EXIT_SUCCESS) #no [more] actions and nothing else
					end
					set p memnl(log,#next)
					if log#=(xlog_actions)
						inc log
						call actionrow(log,p,#x,#xx)
					else
						break #[log,p) will continue at preid
					end
					set log next   ##was a row with actions
				end
			end
		end
	end
	return (EXIT_SUCCESS)
end

importx "strlen" strlen
importx "memcpy" memcpy
importx "free" free

import "compare" compare

char inter_last_extension_data=".last.data";vstr p_inter_last_extension_data^inter_last_extension_data
function inter_last_extension(sv psize)
	set psize# (\global.inter_last_extension_data)
	return global.p_inter_last_extension_data
end
function inter(ss swf_fullpath)
	sd size;set size strlen(swf_fullpath)
	sd size1=\global.inter_last_extension_data
	add size1 size
	sd from;set from malloc(size1)
	if from!=(NULL)
		call memcpy(from,swf_fullpath,size)
		sub size1 size
		add size from
		call memcpy(size,global.p_inter_last_extension_data,size1)
		sd file
		set file fopen(from,"wb")
		call free(from)
		if file!=(NULL)
			call fclose(file)
			sd exit;set exit compare(swf_fullpath)
			return exit
		end
	end
	return (EXIT_FAILURE)
end

function oadata_init(sv poadata)
	set poadata# malloc(\oadata\)
	sv a;set a poadata#
	if a!=(NULL)
		set a#:oadata.sprites malloc((sprites_realloc_onepart))
		if a#:oadata.sprites!=(NULL)
			set a#:oadata.sprites_size 0
			set a#:oadata.marks malloc(\mark\)
			sd m;set m a#:oadata.marks
			if m!=(NULL)
				set m#:mark.prev (mark_nothing)
				set m#:mark.next (mark_nothing)
				set a#:oadata.functions malloc((sprites_realloc_onepart))
				if a#:oadata.functions!=(NULL)
					set a#:oadata.functions_size 0
					return (EXIT_SUCCESS)
				end
			end
		end
	end
	return (EXIT_FAILURE)
end

entryraw global() #this blank (an empty struct). is here only for global variables
