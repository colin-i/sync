Format ElfObj64

include "../include/prog.h"

importx "_open" open
importx "_read" read
importx "_write" write
importx "_lseek" lseek
#importx tell   can't find it
importx "_close" close

import "printEr" printEr

function file_get_content__resources(sd trueIsSet_falseIsFree,sd fileIn,sd memIn)
    data file=fd_none;vdata mem=NULL
    if trueIsSet_falseIsFree=(TRUE)
        if fileIn!=(fd_none);set file fileIn
        else;set mem memIn;endelse
    else
        if file!=(fd_none)
            call file_close(#file)
            if mem!=(NULL)
                import "mem_free" mem_free
                call mem_free(#mem)
            endif
        endif
    endelse
endfunction
function file_get_content__resources_free()
    call file_get_content__resources((FALSE))
endfunction

#close

function file_close(sd p_file)
    call close(p_file#)
    set p_file# (fd_none)
endfunction

importx "fclose" fclose

function f_close(sv p_file)
	call fclose(p_file#)
	set p_file# (NULL)
endfunction

importx "fprintf" fprintf

function f_printf_in(sd p,sd nr)
	callex fprintf p nr ##callexret
end

importx "fwrite" fwrite
importx "ftell" ftell

importx "fopen" fopen
importx "free" free

aftercallimport ebool

import "error" error

#file
function f_open_mem(sd path,sd format)
	sd f;setcall f fopen(path,format)
	if f=(NULL)
		call free(path)
		call error("fopen error")
	endif
	call free(path)
	return f
endfunction

#file
function file_open(ss filepath,sd flags)
    sd file
    sd permission
    sd creat_test;set creat_test flags;and creat_test (flag_O_CREAT);if creat_test!=0
        set permission (flag_pmode);endif
    SetCall file open(filepath,flags,permission)
    if file=(fd_error)
        call printEr("File: \"")
        call printEr(filepath)
        call error("\" cannot be opened")
    EndIf
    return file
endfunction
#offset
function file_seek(sd file,sd off,sd method)
    sd seekint
	setcall seekint lseek(file,off,method) #Some devices are incapable of seeking and POSIX does not specify which devices must support lseek
	#in the rest: a normal error will be when file is to large and seeking there
    If seekint=-1
        vstr seekerr="File seek error"
        call error(seekerr)
    endif
	return seekint
endfunction
#offset
function file__seek(sd file,sd method)
	callg file_seek(file,0,method) #here return is what file_seek is returning
endfunction
#size
function filesize(sd file)
    sd len
	set len file__seek(file,(SEEK_END))
    call file__seek(file,(SEEK_SET))
    return len
endfunction

#read
import "memalloc" memalloc
#mem
function file_get_content(ss filepath,sv p_size)  #size is a stack variable
	sd file
	setcall file file_open(filepath,(_open_read))
	call file_get_content__resources((TRUE),file)
	sd mem; ss size
	set size filesize(file)
	if p_size!=(NULL)
		set p_size# size
		setcall mem memalloc(size)
	else
		inc size
		setcall mem memalloc(size)
		dec size
	end
	call file_get_content__resources((TRUE),(fd_none),mem)
	call file_read(file,mem,size)
	if p_size=(NULL)
		add size mem
		set size# (Nullchar)
	end
	return mem
endfunction
function file_read(sd file,sd mem,sd size)
    sd read_sz
    setcall read_sz read(file,mem,size)
    if read_sz!=size
        call error("Read length is different or error")
    endif
endfunction

#write

function file_write(sd file,sd buffer,sd size)
    if size=0
        ret
    endif
    sd len
    setcall len write(file,buffer,size)
    if len=size
        ret
    endif
    vstr er="File write error"
    call error(er)
endfunction


function f_printf(sd nr,sd file,sd format) #...
	sd r;set r f_printf_in(#file,nr)
	if r=-1
		call error("fprintf error")
	endif
endfunction

function f_write(sd f,sd buf,sd sz)
	sd r;set r fwrite(buf,sz,1,f)
	if r!=1
		call error("fwrite error")
	end
endfunction

function f_tell(sd f)
	sd r;set r ftell(f)
	if r=-1
		call error("ftell error")
	end
	return r
endfunction
