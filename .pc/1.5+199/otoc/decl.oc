
#aftercalli

function functiondef_d(sv pbuffer,sd outfile)
	datax args#1;call get_data(pbuffer,#args)
	if args>=^1
		charx type#1;charx field#1
		call decl(pbuffer,outfile,#field,#type)
		sd n=1;while n!=args
			call writec(outfile)
			call decl(pbuffer,outfile,#field,#type)
			inc n
		end
	end
	return args ##for varargs
end
function functiondef_r(sv pbuffer,sd outfile,sd pointer,sd sz)
	set loop.function_start ftell(outfile)
	if loop.function_start!=(err)
		call write_void(outfile,pointer,sz)
		call writel(outfile)
		sd args;set args functiondef_d(pbuffer,outfile)
		return args ##for varargs
	end
	call aftercallenable()
end
function functiondef_rw(sv pbuffer,sd outfile,sd pointer,sd sz)
	call functiondef_r(pbuffer,outfile,pointer,sz)
	callg writer(outfile)
end
function functiondef_ext(sv pbuffer,sd outfile,sd pointer,sd sz)
	charx e#1;call get_char(pbuffer,#e)
	sd args;set args functiondef_r(pbuffer,outfile,pointer,sz)
	if e=(Xfile_function_e_normal)
		call writer(outfile)
	else #varargs
		char a=asciicomma
		char b="...)"^
		if args!=0
			call write(outfile,#a,1+\.b)
		else
			callg write(outfile,#b,\.b)
		end
	end
end

function functiondef_intern(sv pbuffer,sd outfile,sd pointer,sd sz)
	charx s#1;call get_char(pbuffer,#s)
	if s=(Xfile_function_t_normal)
		call functiondef_rw(pbuffer,outfile,pointer,sz)
	else
		char a="struct "^
		call write(outfile,#a,\.a)
		call write(outfile,pointer,sz)
		call functiondef_d(pbuffer,outfile)
	end
	callg writecln(outfile)
end
function functiondef_raw(sv pbuffer,sd outfile,sd pointer,sd sz)
	charx s#1;call get_char(pbuffer,#s)
	if s=(Xfile_function_t_normal)
		call functiondef_rw(pbuffer,outfile,pointer,sz)
		set preloop.has_entry (TRUE)
		call writecln(outfile)
	else #skip struct part, entryraw is only for global variables here, will error if not that
		call functiondef_d(pbuffer,outfile)
		callg writenl(outfile)
	end
end
function functiondef_extern(sv pbuffer,sd outfile,sd pointer,sd sz)
	call functiondef_ext(pbuffer,outfile,pointer,sz)
	callg writecln(outfile)
end
function functiondef_entry(sv pbuffer,sd outfile,sd pointer,sd sz)
	call functiondef_ext(pbuffer,outfile,pointer,sz)
	set preloop.has_entry (TRUE)
	callg writecln(outfile)
end

#D structure
function decl_runtime(sv pbuffer,sd outfile,sd field,ss ptype)
	value f^byte      #char[x]
	value *^word      #word[x]
	value *^int       #data[x]
	value *^longByte  #is intByte but same as vstr
	value *^longLong  #valuex sv
	value *^longByte  #vstr[x] ss
	value *^longWord  #vword[x] sw
	value *^longInt   #vdata[x] sd

	charx sign#1;charx feature#1
	if field=(Xfile_declfield_data)
		charx data#1;call get_char(pbuffer,#data)
		call get_char(pbuffer,#sign)
		call get_char(pbuffer,ptype)     #type is used outside
		call get_char(pbuffer,#feature)
		if sign=(Xfile_declext_no)
			call unsigned(outfile)
		end
		#special hack for a pointless long (value), needed to inc/dec
		if ptype#=(Xfile_decltype_long)
			if data=(Xfile_declfield_data_concrete)
				callg write(outfile,#write_long.a,\write_long.a)
				ret
			end
		end
	else
		call get_char(pbuffer,#sign)
		call get_char(pbuffer,ptype)
		call get_char(pbuffer,#feature)
		if sign=(Xfile_declext_no)
			call unsigned(outfile)
		end
	end
	sv fn
	set fn ptype#     #type is used outside
	mult fn :
	add fn #f
	set fn fn#
	callg fn(outfile)
end
function decl(sv pbuffer,sd outfile,ss pfield,ss ptype)
	call get_char(pbuffer,pfield)
	if pfield#!=(Xfile_declfield_const)
		call decl_runtime(pbuffer,outfile,pfield#,ptype)
	else
		char c="#define"^
		call write(outfile,#c,\.c)
	end
	call writes(outfile)

	datax sz#1;valuex pointer#1
	call get_string(pbuffer,#sz,#pointer)
	callg write(outfile,pointer,sz)
end
function byte(sd outfile)
	char a="char*"^
	call write(outfile,#a,\.a-1)
end
function word(sd outfile)
	char a="short*"^
	call write(outfile,#a,\.a-1)
end
function int(sd outfile)
	char a="int*"^
	call write(outfile,#a,\.a-1)
end
function longByte(sd outfile)
	call write(outfile,#byte.a,\byte.a)
end
function longLong(sd outfile)
	call write(outfile,#write_long.a,(write_long_cast))
end
#function longByte()end
function longWord(sd outfile)
	call write(outfile,#word.a,\word.a)
end
function longInt(sd outfile)
	call write(outfile,#int.a,\int.a)
end
