
ifndef platform
platform=lin
endif

ifndef OCOMP
OCOMP=o
endif

ifndef conv_64
conv_64=0
endif

ifndef OLINK
OLINK=ounused
endif

ifndef linkerflags
linkerflags=-O3 -s
#-O0 to 3 is same at .so here
endif

ifndef OSTRIP
OSTRIP=ostrip
endif

ifndef nobits_virtual
nobits_virtual=1
endif

#if modifying OFLAGS will lose inside data (at kinetic is reversed: first that def, then this def)
OFLAGS=conv_64 ${conv_64} ${OFLAGSEXTRA}

ifeq (${nobits_virtual},0)
OFLAGS+=nobits_virtual 0
endif

#this is like ld is linking, reason: ostrip is not adapted for this, there is another solutin with ocompiler and NOBITS
#	maybe is a 0x1000 .o size rule only from libexte.a
items = actioncode actionparse actionutil bits character file storage util ${platform} actionpool debug faction alt dtitles x local
expitems = action swf tool ../shared/action_dllmain

exte=libexte.a

debug=
restofname=lib
projname=actionswf${debug}
name = ${projname}.so
defname = ${projname}.def
items_prefix=
prefname=${items_prefix}${name}
libname=${restofname}${name}

$(eval obs = )
$(eval eobs = )
$(foreach var,$(expitems),$(eval eobs += ${items_prefix}${var}.e.o))
$(foreach var,$(items),$(eval obs += ${items_prefix}${var}.o))
$(eval logs = )
$(foreach var,$(expitems),$(eval logs += ${items_prefix}${var}.e.oc.log))
$(foreach var,$(items),$(eval logs += ${items_prefix}${var}.oc.log))

strippy=ostriputil

ifeq (${platform},win)
OFLAGS += inplace_reloc 0 include_sec 1
all: compile ounused link def
link:
	if [ "${conv_64}" = "1" ]; then \
		i686-w64-mingw32-ld --no-leading-underscore ${linkerflags} ${eobs} ${obs} -shared -entry=DllMain -lmsvcrt -o ${projname}.dll --exclude-modules-for-implib `printf ',%s' ${obs} | cut -c2-`; \
	else \
		x86_64-w64-mingw32-ld --no-leading-underscore ${linkerflags} ${eobs} ${obs} -shared -entry=DllMain -lmsvcrt -o ${projname}.dll --exclude-modules-for-implib `printf ',%s' ${obs} | cut -c2-`; \
	fi
#on 64 is mingw-w64-x86-64-dev

else
OFLAGS += underscore_pref 1
#else ifeq (${conv_64},1)

all: ${libname}

ifeq (${conv_64},1)
ATLDCOM = $(LD) ${linkerflags} -melf_i386 --dynamic-linker=/lib/ld-linux.so.2 ${eobs} -shared -entry DllMain -o ${prefname} -lc -L${items_prefix}. -l:${exte} --exclude-libs ${exte}
${libname}: ${name}
	cp ${name} ${libname}

else
#same problems like ocompiler and arm #ATLDCOM = $(CC) ${linkerflags} ${eobs} -shared -e DllMain -o ${name} -lc -L. -l:${exte} -Wl,--exclude-libs ${exte}
ATLDCOM = $(LD) ${linkerflags} --dynamic-linker=/lib64/ld-linux-x86-64.so.2 ${eobs} -shared -e DllMain -o ${name} ${L} -lc -L. -l:${exte} --exclude-libs ${exte}
ifeq (${nobits_virtual},1)
${libname}: ${name}
	cp ${name} ${libname}
	#is not with ln -s because will be one file install
else
${libname}: ${name}
	$(eval strp = )
	$(foreach var,$(expitems),$(eval strp += ${items_prefix}${var}.e.oc.log ${items_prefix}${var}.o))
	$(foreach var,$(items),$(eval strp += ${items_prefix}${var}.oc.log ${items_prefix}${var}.o))
	${OSTRIP} ${name} ${strp}
	#if [ ! -e "./strip.py" ]; then wget https://raw.githubusercontent.com/colin-i/o/master/ostrip/strip.py; fi
	${strippy} ${name} ${libname}
endif

endif

${name}: ${obs} ${eobs}
	${OLINK} ${logs}
	@echo
	$(AR) cr ${exte} ${obs}
	${ATLDCOM}
endif

%.o: %.oc
	${OCOMP} $< ${OFLAGS}
%.o: %.e.oc
	${OCOMP} $< ${OFLAGS}

ounused:
	${OLINK} ${logs}
	@echo

compile: ${obs} ${eobs}

#noleadingunderscore for exporting symbols

#obs =   :in case it is called after an object (make bits link)
#(make action link)

def:
	../fix/makedef ${defname}

clean:
	-rm -f ${logs}
	-rm -f ${obs}
	-rm -f ${eobs}
	-rm -f ${exte}
	-rm -f ${libname}
	-rm -f ${name}
	-rm -f ${projname}.dll
	-rm -f ${defname}
	-rm -f strip.py
	-rm -f .data
	-rm -f .text
	-rm -f .rela.dyn
	-rm -f .symtab
	-rm -f .symtab_offset

distclean: clean

test:
	echo "Nothing"

install-lib:
	install -D ${libname} \
		$(DESTDIR)$(prefix)/lib/${libname}

install: all install-lib

uninstall:
	-rm -f $(DESTDIR)$(prefix)/lib/${libname}

.PHONY: all install clean distclean uninstall test

.NOTPARALLEL:

#make compile && make link linkerflags= items_prefix=/home/bc/s/actionswf-1/src/ LD=/home/bc/Desktop/out/LD-.glibc2.27-x86_64.AppImage
#make linkerflags= conv_64=0
#make linkerflags= conv_64=0 link

#make strippy="python /home/bc/Desktop/ostriputil/ostriputil-1/ostriputil/main.py" OFLAGSEXTRA="function_name 1 nul_res_pref 1"
