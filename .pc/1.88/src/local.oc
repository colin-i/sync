
format elfobj64

include "../include/prog.h"

import "identifiers_set" identifiers_set
import "stack_to_word_arg" stack_to_word_arg
import "rect_prepare" rect_prepare
import "dword_swap" dword_swap
import "args_advance" args_advance
import "bits_packs" bits_packs
import "NumFill_NumLin" NumFill_NumLin
import "shapewithstyle_records" shapewithstyle_records
import "printEr" printEr
import "word_arg_to_stack" word_arg_to_stack
import "file_get_content__resources_free" file_get_content__resources_free
import "matrix_translate" matrix_translate
import "struct_ids" struct_ids
import "block_get_size" block_get_size
import "block_get_mem" block_get_mem
import "block_reset_size" block_reset_size

importx "strlen" strlen
importx "memcpy" memcpy

#aftercalli

import "swf_mem" swf_mem
import "swf_mem_add" swf_mem_add
import "rect_add" rect_add
import "swf_frames_reg" swf_frames_reg
import "swf_tag" swf_tag
import "identifiers_get" identifiers_get
import "swf_tag_recordheader_entry" swf_tag_recordheader_entry
import "error" error
import "file_get_content" file_get_content
import "exportsId_get" exportsId_get

function swf_new_ex_local(ss path,sd width,sd height,sd backgroundcolor,sd fps,sd add_debug)
#ss path             file out pathname
#sd width
#sd height
#sd backgroundcolor  0xRRGGBB  value
#sd fps              swf frames per second

    #F=uncompressed, C=ZLib
const hd_start=\
    char *=F
    char *={W,S}
    char *version=8
const file_sz_off=\
    data *FileLength#1
data size=\-hd_start
vdata hd_pack%hd_start
    #rect
const hd2=\
    char *FrameRate=0
        char FrameRate#1
    char *FrameCount={0,0}  #will be incremented at least once
data size2=\-hd2
vdata hd_pack2%hd2

	import "flags_init" flags_init
	call flags_init(add_debug,path)
    call swf_mem((mem_exp_init),path,(file_sz_off-hd_start))

    #identifiers for swf
    call identifiers_set(0);#font with id 0 isn't visible in the placements

    call swf_mem_add(hd_pack,size)
    call rect_add(width,height)
    #x.x format
    set FrameRate fps
    call swf_mem_add(hd_pack2,size2)
    #

	call swf_frames_reg() #is a rect with nbits above, ..., faster here

    char setbackgroundtag#2
    char red#1
    char green#1
    char blue#1

    set blue backgroundcolor
    sd g_color=0xff00;and g_color backgroundcolor;div g_color 0x100;set green g_color
    sd r_color=0xff0000;and r_color backgroundcolor;div r_color (0x100*0x100);set red r_color
    call swf_tag(#setbackgroundtag,(SetBackGroundColor),3)
endfunction

#id
function swf_font_local(ss fontname,sd font_flags)
#ss fontname    = a string with the browser font, for example "_sans"
#sd font_flags  = prog.h file is with the flags
    const font_hd_start=\

    char id#2
    char Flags#1
    char *Language=0
    char FontNameLen#1

    const font_hd_start_size=\-font_hd_start
    vdata font_hd_start^id

    data NumGlyphs=0

    sd fontid
    setcall fontid identifiers_get()
    call stack_to_word_arg(fontid,#id)

    set Flags font_flags

    setcall FontNameLen strlen(fontname)

    sd size=font_hd_start_size+2

    sd has_layout=FontFlagsHasLayout
    and has_layout font_flags
    add size FontNameLen
    if has_layout!=0
        add size (2+2+2+2)
    endif

    call swf_tag_recordheader_entry((DefineFont2),size)
    call swf_mem_add(font_hd_start,(font_hd_start_size))
    call swf_mem_add(fontname,FontNameLen)
    call swf_mem_add(#NumGlyphs,2)
    if has_layout!=0
        char FontAscent={0,0}
        char *FontDescent={0,0}
        char *FontLeading={0,0}
        char *KerningCount={0,0}
        call swf_mem_add(#FontAscent,(2+2+2+2))
    endif
    return fontid
endfunction

#id
function swf_text_local(sd bound_width,sd bound_height,ss variablename,sd flags,sv structure)
#sd bound_width  width of the text
#sd bound_height height
#ss variablename to change it with actionscript
#sd flags        see include/text.h
#sv structure    see edittext_struct()  from character.oc, set the flags first
    #CharacterID
    sd size=2
    #RECT
    sd rect
    sd rectsz
    call rect_prepare(#rect,#rectsz,bound_width,bound_height)
    add size rectsz
    #flags
    add size 2
    #FontID
    sd p_fontid
    sd hasfont=HasFont
    and hasfont flags
    if hasfont!=0
        set p_fontid structure
        add size 2
    endif
    #FontClass
    ss fontclassname
    sd fontclasssize
    sd hasfontclass=HasFontClass
    and hasfontclass flags
    add structure (2*DWORD)
    if hasfontclass!=0
        if hasfont!=0
            call error("HasFontClass can't be true if HasFont is true.")
        endif
        set fontclassname structure#
        setcall fontclasssize strlen(fontclassname)
        inc fontclasssize
        add size fontclasssize
    endif
    #FontHeight
    sd p_font_height
    sub structure (DWORD)
    if hasfont!=0
        set p_font_height structure
        add size 2
    endif
    #TextColor
    sd p_rgba
    sd hastextcolor=HasTextColor
    and hastextcolor flags
    add structure (DWORD+:)
    if hastextcolor!=0
        set p_rgba structure
        add size 4
    endif
    #MaxLength
    sd p_maxlength
    sd hasmaxlength=HasMaxLength
    and hasmaxlength flags
    add structure (DWORD)
    if hasmaxlength!=0
        set p_maxlength structure
        add size 2
    endif
    #layout
    sd p_layout
    data layout_size=4*WORD+BYTE
    sd haslayout=HasLayout
    and haslayout flags
    add structure (DWORD+:)
    if haslayout!=0
        set p_layout structure
        add size layout_size
    endif
    #VariableName
    sd vlen
    setcall vlen strlen(variablename)
    inc vlen
    add size vlen
    #InitialText
    ss initialtext
    sd initialtextsize
    sd hastext=HasText
    and hastext flags
    sub structure :
    if hastext!=0
        set initialtext structure#
        setcall initialtextsize strlen(initialtext)
        inc initialtextsize
        add size initialtextsize
    endif

    call swf_tag_recordheader_entry((DefineEditText),size)
    sd id
    setcall id identifiers_get()
    call swf_mem_add(#id,2)
    call swf_mem_add(rect,rectsz)
    call swf_mem_add(#flags,2)
    #
    if hasfont!=0
        call swf_mem_add(p_fontid,2)
    endif
    if hasfontclass!=0
        call swf_mem_add(fontclassname,fontclasssize)
    endif
    if hasfont!=0
        sd height
        set height p_font_height#
        mult height 20
        call swf_mem_add(#height,2)
    endif
    if hastextcolor!=0
        setcall p_rgba# dword_swap(p_rgba#)
        call swf_mem_add(p_rgba,4)
    endif
    if hasmaxlength!=0
        call swf_mem_add(p_maxlength,2)
    endif
    if haslayout!=0
        data layout_align#1
        data layout_leftmargin#1
        data layout_rightmargin#1
        data layout_indent#1
        data layout_leading#1
        call memcpy(#layout_align,p_layout,(5*DWORD))
        mult layout_leftmargin 20
        mult layout_rightmargin 20
        mult layout_indent 20
        mult layout_leading 20
        char l_align#1
        char l_leftmargin#2
        char l_rightmargin#2
        char l_indent#2
        char l_leading#2
        set l_align layout_align
        call stack_to_word_arg(layout_leftmargin,#l_leftmargin)
        call stack_to_word_arg(layout_rightmargin,#l_rightmargin)
        call stack_to_word_arg(layout_indent,#l_indent)
        call stack_to_word_arg(layout_leading,#l_leading)
        call swf_mem_add(#l_align,layout_size)
    endif
    call swf_mem_add(variablename,vlen)
    if hastext!=0
        call swf_mem_add(initialtext,initialtextsize)
    endif
    return id
endfunction

import "shape_records_add" shape_records_add
#id
function swf_shape_local(sd width,sd height,sd args)
#sd width
#sd height
#sd args        see swf_shape_basic or swf_image(last part) for example, or see shape_records_add and it's sub-functions to see how the swf SHAPERECORD is added
    if width=0
        call error("shape width 0 not allowed")
    elseif height=0
        call error("shape height 0 not allowed")
    endelseif
    sd fillstyle
    sd fillarg
    sd linewidth
    sd linecolor

    setcall fillstyle args_advance(#args)
    if fillstyle!=(no_fill)
        setcall fillarg args_advance(#args)
    endif
    setcall linewidth args_advance(#args)
    if linewidth!=0
        setcall linecolor args_advance(#args)
    endif
    ########
    sd shape_size

    #id
    sd shape_id
    setcall shape_id identifiers_get()
    set shape_size (WORD)

    #rect
    sd rect
    sd rect_size
    call rect_prepare(#rect,#rect_size,width,height)
    add shape_size rect_size

    #SHAPEWITHSTYLE
    char FillStyleCount#1
        char FillStyleType#1
    #
        data data#3
    vdata fillstyles^FillStyleCount
    set FillStyleCount 0
    sd fillstyles_size=1
    if fillstyle!=(no_fill)
        set FillStyleCount 1
        set FillStyleType fillstyle
        add fillstyles_size 1
        if fillstyle=(solid_fill)
            setcall data dword_swap(fillarg)
            add fillstyles_size (DWORD)
        else
        #if fillstyle==(repeating_bitmap_fill)
        #clipped bitmap fill,non-smoothed repeating bitmap or non-smoothed clipped bitmap
            call stack_to_word_arg(fillarg,#data)
            sd fill_pointer^data
            add fill_pointer (WORD)
            #matrix,scaleX=20,scaleY=20,translateX=0,translateY=0
            #first bit: scaleX 0 and Y 0;or 1;=>0;else is 1
            #const FIXEDBITS=16
            #x and y=floor(scaleX*(1<<FIXEDBITS))=0x00140000
            #Nbits is 0x15 + 1(sign)
            const predef_nbits=0x16
            const predef_XYscale=0x00140000
            #rotate is 0
            #translate nbits is 0
            call bits_packs(fill_pointer,6,1,1,(predef_nbits),(NBits_size),(predef_XYscale),(predef_nbits),(predef_XYscale),(predef_nbits),0,1,0,(NBits_size))
            #char ref_id#2
            #char matrix#7
            add fillstyles_size (2+7)
        endelse
    endif
    add shape_size fillstyles_size
    #
    char LineStyleCount#1
    char line_points#2
    data color#1
    vdata linestyles^LineStyleCount
    sd linestyles_size=1
    set LineStyleCount 0
    if linewidth!=0
        set LineStyleCount 1
        mult linewidth 20
        call stack_to_word_arg(linewidth,#line_points)
        setcall color dword_swap(linecolor)
        add linestyles_size (WORD+DWORD)
    endif
    add shape_size linestyles_size
    #NumFillBits/NumLineBits
    call NumFill_NumLin(0,FillStyleCount,LineStyleCount)
    sd NFill_NLin;setcall NFill_NLin NumFill_NumLin(1,(TRUE));mult NFill_NLin 0x10;orcall NFill_NLin NumFill_NumLin(1,(FALSE))
    inc shape_size
    #shaperecord[n]
    sd shapewithstyle_record_start
    setcall shapewithstyle_record_start shapewithstyle_records()
    value pointer#1;data pos#1
    set pos 0x80
    set pointer shapewithstyle_record_start
    sd p_dest_pos^pointer
    while args#!=-1
        call shape_records_add(p_dest_pos,#args)
    endwhile
    data end={0,0}
    sd end_record^end
    call shape_records_add(p_dest_pos,#end_record)
    if pos!=0x80
        inc pointer
    endif
    sd records_sz
    set records_sz pointer
    sub records_sz shapewithstyle_record_start
    add shape_size records_sz

    call swf_tag_recordheader_entry((DefineShape3),shape_size)
    call swf_mem_add(#shape_id,2)
    call swf_mem_add(rect,rect_size)
    call swf_mem_add(fillstyles,fillstyles_size)
    call swf_mem_add(linestyles,linestyles_size)
    call swf_mem_add(#NFill_NLin,1)
    call swf_mem_add(shapewithstyle_record_start,records_sz)

    return shape_id
endfunction

#id
function swf_shape_bitmap_local(sd bitmapId,sd width,sd height)
#sd bitmapId    id, e.g.: from swf_dbl
    sd shape_id
    sd width_variable
    set width_variable width
    sd height_variable
    set height_variable height
    data struct=repeating_bitmap_fill
        data refid#1
        set refid bitmapId
    data *=0
    data *={0,StateFillStyle0}
    data *={1,1}
        data w1#1;data *=0
        set w1 width_variable
    data *={1,1}
        data *=0;data h1#1
        set h1 height_variable
    data *={1,1}
        data w2#1;data *=0
        mult width_variable -1
        set w2 width_variable
    data *={1,1}
        data *=0;data h2#1
        mult height_variable -1
        set h2 height_variable
    data *=-1
	setcall shape_id swf_shape_local(width,height,#struct)
    return shape_id
endfunction

#id
function swf_image_ex_local(ss imagepath,sd p_wh)
#ss imagepath = path name for the dbl image
#sd p_wh      = pointer width height
    sd dbl_id
    setcall dbl_id swf_dbl_ex_local(imagepath,p_wh)
    #add dbl to a shape
    sd shape_id
    sd width;set width p_wh#;add p_wh (DWORD)
    setcall shape_id swf_shape_bitmap_local(dbl_id,width,p_wh#)
    return shape_id
endfunction
#id
function swf_dbl_ex_local(ss imagepath,sd p_wh)
#ss imagepath = path name for the dbl image
#sd p_wh = pointer width a dword and height next dword
    sd id
    sd mem
    sd size
    sd cursor
    setcall mem file_get_content(imagepath,#size)
    if size<8
        call error("missing image header")
    endif
    char hd_magic1={D,B,l,1};vdata magic1^hd_magic1
    char hd_magic2={D,B,l,2};vdata magic2^hd_magic2
    if mem#!=magic1#
    if mem#!=magic2#
        call printEr("expecting dbl(define bits lossless 1 or 2)header; filepath: ")
        call error(imagepath)
    endif;endif
    sd header=DefineBitsLossless2
    if mem#=magic1#
        set header (DefineBitsLossless)
    endif
    set cursor mem
    add cursor (DWORD)

    sd image_size
    setcall image_size dword_swap(cursor#)
    add cursor (DWORD)
    sub size (2*DWORD)
    if image_size>size
        call error("size error at dbl")
    endif
    #add the define bits lossless file to mem
    add size (WORD)
    import "swf_tag_recordheader_long_entry" swf_tag_recordheader_long_entry
    call swf_tag_recordheader_long_entry(header,size)
    setcall id identifiers_get()
    call swf_mem_add(#id,(WORD))
    if p_wh!=0
        #get width and height;BitmapFormat UI8,BitmapWidth UI16,BitmapHeight UI16
        if image_size<(2*WORD+BYTE)
            call error("size error at dbl when looking for width/height")
        endif
        sd pointer
        set pointer cursor
        add pointer (BYTE)
        setcall p_wh# word_arg_to_stack(pointer)
        add pointer (WORD)
        add p_wh (DWORD)
        setcall p_wh# word_arg_to_stack(pointer)
    endif
    call swf_mem_add(cursor,image_size)
    call file_get_content__resources_free()
    return id
endfunction

function swf_placeobject_local(sd refid,sd depth)
#sd refid    the id
#sd depth    depth value
     call swf_placeobject_coords_local(refid,depth,0,0)
endfunction
#                                                  if not data here, then will conflict at c language where we talk about int
function swf_placeobject_coords_local(sd refid,sd depth,datax x,datax y)
#sd refid
#sd depth
#sd x         x coordinate
#sd y         y coordinate
#const PlaceFlagHasClipActions=0x80
#const PlaceFlagHasClipDepth=0x40
#const PlaceFlagHasName=0x20
#const PlaceFlagHasRatio=0x10
#const PlaceFlagHasColorTransform=0x8
const PlaceFlagHasMatrix=0x4
const PlaceFlagHasCharacter=0x2
#const PlaceFlagMove=0x1
    sd flags=PlaceFlagHasMatrix|PlaceFlagHasCharacter
    sd matrix
    datax matrixsz#1
    call matrix_translate(#matrix,#matrixsz,x,y)

    sd size=5
    add size matrixsz
    call swf_tag_recordheader_entry((PlaceObject2),size)
    call swf_mem_add(#flags,1)
    call swf_mem_add(#depth,2)
    #character id
    call swf_mem_add(#refid,2)
    #matrix
    call swf_mem_add(matrix,matrixsz)
endfunction
function swf_removeobject_local(sd depth)
#sd depth        depth for the removeobject2 tag
    call swf_tag_recordheader_entry((RemoveObject2),2)
    #depth
    call swf_mem_add(#depth,2)
endfunction

function swf_exports_done_local()
#write all the exports to the swf
    sd exports
    setcall exports exportsId_get()
    sd block
    setcall block struct_ids((ids_get),exports)
    sd size
    setcall size block_get_size(block)
    if size!=0
        #
        call swf_tag_recordheader_entry((ExportAssets),size)
        #
        sd exp
        setcall exp block_get_mem(block)
        call swf_mem_add(exp,size)
        call block_reset_size(block)
    endif
endfunction
