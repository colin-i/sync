

Str filenameloc#1
SetCall filenameloc endoffolders(path_nofree)
Char storeachar#1
Set storeachar filenameloc#
Set filenameloc# null

sd chdirresult#1
setcall chdirresult changedir(path_nofree)
if chdirresult!=chdirok
	str startchdirerr="Cannot set active folder:"
	setcall errormsg errorDefOut(startchdirerr,path_nofree)
	Call msgerrexit(errormsg)
endif

Set filenameloc# storeachar

Data pathinsize#1                         #also used at pathout
SetCall pathinsize strlen(filenameloc)
Data movesize#1
Set movesize pathinsize
Inc movesize

#Char safedirdata="./"  #it is nonsens

if movesize>^flag_max_path
	Call msgerrexit("max path?")
endif
SetCall safecurrentdirtopath memalloc(flag_max_path)
If safecurrentdirtopath=null
	Call errexit()
EndIf

#files
Set fileout (openno)
set logfile (openno)
set xfile (openno)

#scopes and pass_calls
set stackalign (NULL)
set scopesbag (NULL)

Call memtomem(safecurrentdirtopath,filenameloc,movesize)
if logbool=true
	setcall errormsg openfile_write_add_extension(safecurrentdirtopath,".log",ptrlogfile)
	if errormsg=noerr
		if relative_path=(FALSE)
			sd log_root_folder
			setcall log_root_folder getcwd((NULL),0)
			if log_root_folder=(NULL)
				char getcwd_first="first getcwd error"
				set errormsg #getcwd_first
			else
				setcall errormsg addtolog_withchar_parses(log_root_folder,(log_pathfolder),(TRUE))
				call free(log_root_folder)
			endelse
		else
			Set filenameloc# (asciinul)
			setcall errormsg addtolog_withchar_parses(path_nofree,(log_pathfolder),(TRUE))
			Set filenameloc# storeachar  ##required to compare if they are same at pathout
		endelse
	endif
	if errormsg!=noerr
		Call msgerrexit(errormsg)
	endif
endif
if xbool!=(No)
	setcall errormsg openfile_mode_add_extension(safecurrentdirtopath,".x",#xfile,(_open_readwrite),(nonexec_perms))
	if errormsg!=noerr
		Call msgerrexit(errormsg)
	endif
endif
