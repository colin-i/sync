Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 edor (1-x34) focal; urgency=medium
 .
   * remove config
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2023-07-21

--- edor-1.orig/Makefile.old
+++ edor-1/Makefile.old
@@ -1,7 +1,10 @@
+
+#make -f Makefile.old
+
 prefix = /usr
 
 DEFS =  -DUSE_FS=1 -DPLATFORM64=1\
-	 -DHAVE_CURSES_H=1 -DHAVE_DIRENT_H=1 -DHAVE_ERRNO_H=1 -DHAVE_FCNTL_H=1 -DHAVE_POLL_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STDIO_H=1 -DHAVE_STRING_H=1 -DHAVE_UNISTD_H=1\
+	 -DHAVE_CURSES_H=1 -DHAVE_DIRENT_H=1 -DHAVE_ERRNO_H=1 -DHAVE_FCNTL_H=1 -DHAVE_POLL_H=1 -DHAVE_STDIO_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_UNISTD_H=1 -DHAVE_TIME_H=1 -DHAVE_SYS_STAT_H=1\
 	 -DHAVE_STDBOOL_H=1 -DHAVE_STDDEF_H=1
 # -DHAVE_DLFCN_H=1
 # -DHAVE_SIGNAL_H=1
@@ -10,7 +13,7 @@ DEFS =  -DUSE_FS=1 -DPLATFORM64=1\
 
 all: s/edor
 
-OBJ = s/main.o s/bar.o s/sep.o
+OBJ = s/main.o s/bar.o s/sep.o s/tw.o
 
 %.o: %.c
 	$(CC) -x c++ -c -o $@ $< $(DEFS) $(CPPFLAGS) $(CFLAGS)
--- edor-1.orig/readme.md
+++ edor-1/readme.md
@@ -20,7 +20,7 @@ yum install edor-*.*.rpm
 On linux distributions, <i>.AppImage</i> file from [releases](https://github.com/colin-i/edor/releases).
 
 ## From source
-Use autoconf automake libncurses-dev ; on armv7l(alias arm) cpu, libunwind-dev
+Use autoconf automake libncurses-dev ; on armv7l(alias armhf) cpu, libunwind-dev
 ```sh
 autoreconf -i
 ./configure
@@ -29,11 +29,8 @@ sudo make install
 ```
 Use *\-\-prefix=your_path* at *./configure* if needed (example: at Termux in Android).\
 *\-\-disable\-cpp* to set c rules.\
-Or, for some 64-bit platforms:
-```sh
-make -f Makefile.old
-```
-Uninstall command is *make uninstall*.
+Uninstall command is *make uninstall*.\
+To remove configuration launch ```edor --remove-config```.
 
 ## Donations
 The *donations* section is here
--- edor-1.orig/s/bar.c
+++ edor-1/s/bar.c
@@ -51,7 +51,7 @@
 
 #define err_len_min 2
 
-bool insensitive=false;
+bool issensitive=true;
 
 static int err_l=0;
 static char*err_s;
@@ -278,7 +278,7 @@ static int del(int x,char*input,int curs
 #define AZ_to_az 'a'-'A'
 static bool charcompare(char a,char b){
 	if(a!=b){
-		if(insensitive==true){
+		if(issensitive==false){
 			if((a<='Z')&&(b>='a')){
 				if((a+AZ_to_az)==b)return true;
 			}else if((b<='Z')&&(a>='a')){
--- edor-1.orig/s/base.h
+++ edor-1/s/base.h
@@ -70,7 +70,7 @@ extern char ln_term[3];
 extern size_t ln_term_sz;
 extern char*textfile;
 extern bool mod_flag;
-extern bool insensitive;
+extern bool issensitive;
 //main,bar,tw
 extern row*rows;
 extern size_t rows_tot;
--- edor-1.orig/s/inc/main/stdio.h
+++ edor-1/s/inc/main/stdio.h
@@ -10,6 +10,7 @@ extern "C" {
 
 FILE* freopen(const char *filename, const char *mode, FILE *stream);
 int getchar(void);
+int printf(const char *, ...);
 int putchar(int);
 int puts(const char*);
 int rename(const char*,const char*);
--- edor-1.orig/s/inc/main/unistd.h
+++ edor-1/s/inc/main/unistd.h
@@ -14,6 +14,7 @@ extern "C" {
 
 off_t lseek(int,off_t,int);
 ssize_t read(int,void*,size_t);
+int rmdir(const char *);
 int unlink(const char*);
 
 #ifdef __cplusplus
--- edor-1.orig/s/main.c
+++ edor-1/s/main.c
@@ -2088,8 +2088,8 @@ static bool loopin(WINDOW*w){
 			}
 			else if(strcmp(s,"^E")==0){
 				bool b;char c;
-				if(stored_mouse_mask!=0){stored_mouse_mask=mousemask(0,nullptr);b=false;c='e';}
-				else{stored_mouse_mask=mousemask(ALL_MOUSE_EVENTS,nullptr);b=true;c='E';}
+				if(stored_mouse_mask==0){stored_mouse_mask=mousemask(ALL_MOUSE_EVENTS,nullptr);b=false;c='E';}
+				else{stored_mouse_mask=mousemask(0,nullptr);b=true;c='e';}
 				vis(c,w);
 				setprefs(mask_mouse,b);
 			}
@@ -2101,17 +2101,12 @@ static bool loopin(WINDOW*w){
 				setprefs(mask_indent,indent_flag);
 			}
 			else if(strcmp(s,"^T")==0){
-				char c;
-				if(insensitive/*true*/){
-					insensitive=false;
-					c='t';
-				}else{
-					insensitive=true;
-					c='T';
-				}
+				bool b;char c;
+				if(issensitive/*true*/){issensitive=false;c='T';}
+				else{issensitive=true;c='t';}
 				//doupdate();will change cursor
 				vis(c,w);
-				setprefs(mask_insensitive,insensitive);
+				setprefs(mask_insensitive,issensitive);
 			}
 			else if(strcmp(s,"^W")==0){if(text_wrap(w)/*true*/)return true;}
 
@@ -2235,11 +2230,10 @@ static bool valid_ln_term(char*input_ter
 	return false;
 }
 //same as normalize
-static int startfile(int argc,char**argv,size_t*text_sz,bool no_file,bool no_input){
+static int startfile(char*argfile,int argc,char**argv,size_t*text_sz,bool no_file,bool no_input){
 	bool not_forced=true;
 	if(no_file==false){
-		char*f=argv[1];
-		if(grab_file(f,text_sz)/*true*/)return 0;
+		if(grab_file(argfile,text_sz)/*true*/)return 0;
 		if(argc==3){
 			if(valid_ln_term(argv[2],&not_forced)/*true*/)return 0;
 		}
@@ -2317,23 +2311,23 @@ static void getprefs(){
 	int f=open(prefs_file,O_RDONLY);
 	if(f!=-1){
 		if(read(f,&mask,mask_size)==mask_size){
-			if((mask&mask_mouse)!=0)stored_mouse_mask=mousemask(ALL_MOUSE_EVENTS,nullptr);
+			if((mask&mask_mouse)==0)stored_mouse_mask=mousemask(ALL_MOUSE_EVENTS,nullptr);
 			if((mask&mask_indent)==0)indent_flag=false;
-			if((mask&mask_insensitive)!=0)insensitive=true;
+			if((mask&mask_insensitive)==0)issensitive=false;
 		}
 		close(f);
 		return;
 	}
 	f=open_new(prefs_file);
 	if(f!=-1){
-		mask=mask_mouse|mask_indent/*|mask_insensitive*/;
+		mask=mask_mouse|mask_indent|mask_insensitive;
 		#pragma GCC diagnostic push
 		#pragma GCC diagnostic ignored "-Wunused-result"
 		write(f,&mask,mask_size);
 		#pragma GCC diagnostic pop
 	}
 }
-static bool setfilebuf(char*s,char*cutbuf_file){
+static bool help_cutbuffile_preffile(char*s,char*cutbuf_file){
 #if ((!defined(USE_FS)) && (!defined(USE__FS)))
 	set_path_separator(s);
 #endif
@@ -2365,7 +2359,6 @@ static bool setfilebuf(char*s,char*cutbu
 						//0 on success
 					}
 					sprintf(&prefs_file[dirsz],storeflname,path_separator,&s[i]);
-					getprefs();
 				}
 			}
 		}
@@ -2392,91 +2385,149 @@ static void color(){
 	}
 }
 
-static void proced(char*comline){
-	char cutbuf_file[max_path_0];
-	cutbuf_file[0]='\0';
-	if(setfilebuf(comline,cutbuf_file)/*true*/){
-		bool loops=false;
-		int cy=0;int cx=0;
-		int r=getmaxy(stdscr)-1;
-		int old_r=r-1;//set -1 because at first compare is erasing new_visual
-		int lrsize=1;//left right space
-		do{
-			void*a=realloc(x_right,(size_t)r);
-			if(a==nullptr)break;
-			x_right=(bool*)a;//is text,[xtext+nothing
-			int maxx=getmaxx(stdscr);
-			int c=maxx-(2*lrsize);
-			tabs_rsz=1+(c/tab_sz);
-			if((c%tab_sz)!=0)tabs_rsz++;
-			void*b=realloc(tabs,sizeof(int)*(size_t)(r*tabs_rsz));
-			if(b==nullptr)break;
-			tabs=(int*)b;//is nroftabs,col0,col1,...; and int if 256 tabs. not short? moving like curses with the ints
-			a=realloc(mapsel,(size_t)c+1);
-			if(a==nullptr)break;
-			mapsel=(char*)a;//cols+null
-
-			if(textfile!=nullptr){
-				move(0,0);//no clear, only overwrite, can resize left to right then back right to left
-				write_title();//this is also the first write
-			}
-
-			WINDOW*w=newwin(r-topspace,c,topspace,lrsize);
-			leftcontent=newwin(r-topspace,1,topspace,0);
-			rightcontent=newwin(r-topspace,1,topspace,maxx-1);
-			if(w!=nullptr){
-				keypad(w,true);
-
-				printhelp();
-				if(r<=old_r)clrtoeol();//resize to up,is over text
-				//or =, clear bar,visual and saves
-				old_r=r;
-				if(mod_flag==false){
-					if(hardtime==0)restore_visual();
-					else mod_visual(modif_visual);
+static void proced(char*cutbuf_file,WINDOW*w1){
+	bool loops=false;
+	int cy=0;int cx=0;
+	int r=getmaxy(stdscr)-1;
+	int old_r=r-1;//set -1 because at first compare is erasing new_visual
+	int lrsize=1;//left right space
+	do{
+		void*a=realloc(x_right,(size_t)r);
+		if(a==nullptr)break;
+		x_right=(bool*)a;//is text,[xtext+nothing
+		int maxx=getmaxx(stdscr);
+		int c=maxx-(2*lrsize);
+		tabs_rsz=1+(c/tab_sz);
+		if((c%tab_sz)!=0)tabs_rsz++;
+		void*b=realloc(tabs,sizeof(int)*(size_t)(r*tabs_rsz));
+		if(b==nullptr)break;
+		tabs=(int*)b;//is nroftabs,col0,col1,...; and int if 256 tabs. not short? moving like curses with the ints
+		a=realloc(mapsel,(size_t)c+1);
+		if(a==nullptr)break;
+		mapsel=(char*)a;//cols+null
+
+		if(textfile!=nullptr){
+			move(0,0);//no clear, only overwrite, can resize left to right then back right to left
+			write_title();//this is also the first write
+		}
+
+		WINDOW*w=newwin(r-topspace,c,topspace,lrsize);
+		leftcontent=newwin(r-topspace,1,topspace,0);
+		rightcontent=newwin(r-topspace,1,topspace,maxx-1);
+		if(w!=nullptr){
+			keypad(w,true);
+
+			printhelp();
+			if(r<=old_r)clrtoeol();//resize to up,is over text
+			//or =, clear bar,visual and saves
+			old_r=r;
+			if(mod_flag==false){
+				if(hardtime==0)restore_visual();
+				else mod_visual(modif_visual);
+			}
+			else wnoutrefresh(stdscr);
+
+			refreshpage(w);//this must be after refresh stdscr, else first > at rightcontent will not show
+			wmove(w,cy,cx);
+
+			position_reset();
+			position(cy,cx);
+			loops=loopin(w);
+			if(loops/*true*/){//is already resized and the cursor fits in the screen, not in the new size
+				cy=getcury(w);
+				r=getmaxy(stdscr)-1;
+				if(cy==r){
+					cy=r-1;
+					if(ytext+1<rows_tot)ytext++;
 				}
-				else wnoutrefresh(stdscr);
-
-				refreshpage(w);//this must be after refresh stdscr, else first > at rightcontent will not show
-				wmove(w,cy,cx);
-
-				position_reset();
-				position(cy,cx);
-				loops=loopin(w);
-				if(loops/*true*/){//is already resized and the cursor fits in the screen, not in the new size
-					cy=getcury(w);
-					r=getmaxy(stdscr)-1;
-					if(cy==r){
-						cy=r-1;
-						if(ytext+1<rows_tot)ytext++;
+				cx=getcurx(w);
+				//c=getmaxx(w1);never if(cx>=c)
+			}
+			delwin(w);delwin(leftcontent);delwin(rightcontent);
+		}else break;
+	}while(loops/*true*/);
+	if(x_right!=nullptr){
+		free(x_right);
+		if(tabs!=nullptr){
+			free(tabs);
+			if(mapsel!=nullptr){
+				free(mapsel);//from here it is the interaction
+				writefilebuf(cutbuf_file);//only here can be modified than the initial state
+				undo_free();//when using undo
+			}
+		}
+	}
+}
+static void remove_config_print(char*s){
+	printf("%s removed\n",s);
+}
+static bool remove_config(char*pattern,char*cutbuf_file){
+	if(strcmp(pattern,"--remove-config")==0){
+		int c=-1;int p=-1;int pf=-1;
+		char prefs_folder[max_path_0];
+		if(cutbuf_file[0]!='\0')c=access(cutbuf_file,F_OK);
+		if(prefs_file[0]!='\0'){
+			char*end=prefs_file+strlen(prefs_file);
+			do{end--;}while(*end!=path_separator);
+			*end='\0';sprintf(prefs_folder,"%s",prefs_file);*end=path_separator;
+			p=access(prefs_folder,F_OK);//is also working for folders
+			if(p==0)pf=access(prefs_file,F_OK);
+		}
+		if(c==0||p==0){
+			puts("Would remove:");//puts writes and a trailing new line
+			if(c==0)puts(cutbuf_file);
+			if(p==0){
+				if(pf==0)puts(prefs_file);
+				printf("\"%s\" if not empty\n",prefs_folder);
+			}
+			puts("yes ?");
+			int e=getchar();//can be fgets but at raw was not ok, and initscr is clearing screen and can't see printf on some systems, if can combine raw with initscr this is ok
+			if(e=='y'){
+				e=getchar();
+				if(e=='e'){
+					e=getchar();
+					if(e=='s'){
+					//here can also verify for newline
+						if(c==0)
+							if(unlink(cutbuf_file)==0)
+								remove_config_print(cutbuf_file);
+						if(p==0){
+							if(pf==0)if(unlink(prefs_file)==0)
+								remove_config_print(prefs_file);
+							if(rmdir(prefs_folder)==0)remove_config_print(prefs_folder);
+							else printf("%s ignored (maybe is not empty)\n",prefs_folder);
+						}
+						return true;
 					}
-					cx=getcurx(w);
-					//c=getmaxx(w1);never if(cx>=c)
-				}
-				delwin(w);delwin(leftcontent);delwin(rightcontent);
-			}else break;
-		}while(loops/*true*/);
-		if(x_right!=nullptr){
-			free(x_right);
-			if(tabs!=nullptr){
-				free(tabs);
-				if(mapsel!=nullptr){
-					free(mapsel);
-					writefilebuf(cutbuf_file);
-					undo_free();
 				}
 			}
+			puts("expecting \"yes\"");
 		}
-		free(helptext);
+		return true;
 	}
-	if(cutbuf!=nullptr)free(cutbuf);
+	return false;
 }
-static void action(int argc,char**argv,WINDOW*w1){
+static void action_go(int argc,char**argv,char*cutbuf_file){
 	size_t text_sz;
+	char*argfile=nullptr;//example when launching with no args
 	bool no_file=argc==1;
 	if(no_file==false){
-		no_file=new_visual(argv[1])/*true*/;
-		if(restorefile_path(argv[1])/*true*/){
+
+		char*src=argv[1];
+		if(remove_config(src,cutbuf_file)/*true*/)return;
+		size_t f_slen=strlen(src);
+		argfile=(char*)malloc(f_slen+1);//textfile= is not ok, can be changed at =input. is also set at new visual, and below
+		if(argfile==nullptr)return;
+		char*dest=argfile;char*end=src+f_slen;
+		while(src<end){
+			if(*src=='\\'){src++;
+				if(src==end)break;
+			}
+			*dest=*src;dest++;src++;
+		}*dest='\0';
+
+		no_file=new_visual(argfile)/*true*/;
+		if(restorefile_path(argfile)/*true*/){
 			if(access(restorefile_buf,F_OK)==0){
 				//if(argc==2){
 				puts("There is an unrestored file, (c)ontinue?\r");
@@ -2485,7 +2536,7 @@ static void action(int argc,char**argv,W
 				//}
 			}
 		}
-		if(editingfile_path(argv[1])/*true*/){
+		if(editingfile_path(argfile)/*true*/){
 			if(access(editingfile_buf,F_OK)==0){
 				puts("The file is already opened in another instance, (c)ontinue?\r");
 				int c=getchar();
@@ -2514,11 +2565,11 @@ static void action(int argc,char**argv,W
 			}
 		}
 	}else{
-		ok=startfile(argc,argv,&text_sz,no_file,no_input);
+		ok=startfile(argfile,argc,argv,&text_sz,no_file,no_input);
 		if(ok!=0){
 			if(ok<1){
-				char txt[]={'N','o','r','m','a','l','i','z','e',' ','l','i','n','e',' ','e','n','d','i','n','g','s',' ','t','o',' ','\\','r',' ',' ','?',' ','n','=','n','o',',',' ','d','e','f','a','u','l','t','=','y','e','s','\r','\0'};
-				//           0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26   27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49   50
+				char txt[]={'N','o','r','m','a','l','i','z','e',' ','l','i','n','e',' ','e','n','d','i','n','g','s',' ','t','o',' ','\\','r',' ',' ','?',' ','n','=','n','o','\r','\0'};
+				//           0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26   27  28  29  30  31  32  33  34  35  36  37
 				if(ln_term_sz==2){txt[28]='\\';txt[29]='n';}
 				else if(ln_term[0]=='\n')txt[27]='n';
 				puts(txt);
@@ -2529,9 +2580,7 @@ static void action(int argc,char**argv,W
 				rows=(row*)malloc(rows_tot*sizeof(row));
 				if(rows!=nullptr){
 					rows_init(text_sz);
-
-					textfile=argv[1];
-
+					textfile=argfile;
 					text_init_e=text_init_b+text_sz+1;
 				}
 				else ok=0;
@@ -2539,14 +2588,29 @@ static void action(int argc,char**argv,W
 		}
 	}
 	if(ok!=0){
-		color();
-		WINDOW*pw=position_init();
-		if(pw!=nullptr){
-			keypad(w1,true);
-			noecho();
-			nonl();//no translation,faster
-			proced(argv[0]);
-			delwin(pw);
+		WINDOW*w1=initscr();
+
+		//if set 1press_and_4,5 will disable right press (for copy menu) anyway
+		//on android longpress to select and copy is a gesture and is different from mouse events
+		//the only difference with ALL_..EVENTS is that we want to speed up and process all events here (if there is a curses implementation like that)
+		//this was default for android, but nowadays on desktop is not a default
+		//stored_mouse_mask=mousemask(ALL_MOUSE_EVENTS,nullptr);//for error, export TERM=vt100
+		if(prefs_file[0]!='\0')getprefs();
+
+		use_default_colors();//assume_default_colors(-1,-1);//it's ok without this for color pair 0 (when attrset(0))
+		if(w1!=nullptr){
+			raw();//stty,cooked; characters typed are immediately passed through to the user program. interrupt, quit, suspend, and flow control characters are all passed through uninterpreted, instead of generating a signal
+			color();
+			WINDOW*pw=position_init();
+			if(pw!=nullptr){
+				keypad(w1,true);//this here and not at start: Normalize... and other text will not be after clearscreen
+				noecho();
+				nonl();//no translation,faster
+				proced(cutbuf_file,w1);
+				delwin(pw);
+			}
+			endwin();
+			//if(text_file!=nullptr)puts(text_file);
 		}
 	}
 	if(text_init_b!=nullptr){
@@ -2558,6 +2622,16 @@ static void action(int argc,char**argv,W
 		free(text_init_b);
 	}
 	if(editingfile!=nullptr)unlink(editingfile);//this can be before and after text_init_b
+	if(argfile!=nullptr)free(argfile);
+}
+static void action(int argc,char**argv){
+	char cutbuf_file[max_path_0];
+	cutbuf_file[0]='\0';
+	if(help_cutbuffile_preffile(argv[0],cutbuf_file)/*true*/){//this is here, is convenient for remove_config
+		action_go(argc,argv,cutbuf_file);
+		free(helptext);
+		if(cutbuf!=nullptr)free(cutbuf);//this is init at getfilebuf or if not there at writemembuf
+	}
 }
 int main(int argc,char**argv){
 	#ifdef ARM7L
@@ -2568,21 +2642,9 @@ int main(int argc,char**argv){
 	sigaction(SIGSEGV, &signalhandlerDescriptor, nullptr);
 	//baz(argc);
 	#endif
+
 	if(argc>3){puts("Too many arguments.");return EXIT_FAILURE;}
-	WINDOW*w1=initscr();
 
-	//if set 1press_and_4,5 will disable right press (for copy menu) anyway
-	//on android longpress to select and copy is a gesture and is different from mouse events
-	//the only difference with ALL_..EVENTS is that we want to speed up and process all events here (if there is a curses implementation like that)
-	//this was default for android, but nowadays on desktop is not a default
-	//stored_mouse_mask=mousemask(ALL_MOUSE_EVENTS,nullptr);//for error, export TERM=vt100
-
-	use_default_colors();//assume_default_colors(-1,-1);//it's ok without this for color pair 0 (when attrset(0))
-	if(w1!=nullptr){
-		raw();//stty,cooked;relevant for getchar at me
-		action(argc,argv,w1);
-		endwin();
-		//if(text_file!=nullptr)puts(text_file);
-	}
+	action(argc,argv);
 	return EXIT_SUCCESS;
 }
