Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 actionswf (1-74) bionic; urgency=medium
 .
   * fix square_bracket_start
Author: bc <bc@bc-desktop>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2024-04-26

--- actionswf-1.orig/Makefile
+++ actionswf-1/Makefile
@@ -2,10 +2,10 @@ TOPTARGETS := all install clean distclea
 
 #ifndef test
 
-ifeq ($(shell dpkg-architecture -qDEB_HOST_ARCH), amd64)
-conv_64=0
-else
+ifeq ($(shell dpkg-architecture -qDEB_HOST_ARCH), i386)
 conv_64=1
+else
+conv_64=0
 endif
 
 SUBDIRS := src example
@@ -15,4 +15,7 @@ $(SUBDIRS):
 	$(MAKE) -C $@ conv_64=${conv_64} $(MAKECMDGOALS)
 .PHONY: $(TOPTARGETS) $(SUBDIRS)
 
+test:
+	cd tests && /bin/bash conv_64=${conv_64} ./as && /bin/bash ./c 1 && echo tests ok
+
 .NOTPARALLEL:
--- actionswf-1.orig/dev/import.h
+++ actionswf-1/dev/import.h
@@ -1,4 +1,5 @@
 
+include "../include/debug.h"
 
 #swf
 
@@ -69,4 +70,4 @@ importX "actionf_sprite" actionf_sprite
 
 importx "erbool_get" erbool_get
 importx "erbool_reset" erbool_reset
-importx "freereset" freereset
\ No newline at end of file
+importx "freereset" freereset
--- actionswf-1.orig/example/Makefile
+++ actionswf-1/example/Makefile
@@ -57,7 +57,7 @@ link:
 		elif [ -z "${ldprefer}" ]; then \
 			$(CC) ${linkerflags} ${name}.o -o ${name} -L../src -l:${libname}; \
 		else \
-                  $(LD) ${linkerflags} --dynamic-linker=/lib64/ld-linux-x86-64.so.2 ${name}.o -entry main -o ${name} -lc -L../src -l:${libname}; \
+			$(LD) ${linkerflags} --dynamic-linker=/lib64/ld-linux-x86-64.so.2 ${name}.o -entry main -o ${name} ${L} -lc -L../src -l:${libname}; \
 		fi \
 	else \
 		if [ "${conv_64}" = "1" ]; then \
@@ -73,7 +73,7 @@ exe:
 	if [ "${platform}" = "lin" ]; then \
 		LD_LIBRARY_PATH=../src ${launcher} ./${name} =; \
 	fi
-#\? is 0x3f, inside -0x30, 0 is 0x30, \; to 0xb, = is 0xd
+#\? is 0x3f log,alt,titles,x , inside -0x30, 0 is 0x30, \; to 0xb log,alt,x , = is 0xd log,titles,x
 
 %: %.oc
 	${OCOMP} $< ${OFLAGS} ${OFLAGSEXTRA}
--- actionswf-1.orig/example/m64d
+++ actionswf-1/example/m64d
@@ -1,2 +1,2 @@
 
-./make64 linkerflags= $@
+make linkerflags= OFLAGSEXTRA+="nul_res_pref 1" $@
--- actionswf-1.orig/example/make64
+++ /dev/null
@@ -1,2 +0,0 @@
-
-make conv_64=0 $@
--- actionswf-1.orig/example/mrd
+++ actionswf-1/example/mrd
@@ -1,6 +1,7 @@
 
-launcher="qq" LD_LIBRARY_PATH=/home/bc/before LD=/home/bc/before/x86_64-linux-gnu-ld.bfd OFLAGSEXTRA+=" inplace_reloc 0" ./m64d ldprefer=1
+launcher="qq" LD_LIBRARY_PATH=/home/bc/before LD=/home/bc/before/x86_64-linux-gnu-ld.bfd L=-L/home/bc/before/lib OFLAGSEXTRA+=" inplace_reloc 0" ./m64d ldprefer=1
 
 ##!/bin/bash
 #LD_LIBRARY_PATH+=:/home/bc/before/lib
-#qemu-amd64 /home/bc/before/lib/ld-linux-x86-64.so.2 "$@"
+#LD_LIBRARY_PATH=${LD_LIBRARY_PATH} qemu-amd64 /home/bc/before/lib/ld-linux-x86-64.so.2 "$@"
+##here again in case is not global
--- actionswf-1.orig/include/action.h
+++ actionswf-1/include/action.h
@@ -1,4 +1,28 @@
 
+const no_pointer=0  #NULL
+
+const function_action=0xf3033030
+const call_action_left=0xf1011010
+const ActionDefineLocal=0x3C
+const ActionSetMember=0x4F
+const math_end=0xffFFffFF
+
+const block_end=0xfbBBbbBB
+
+const args_end=0xfeEEeeEE
+
+#M structure
+const square_bracket_start=0xf5055050
+const member_end=0xff0FF0f0
+
+#RG structure
+    const ap_double=6
+    const ap_Integer=7
+const ActionGetVariable=0x1C
+const ActionGetMember=0x4E
+
+
+
 const ActionEndFlag=0
 const ActionNextFrame=0x04
 const ActionPreviousFrame=0x05
@@ -13,7 +37,6 @@ const ActionOr=0x11
 const ActionNot=0x12
 const ActionPop=0x17
 const ActionToInteger=0x18
-const ActionGetVariable=0x1C
 const ActionSetVariable=0x1D
 const ActionTrace=0x26
 const ActionRandomNumber=0x30
@@ -21,7 +44,6 @@ const ActionCharToAscii=0x32
 const ActionAsciiToChar=0x33
 const ActionDelete=0x3A
 const ActionDelete2=0x3B
-const ActionDefineLocal=0x3C
 const ActionCallFunction=0x3D
 const ActionReturn=0x3E
 const ActionModulo=0x3F
@@ -33,8 +55,6 @@ const ActionAdd2=0x47
 const ActionLess2=0x48
 const ActionEquals2=0x49
 const ActionPushDuplicate=0x4C
-const ActionGetMember=0x4E
-const ActionSetMember=0x4F
 const ActionIncrement=0x50
 const ActionDecrement=0x51
 const ActionCallMethod=0x52
@@ -54,8 +74,6 @@ const ActionPush=0x96
     const ap_Undefined=3
     const ap_RegisterNumber=4
     const ap_Boolean=5
-    const ap_double=6
-    const ap_Integer=7
     const ap_Constant8=8
     const ap_Constant16=9
 const ActionJump=0x99
@@ -63,11 +81,8 @@ const ActionDefineFunction=0x9B
 const ActionIf=0x9D
 #const ActionGotoFrame2=0x9F
 
-const call_action_left=0xf1011010
 const call_action_right=0xf2022020
-const function_action=0xf3033030
 const new_action=0xf4044040
-const square_bracket_start=0xf5055050
 const mixt_equal=0xf6066060
 const compare_action=0xf7077070
 const parenthesis_start=0xf8088080
@@ -82,21 +97,13 @@ const ifElse_start=0xfe0EE0e0
 
 const brace_blocks_function=0x7fFFffFF
 
-const to_flags=24
-const consecutive_flag=0x80<<to_flags
-const else_flag=0x40<<to_flags
+const consecutive_flag=0x80<<24
+const else_flag=0x40<<24
 #const all_flags=consecutive_flag|else_flag
 const normal_marker=0x01010202
 const if_marker=0x03030404
 const while_marker=0x05050606
 const function_marker=0x07070808
 
-const block_end=0xfbBBbbBB
 const block_else_end=0xfcCCccCC
 const whileblock_end=0xfdDDddDD
-const args_end=0xfeEEeeEE
-const math_end=0xffFFffFF
-
-#
-
-const get_member=0
--- /dev/null
+++ actionswf-1/include/debug.h
@@ -0,0 +1,6 @@
+
+const debug_none=0
+const debug_log=0x1
+const debug_alt=0x2
+const debug_titles=0x4
+const debug_x=0x8
--- actionswf-1.orig/include/prog.h
+++ actionswf-1/include/prog.h
@@ -5,7 +5,6 @@ const TRUE=1
 const FALSE=0
 
 const NULL=0
-const no_pointer=NULL
 
 #const MAX_PATH=260
 
@@ -74,6 +73,8 @@ const DefineFont2=48
 const ExportAssets=56
 
 include "action.h"
+const get_member=0
+const get_member_pointer=:
 
 const ButtonStateUp=1
 const ButtonStateOver=2*ButtonStateUp
@@ -98,6 +99,7 @@ const FontFlagsHasLayout=0x80
 #const FontFlagsBold=1
 
 include "lin.h" "win.h"
+include "debug.h"
 
 Const _O_RDONLY=0;Const _O_WRONLY=0x0001;Const _O_TRUNC=0x0200
 Const _open_read=_O_RDONLY|flag_O_BINARY
@@ -109,12 +111,6 @@ const fprintf_min=2  #file,format plus .
 const from_show=0
 const from_done=1
 
-const debug_none=0
-#const debug_log=0x1
-const debug_alt=0x2
-const debug_titles=0x4
-const debug_x=0x8
-
 const max_structures=999
 const ids_str_len=3 #"999"
 
@@ -122,3 +118,7 @@ const action_code_values_unit=DWORD
 
 const recordheader_long_mark=0x3f
 const recordheader_upperbits=recordheader_long_mark+1
+
+const action_debug_free=0
+const action_debug_get=1
+const action_debug_get_mem=2
--- /dev/null
+++ actionswf-1/mrd
@@ -0,0 +1,3 @@
+
+LD_LIBRARY_PATH=/home/bc/before LD=/home/bc/before/x86_64-linux-gnu-ld.bfd L=-L/home/bc/before/lib \
+	make launcher="qq" OFLAGSEXTRA+=" inplace_reloc 0 function_name 1 nul_res_pref 1" ldprefer=1 linkerflags=
--- actionswf-1.orig/readme.txt
+++ actionswf-1/readme.txt
@@ -4,7 +4,7 @@ The program is a set of objects made wit
 A swf with actionscript example is in the example folder for static o language.
 The include/actionswf.h is for c/c++ language. dev/import.h are the imports for o language.
 The files swf.es and action.es has the main functions that can be used; functions from tool.es can be used in rare situations.
-When using a debug flag at swf_new_ex, action,action_sprite,swf_sprite_done calls are logged. The syntax is as follow:
+When using the debug_log flag at swf_new_ex, action,action_sprite,swf_sprite_done calls are logged. The syntax is as follow:
 
 SpriteId
 TextLinesNumber
--- actionswf-1.orig/src/Makefile
+++ actionswf-1/src/Makefile
@@ -85,7 +85,7 @@ ${libname}: ${name}
 
 else
 #same problems like ocompiler and arm #ATLDCOM = $(CC) ${linkerflags} ${eobs} -shared -e DllMain -o ${name} -lc -L. -l:${exte} -Wl,--exclude-libs ${exte}
-ATLDCOM = $(LD) ${linkerflags} --dynamic-linker=/lib64/ld-linux-x86-64.so.2 ${eobs} -shared -e DllMain -o ${name} -lc -L. -l:${exte} --exclude-libs ${exte}
+ATLDCOM = $(LD) ${linkerflags} --dynamic-linker=/lib64/ld-linux-x86-64.so.2 ${eobs} -shared -e DllMain -o ${name} ${L} -lc -L. -l:${exte} --exclude-libs ${exte}
 ifeq (${nobits_virtual},1)
 ${libname}: ${name}
 	cp ${name} ${libname}
--- actionswf-1.orig/src/actioncode.oc
+++ actionswf-1/src/actioncode.oc
@@ -6,7 +6,7 @@ include "../include/prog.h"
 importx "strcmp" strcmp
 importx "strlen" strlen
 
-const totalvalues=65535
+const totalvalues=0xffFF
 function action_code_values_container()
     value setofvalues=NULL
     return #setofvalues
@@ -147,7 +147,14 @@ function action_code_write_builtin_names
 	return (NULL)
 endfunction
 
-
+function action_code_get_pointer(sv p_codepointer)
+	sv p;set p p_codepointer#
+	sd a;set a p#
+	import "debug_x_pointer" debug_x_pointer
+	call debug_x_pointer(a,p)
+	incst p_codepointer#  #to pass the pointer   #get_member_pointer
+	return a
+end
 
 aftercallimport ebool
 
@@ -162,10 +169,10 @@ function action_code_values_init()
     setcall m# memalloc((totalvalues*action_code_values_unit))
 endfunction
 function action_code_set(sd value)
-	call action_code_set_ex(value,1)
+	callret action_code_set_ex(value,1)
 endfunction
 function action_code_set_pointer(sd value)
-	call action_code_set_ex(value,(:/DWORD))  #pointers are referencing static ac, not reallocable actionpool
+	callret action_code_set_ex(value,(:/DWORD))  #pointers are referencing static mem, not reallocable actionpool
 endfunction
 function action_code_set_ex(sd value,sd size)
 	sd nr
@@ -198,6 +205,8 @@ function forward_values_expand(sv forwar
     setcall values action_code_get()
     #
     call forward(values,data)
+	import "debug_x_expand" debug_x_expand
+	call debug_x_expand(values)
     #
     set p_currentnr# currentnr
 endfunction
@@ -286,11 +295,11 @@ function action_code_pack(sd codepointer
     endelseif
     #
     if is_member=(TRUE)
-        setcall codepointer action_member_loop(codepointer,:)   #to pass the pointer
+        setcall codepointer action_member_loop(codepointer,(get_member_pointer))   #to pass the pointer
     else
     #definelocal or setvariable or delete2
-        call action_push((ap_Constant8),codepointer#v^,-1)
-        add codepointer :  #to pass the pointer
+	sd name;set name action_code_get_pointer(#codepointer)
+	call action_push((ap_Constant8),name,-1)
     endelse
     if need_right=(TRUE)
         if codepointer#=(ActionIncrement)
@@ -374,7 +383,7 @@ function action_code_write_conditions(sd
             sd attr2;set attr2 codepointer#;add codepointer (DWORD)
             #
             if attr2=(ActionSetMember)
-                setcall codepointer action_member_loop(codepointer,:)  #to pass the pointer
+                setcall codepointer action_member_loop(codepointer,(get_member_pointer))  #to pass the pointer
             else
                 #var or set variable
                 call action_push((ap_Constant8),codepointer#v^,-1)
@@ -668,15 +677,11 @@ endfunction
 #codepointer
 function action_code_new_or_call(sv codepointer)
     sd member
-    set member codepointer#
-    #
-    add codepointer :  #to pass the pointer
-    sd fname
-    set fname codepointer#
-    #
+	import "debug_x_preexpand" debug_x_preexpand
+	set member debug_x_preexpand(#codepointer)
+	sd fname; set fname action_code_get_pointer(#codepointer)
     import "action_caller" action_caller
-    add codepointer :  #to pass the pointer
-    setcall codepointer action_caller(fname,member,codepointer)
+    setcall codepointer action_caller(member,fname,codepointer)
     return codepointer
 endfunction
 #codepointer
@@ -754,19 +759,21 @@ function action_code_right_number(sd cod
         setcall codepointer action_member_loop(codepointer,(get_member))
     else
         if attrib=(ActionGetVariable)
-            call action_one_command(codepointer#v^)
-            add codepointer (pointer_rest)
+		sd var;set var action_code_get_pointer(#codepointer)
+            call action_one_command(var)
         elseif attrib=(ap_double)
-            sd low;set low codepointer#;add codepointer (DWORD)
-            call action_push(attrib,low,codepointer#,-1)
+		sd low;set low codepointer#;add codepointer (DWORD)
+		call action_push(attrib,low,codepointer#,-1)
+		add codepointer (DWORD)
         elseif attrib=(ap_Integer)
-            call action_push(attrib,codepointer#,-1)
+		call action_push(attrib,codepointer#,-1)
+		add codepointer (DWORD)
         else
         #ap_Constant8
-            call action_push(attrib,codepointer#v^,-1)
-            add codepointer (pointer_rest)
+		call action_push(attrib,codepointer#v^,-1)
+		add codepointer (pointer_rest)
+		add codepointer (DWORD)
         endelse
-        add codepointer (DWORD)
     endelse
     return codepointer
 endfunction
@@ -839,8 +846,8 @@ endfunction
 #codepointer
 function action_deffunction(sv codepointer,sv debug_related)
     ss fn_name
-    set fn_name codepointer#
-    add codepointer :  #to pass the pointer
+	set fn_name action_code_get_pointer(#codepointer)
+
     sd fn_name_size
     setcall fn_name_size strlen(fn_name)
     inc fn_name_size
@@ -870,9 +877,9 @@ function action_deffunction(sv codepoint
     while args#!=(no_pointer)
         setcall wr_size strlen(args#)
         inc wr_size
-        call swf_actionblock_add(args#,wr_size)
-        add args :  #to pass the pointer
-    endwhile
+	sd arg;set arg action_code_get_pointer(#args)
+        call swf_actionblock_add(arg,wr_size)
+     endwhile
 	#get reg, not depending on brace blocks because } is closed in the loop there, for debug
 	call debug_definefunction(debug_related)
 	#
--- actionswf-1.orig/src/actionparse.oc
+++ actionswf-1/src/actionparse.oc
@@ -835,10 +835,11 @@ function action_code_member(ss ac)
             call action_code_set_pointer(ac)
         endif
         if pointer#=sqbrace_start
-            set pointer# 0
-            inc pointer
-            call action_code_set((square_bracket_start))
-            setcall pointer action_code_row_parse_tool(pointer,sqbrace_end)
+		set pointer# 0
+		inc pointer
+		call action_code_set_pointer((no_pointer)) #to compare square brackets on same field with pointers
+		call action_code_set((square_bracket_start))
+		setcall pointer action_code_row_parse_tool(pointer,sqbrace_end)
         endif
         if pointer#=dot
             set pointer# 0
@@ -847,6 +848,7 @@ function action_code_member(ss ac)
         set ac pointer
     endwhile
     call action_code_set_pointer((no_pointer))
+    call action_code_set((member_end)) #to compare square brackets on same field with pointers
 endfunction
 
 
@@ -1162,7 +1164,7 @@ function action_code_parse_function_dete
     #function mark
     call action_code_set(type)
     set pointer# 0
-    #function name + member
+    #member.function_name
     if last_dot!=0
         set last_dot# 0
         inc last_dot
--- actionswf-1.orig/src/actionutil.oc
+++ actionswf-1/src/actionutil.oc
@@ -3,7 +3,6 @@ Format ElfObj64
 include "../include/prog.h"
 
 #win32 with _
-importx "strlen" strlen
 importx "memcpy" memcpy
 importx "sprintf" sprintf
 
@@ -27,7 +26,7 @@ endfunction
 #error_row
 function escape_action(ss ac,ss pointer,ss stop_pointer)
     sd row=1
-    sd loop1=1
+    #sd loop1=1
     sd error_row=0
     #
     sd comments=0
@@ -35,7 +34,7 @@ function escape_action(ss ac,ss pointer,
     const line_comment=1
     const multiLine_comment=2
     #
-    while loop1=1
+    while 0=0
         sd loop2=1
         setcall ac spaces(ac)
         #
@@ -59,10 +58,12 @@ function escape_action(ss ac,ss pointer,
 		setcall loop2 row_termination(#ac,#row)
 		if loop2=1
 			if ac#=0
-				set loop2 0
-				set loop1 0
+				if stop_pointer!=(NULL)
+					return error_row
+				end
 				set pointer# 0
 				call debug_phase_init(pointer)
+				return pointer
 			else
 				if comments=0
 				    if pointer=stop_pointer
@@ -77,18 +78,17 @@ function escape_action(ss ac,ss pointer,
 				    endif
 				endelseif
 			endelse
-		else
+		elseif stop_pointer=(NULL)
 			call debug_phase_init(pointer)
-		endelse
+		endelseif
             inc ac
         endwhile
 	if error_row!=0
-            set pointer# 0
-            set loop1 0
-        endif
+		set pointer# 0
+		return error_row
+	endif
     endwhile
-    return error_row
-endfunction
+endfunction  #if ret is here is dead
 #nr
 function escape_count(ss string,sd escape)
     sd nr=0
@@ -119,21 +119,21 @@ endfunction
 
 #debug
 
-function action_debug(sd is_on)
-    data action_errors=FALSE
-    vstr *#1
-    vstr m=NULL
-    if is_on=(FALSE)
-        #set there and here, here good at errors and comeback
-        set action_errors (FALSE)
-        import "mem_free" mem_free
-        if m!=(NULL);call mem_free(#m);endif
-    else
-        return #action_errors
-    endelse
+function action_debug(sd type)
+	vstr orig=NULL
+	vstr m=NULL
+	if type=(action_debug_get_mem)
+		return m
+	elseif type=(action_debug_get)
+		return #orig
+	end
+	# action_debug_free
+	set orig (NULL)
+	import "mem_free" mem_free
+	if m!=(NULL);call mem_free(#m);endif
 endfunction
 function action_debug_free()
-    call action_debug((FALSE))
+    call action_debug((action_debug_free))
 endfunction
 
 function debug_code()
@@ -142,15 +142,15 @@ function debug_code()
 endfunction
 
 function action_error()
-    sd p_action_errors
-    setcall p_action_errors action_debug((TRUE))
-    if p_action_errors#=(FALSE)
+    sv p_action_errors
+    setcall p_action_errors action_debug((action_debug_get))
+    if p_action_errors#=(NULL)
         ret
     endif
 
     vstr ac#1
     vstr mem#1
-    add p_action_errors (DWORD);call memcpy(#ac,p_action_errors,(2*:))
+    call memcpy(#ac,p_action_errors,(2*:))
 
     import "printEr" printEr
     call printEr("Row: ")
@@ -202,6 +202,7 @@ endfunction
 import "swf_actionblock" swf_actionblock
 import "file_get_content__resources_free" file_get_content__resources_free
 
+import "action_code_get_pointer" action_code_get_pointer
 
 
 aftercallimport ebool
@@ -306,7 +307,7 @@ endfunction
 
 import "action_code_right_util" action_code_right_util
 #codepointer
-function action_caller(ss name,ss member,sd args_pointer)
+function action_caller(ss member,ss name,sd args_pointer)
     sd nrargs=0
     while args_pointer#!=(args_end)
         setcall args_pointer action_code_right_util(args_pointer)
@@ -316,7 +317,9 @@ function action_caller(ss name,ss member
     call action_push((ap_Integer),nrargs,-1)
     #
     if member!=0
-        call action_member_write(member)
+	#call action_member_write(member)
+	import "forward_values_expand" forward_values_expand
+	call forward_values_expand(action_member_write_tool,member)
     endif
     call action_push((ap_Constant8),name,-1)
     return args_pointer
@@ -326,22 +329,28 @@ endfunction
 
 import "action_get_one" action_get_one
 #the position where the mathpointer reachs
-function action_member_loop(sd mathpointer,sd endoffset)
-    call action_get_one(mathpointer#v^)
+function action_member_loop(sv mathpointer,sd endoffset)
+	sd name
+	set name action_code_get_pointer(#mathpointer)
+    call action_get_one(name)
     while 1=1
-        add mathpointer :  #to pass the pointer
-        #
-        while mathpointer#=(square_bracket_start)
-        #multi-dim arrays
+	while mathpointer#=(no_pointer)
+	#multi-dim arrays
+		add mathpointer :  #to pass the pointer
+		if mathpointer#d=(member_end)
+			sub mathpointer :  #to pass the pointer
+			break
+		end
+		#else is square_bracket_start , a complication to not recognize square brackets on pointers
             add mathpointer (DWORD)
             setcall mathpointer action_code_right_util(mathpointer)
             if endoffset=(get_member)
                 call action_one((ActionGetMember))
             else
-                if mathpointer#v^!=(no_pointer)
+                if mathpointer#!=(no_pointer)
                     call action_one((ActionGetMember))
                 else
-                    add mathpointer :  #to pass the pointer
+                    add mathpointer :+DWORD  #to pass the pointer # member_end
                     return mathpointer
                 endelse
             endelse
@@ -351,34 +360,34 @@ function action_member_loop(sd mathpoint
         add endtest endoffset
         #
         if endtest#=(no_pointer)
-            if endoffset!=(no_pointer)
+		if endoffset=(get_member_pointer)
                 #push to set later
-                call action_push((ap_Constant8),mathpointer#v^,-1)
-                add mathpointer :  #to pass the pointer
-            endif
-            add mathpointer :  #to pass the pointer
-            return mathpointer
+			set name action_code_get_pointer(#mathpointer)
+                call action_push((ap_Constant8),name,-1)
+		endif
+		add mathpointer :+DWORD  #to pass the pointer # member_end
+		return mathpointer
         endif
-        call action_push((ap_Constant8),mathpointer#v^,-1)
+	set name action_code_get_pointer(#mathpointer)
+        call action_push((ap_Constant8),name,-1)
         call action_one((ActionGetMember))
     endwhile
 endfunction
 import "action_code_member" action_code_member
-import "error" error
-import "forward_values_expand" forward_values_expand
-function action_member_write(ss member)
-    const dup_member=256
-    charx dup_data#dup_member
-    vstr code^dup_data
-    sd len
-    setcall len strlen(member)
-    inc len
-    if len>(dup_member)
-        call error("actionscript code limit exceeded")
-    endif
-    call memcpy(code,member,len)
-    call forward_values_expand(action_member_write_tool,code)
-endfunction
+#import "error" error
+#function action_member_write(ss member)
+#   const dup_member=256
+#    charx dup_data#dup_member  #was dup, escape, parse on values append, code. maybe the expression string to be passed as is, but is not necessary now
+#    vstr code^dup_data
+#    sd len
+#    setcall len strlen(member)
+#    inc len
+#    if len>(dup_member)
+#        call error("actionscript code limit exceeded")
+#    endif
+#    call memcpy(code,member,len)
+#    call forward_values_expand(action_member_write_tool,code)
+#endfunction
 function action_member_write_tool(sd values,ss names)
     call action_code_member(names)
     call action_member_loop(values,(get_member))
--- actionswf-1.orig/src/alt.oc
+++ actionswf-1/src/alt.oc
@@ -33,13 +33,20 @@ function alt_free()
 	end
 end
 
+importx "strlen" strlen
+
 aftercallimport ebool
 
 import "memalloc" memalloc
+import "error" error
 
-function alt_init(sd flags,sd path,sd size)
+function alt_init(sd flags,sd path)
+	if alt_join.folder!=(NULL)
+		call error("swf started, alt not closed")
+	end
 	and flags (debug_alt)
 	if flags=(debug_alt)
+		sd size;setcall size strlen(path)
 		sd r;set r strrchr(path,(Period))
 		if r!=(NULL)
 			sub r path
@@ -53,7 +60,6 @@ function alt_init(sd flags,sd path,sd si
 		call alt_join(size)
 		ret
 	end
-	set alt_join.folder (NULL)
 end
 
 import "file_get_content" file_get_content
--- actionswf-1.orig/src/debug.oc
+++ actionswf-1/src/debug.oc
@@ -55,16 +55,22 @@ function debug_data()
 		const p_debug_file^file
 		if file!=(NULL)
 			call f_close(#file)
-			value x=NULL
-			if x!=(NULL)
-				call f_close(#x)
-				if debug_actions.mem!=(NULL)
-					call mem_free(#debug_actions.mem)
-				end
+			if debug_actions.mem!=(NULL)
+				call mem_free(#debug_actions.mem)
 			end
 		end
 	endif
+	import "alt_free" alt_free
+	call alt_free()
+	call x_data()
 endfunction
+function x_data()
+	value f=NULL
+	datax size#1
+	if f!=(NULL)
+		call f_close(#f)
+	end
+end
 
 function debug_phase_init(ss pointer)
 	sv of%p_offsets
@@ -124,18 +130,27 @@ function md_printf(sd c,sd format,sd val
 	return n
 end
 
+function debug_x_pointer(sd value,sv pointer)
+	if x_data.f!=(NULL)
+		import "action_debug" action_debug
+		sub value action_debug((action_debug_get_mem))
+		inc value  ##only to not be comparable with (no_pointer)
+		set pointer# value
+	end
+end
+
 import "row_termination" row_termination
 import "brace_blocks_get_memblock" brace_blocks_get_memblock
 import "block_get_size" block_get_size
 import "block_get_mem" block_get_mem
 import "word_arg_to_stack" word_arg_to_stack
+import "action_code_values" action_code_values
 
-importx "fopen" fopen
-importx "free" free
 importx "strlen" strlen
 importx "fseek" fseek
 importx "fread" fread
 importx "fprintf" fprintf
+importx "fwrite" fwrite
 
 
 
@@ -144,47 +159,37 @@ aftercallimport ebool
 import "memalloc" memalloc
 import "alt_init" alt_init
 import "dtitles_init" dtitles_init
+import "f_open_mem" f_open_mem
 
 function debug_init(sd flags,sd path)
+	call log_init(flags,path)
+	call alt_init(flags,path)
+	call dtitles_init(flags)
+	call x_init(flags,path)
+endfunction
+
+function log_init(sd flags,sd path)
 	sv of%p_offsets
-	if flags!=(debug_none)  #then at alt also log (used at debugger), same for titles
+	if of#!=(NULL)
+		call error("swf started, log not closed")
+	end
+	and flags (debug_log)
+	if flags=(debug_log)
 		setcall of# memalloc(1)  #0 on some systems can be NULL return
 
 		sd s;setcall s strlen(path)
-		sd a=4+1   # .x is 2 plus 1
+		sd a=4+1
 		add a s
 		sd b;setcall b memalloc(a)
 		call sprintf(b,"%s.log",path)
-		vstr ferr="fopen error"
-
 		sv file%p_debug_file
-		setcall file# fopen(b,"w+b")  #+ is because at definefunction it is reading back for comma character
-		if file#=(NULL)
-			call free(b)
-			call error(ferr)
-		end
-
-		sd x=debug_x
-		and x flags
-		if x!=0
-			call sprintf(b,"%s.x",path)
-			set debug_data.x fopen(b,"wb") #'b' on windows is not 't' that can change line ends and is working more there
-			call free(b)
-			if debug_data.x=(NULL)
-				call error(ferr)
-			end
-		else
-			call free(b)
-		end
+		setcall file# f_open_mem(b,"w+b")  #+ is because at definefunction it is reading back for comma character
 
 		setcall debug_actions.mem memalloc(1)
 		#this is later #set debug_actions.size 0
 		set debug_actions.all_size 1
-	endif
-
-	call alt_init(flags,path,s) #is here because need to set a default value inside
-	call dtitles_init(flags)    #same
-endfunction
+	end
+end
 
 import "f_printf" f_printf
 import "f_write" f_write
@@ -382,9 +387,72 @@ function debug_concludefunction(sv point
 	endif
 end
 
-function debug_x(sd mem,sd size)
-	if debug_data.x!=(NULL)
-		mult size (action_code_values_unit)
-		call f_write(debug_data.x,mem,size)
+function x_init(sd flags,sd path)
+	if x_data.f!=(NULL)
+		call error("swf started, x not closed")
+	end
+	and flags (debug_x)
+	if flags=(debug_x)
+		sd s;setcall s strlen(path)
+		sd a=2+1
+		add a s
+		sd b;setcall b memalloc(a)
+		call sprintf(b,"%s.x",path)
+
+		set x_data.f f_open_mem(b,"wb") #'b' on windows is not 't' that can change line ends and is working more there
+	end
+end
+
+function debug_x_pointers(valuex start,valuex size)
+	valuex mark#1
+	if x_data.f!=(NULL)
+		set x_data.size 0
+
+		inc size  ##is on last \0
+		sub size start
+		call f_write(x_data.f,#size,:)
+		set mark f_tell(x_data.f)
+		call f_write(x_data.f,start,size)  #write now? is not ready ..str\0.. . the system will write something anyway and if error is good for visual debug, and fseek needs an extra check with this size that can have 0x10000 one string * multiple pointers
+	end
+end
+
+function debug_x_base(sd mem,sd size)
+	#already wrote
+	sub size x_data.size
+	add mem x_data.size
+
+	call f_write(x_data.f,mem,size)
+	add x_data.size size
+end
+function debug_x(sd mem,sd nr)
+	if x_data.f!=(NULL)
+		mult nr (action_code_values_unit)
+		call debug_x_base(mem,nr)
+
+		call fseek(x_data.f,debug_x_pointers.mark,(SEEK_SET))
+		call fwrite(debug_x_pointers.start,debug_x_pointers.size,1,x_data.f)
+		call fseek(x_data.f,0,(SEEK_END))
+	end
+end
+
+function debug_x_preexpand(sv p_codepointer)
+	sv codepointer;set codepointer p_codepointer#
+	sd value;set value codepointer#
+	if x_data.f!=(NULL)
+		if value!=(no_pointer)
+			sd values;set values action_code_values()
+			sub codepointer values
+			call debug_x_base(values,codepointer)
+			incst x_data.size  ##the string will be expanded and written
+		end
+	end
+	incst p_codepointer#
+	return value
+end
+function debug_x_expand(sd values)
+	if x_data.f!=(NULL)
+		sd size;set size action_code_get()
+		sub size values
+		call f_write(x_data.f,values,size)
 	end
 end
--- actionswf-1.orig/src/faction.oc
+++ actionswf-1/src/faction.oc
@@ -38,21 +38,23 @@ function action_base(ss ac)
 	import "debug_action_init" debug_action_init
 	call debug_action_init(ac)
 
-    call escape_action(ac,mem,0)
+	sd last;set last escape_action(ac,mem,0)
+	import "debug_x_pointers" debug_x_pointers
+	call debug_x_pointers(mem,last)
 
 	import "debug_action_phase" debug_action_phase
 	call debug_action_phase()
 
-	sd p_action_errors
-	setcall p_action_errors action_debug((TRUE))
-	set p_action_errors# (TRUE)  #this also requires debug_code to be set, and is set at first action_code_row_ex, that is from here without any aftercall
-	sv cursor;set cursor p_action_errors;add cursor (DWORD);set cursor# ac;add cursor :;set cursor# mem
+	sv p_action_errors
+	setcall p_action_errors action_debug((action_debug_get))
+	set p_action_errors# ac  ##this also requires debug_code to be set, and is set at first action_code_row_ex / at every row, that is from here without any aftercall
+	sv cursor;set cursor p_action_errors;incst cursor;set cursor# mem
     while mem#!=0
         setcall mem action_code_row(mem,(FALSE))
     endwhile
     call action_code_set((math_end))
-    #set false to stop adding row nr at errors
-    set p_action_errors# (FALSE)
+	#reset to stop adding row nr at errors
+	set p_action_errors# (NULL)
 
     call brace_blocks_end()
 
--- actionswf-1.orig/src/file.oc
+++ actionswf-1/src/file.oc
@@ -53,12 +53,25 @@ end
 importx "fwrite" fwrite
 importx "ftell" ftell
 
+importx "fopen" fopen
+importx "free" free
 
 aftercallimport ebool
 
 import "error" error
 
 #file
+function f_open_mem(sd path,sd format)
+	sd f;setcall f fopen(path,format)
+	if f=(NULL)
+		call free(path)
+		call error("fopen error")
+	endif
+	call free(path)
+	return f
+endfunction
+
+#file
 function file_open(ss filepath,sd flags)
     sd file
     sd permission
--- actionswf-1.orig/src/mrd
+++ actionswf-1/src/mrd
@@ -1,2 +1,2 @@
 
-LD_LIBRARY_PATH=/home/bc/before LD=/home/bc/before/x86_64-linux-gnu-ld.bfd OFLAGSEXTRA+=" inplace_reloc 0" ./m64d
+LD_LIBRARY_PATH=/home/bc/before LD=/home/bc/before/x86_64-linux-gnu-ld.bfd L=-L/home/bc/before/lib OFLAGSEXTRA+=" inplace_reloc 0" ./m64d
--- actionswf-1.orig/src/tool.e.oc
+++ actionswf-1/src/tool.e.oc
@@ -18,8 +18,6 @@ functionx freereset()
 #               and at some frees
 	import "debug_data" debug_data
 	call debug_data()
-	import "alt_free" alt_free
-	call alt_free()
 	#free and set initial null/-1.....
 	import "swf_mem" swf_mem
 	call swf_mem((mem_exp_free))
--- /dev/null
+++ actionswf-1/tests/.expected/a.swf.log
@@ -0,0 +1,17 @@
+0
+14
+
+/*
+debug_x
+*/
+function a(b){
+}
+this.this.getVersion();
+
+this.this.this=this;
+//this.this... as a whole
+
+//note that ap_Constant8/16,null,undefined,true/false is not a step here (pointers are here), also special is ap_RegisterNumber
+var b=1;var c=1.2;var d=b[0];
+
+5,8,0000
--- /dev/null
+++ actionswf-1/tests/.expected/a.swf.txt
@@ -0,0 +1,4 @@
+RldTCLAAAABoABQAAAUAAAACAQBDAgARAD8DjwAAAIgYAAUAdGhpcwBnZXRWZXJzaW9uAGIAYwBk
+AJsIAGEAAQBiAAAAlgUABwAAAACWAgAIAByWAgAIAE6WAgAIAVIXlgIACAAclgIACABOlgIACACW
+AgAIABxPlgIACAKWBQAHAQAAADyWAgAIA5YJAAYzM/M/MzMzMzyWAgAIBJYCAAgCHJYFAAcAAAAA
+TjwAAAA=
--- /dev/null
+++ actionswf-1/tests/.expected/a.swf.x.txt
@@ -0,0 +1,7 @@
+WAAAAAAAAABmdW5jdGlvbiBhAGIAe310aGlzAHRoaXMAZ2V0VmVyc2lvbgApO3RoaXMAdGhpcwB0
+aGlzAHRoaXMAdmFyIGIAMQB2YXIgYwAxLjIAdmFyIGQAYgAwAAAAMDAD8woAAAAAAAAADAAAAAAA
+AAAAAAAAAAAAALu7u/sQEAHxEAAAAAAAAAAVAAAAAAAAAAAAAAAAAAAA8PAP/xoAAAAAAAAA7u7u
+/k8AAAAnAAAAAAAAACwAAAAAAAAAMQAAAAAAAAAAAAAAAAAAAPDwD/8cAAAANgAAAAAAAAD/////
+PAAAAD8AAAAAAAAABwAAAAEAAAD/////PAAAAEcAAAAAAAAABgAAADMz8z8zMzMz/////zwAAABR
+AAAAAAAAAE4AAABTAAAAAAAAAAAAAAAAAAAAUFAF9QcAAAAAAAAA/////wAAAAAAAAAA8PAP////
+////////
--- /dev/null
+++ actionswf-1/tests/a
@@ -0,0 +1,8 @@
+
+if [ -z "${LD_LIBRARY_PATH}" ]; then LD_LIBRARY_PATH=../src; fi
+
+o a.oc inplace_reloc 0 logfile 0 && \
+LD_LIBRARY_PATH=/home/bc/before/lib /home/bc/before/x86_64-linux-gnu-ld.bfd --dynamic-linker=/lib64/ld-linux-x86-64.so.2 a.o -L/home/bc/before/lib -lc \
+	-L${LD_LIBRARY_PATH} -lactionswf -e main && \
+# attention at launchpad and ldprefer (like in ./example)
+LD_LIBRARY_PATH=${LD_LIBRARY_PATH} qq ./a.out
--- /dev/null
+++ actionswf-1/tests/a.oc
@@ -0,0 +1,29 @@
+
+format elfobj64
+
+importx "_exit" exit
+
+einclude "../dev/import.h"
+
+entryraw main()
+
+call swf_new_ex("a.swf",0x80,0x80,0x001100,2,(debug_log|debug_x))
+
+call action("
+/*
+debug_x
+*/
+function a(b){
+}
+this.this.getVersion();
+
+this.this.this=this;
+//this.this... as a whole
+
+//note that ap_Constant8/16,null,undefined,true/false is not a step here (pointers are here), also special is ap_RegisterNumber
+var b=1;var c=1.2;var d=b[0];
+")
+
+call swf_done()
+
+call exit(0)
--- /dev/null
+++ actionswf-1/tests/ai
@@ -0,0 +1 @@
+LD_LIBRARY_PATH=~/x86_64_lib ./a
--- /dev/null
+++ actionswf-1/tests/as
@@ -0,0 +1,7 @@
+
+if [ -z "${LD_LIBRARY_PATH}" ]; then LD_LIBRARY_PATH=../src; fi
+if [ -z "${conv_64}" ]; then conv_64=0; fi
+
+o a.oc logfile 0 conv_64 ${conv_64} && \
+cc a.o -L../src -lactionswf && \
+LD_LIBRARY_PATH=${LD_LIBRARY_PATH} ./a.out
--- /dev/null
+++ actionswf-1/tests/c
@@ -0,0 +1,32 @@
+
+smart_diff () {
+	diff ${1} ${2}
+	if [ $? = 0 ]; then return 0; fi
+	a=`stat --printf="%s" ${1}`
+	b=`stat --printf="%s" ${2}`
+	base64 ${1}
+	base64 ${2}
+	if [ ${a} = ${b} ]; then
+		echo size equal ${a}
+		xxd ${1} > 1
+		xxd ${2} > 2
+		diff 1 2
+		rm 1 2
+	fi
+	return 1
+}
+if [ -z "${1}" ]; then
+	rm -f a.o a.out a.swf a.swf.log a.swf.x
+	if [ -e .expected/a.swf ]; then rm .expected/a.swf; fi
+	if [ -e .expected/a.swf.x ]; then rm .expected/a.swf.x; fi
+elif [ ${1} = 0 ]; then
+	base64 a.swf > .expected/a.swf.txt && \
+	mv a.swf.log .expected && \
+	base64 a.swf.x > .expected/a.swf.x.txt
+else
+	base64 -d .expected/a.swf.txt > .expected/a.swf && \
+	base64 -d .expected/a.swf.x.txt > .expected/a.swf.x && \
+	smart_diff .expected/a.swf a.swf && \
+	diff .expected/a.swf.log a.swf.log && \
+	smart_diff .expected/a.swf.x a.swf.x
+fi
--- /dev/null
+++ actionswf-1/x.html
@@ -0,0 +1,56 @@
+<!DOCTYPE html>
+
+<style>
+	#selection_table td {
+		border: 1px solid black;
+	}
+	.blue
+	{
+		color:blue;
+	}
+	.green
+	{
+		color:green;
+	}
+</style>
+
+<h3>X Syntax</h3>
+
+<p>Black = 4 bytes. <span class="blue">Pointer = 4/8 bytes.</span> <span class="green">Green = replacement.</span></p>
+
+<table id="selection_table">
+	<tr><td>function_action</td><td class="blue">name</td><td class="blue">{arguments}/null</td><td>block_end</td></tr>
+	<tr><td>call_action_left</td><td><span class="blue">null</span>/<span class="green">M</span></td><td class="blue">function</td><td>args_end</td></tr>
+	<tr><td>ActionDefineLocal</td><td class="blue">name</td><td class="green">R</td></td></tr>
+	<tr><td>ActionSetMember</td><td class="green">M</td><td class="green">R</td></tr>
+	<tr><td>math_end</td></tr>
+</table>
+
+<br>Table M: <!-- action_code_member<>action_member_loop -->
+<table id="selection_table">
+	<tr><td class="blue">owner</td><td class="blue">member</td></tr>
+	<tr>                           <td class="blue">no_pointer</td> <td>square_bracket_start</td><td class="green">RI</td></tr>
+	<tr>                           <td class="blue">no_pointer></td><td>member_end</td></tr>
+</table>
+
+<br>Table R: <!-- action_parse_right<>action_code_right -->
+<table id="selection_table">
+	<tr><td><!-- definefunction --></td></tr>
+	<tr><td class="green">RI</td></tr>
+</table>
+
+<br>Table RI: <!-- action_code_row_parse_tool<>action_code_right_util -->
+<table id="selection_table">
+	<tr><td><!-- new var/memb --></td></tr>
+	<tr><td class="green">RG</td></tr>
+</table>
+
+<br>Table RG: <!-- action_parse_loop<>action_code_right_util[while] -->
+<table id="selection_table">
+	<tr><td>ap_Integer</td><td>number</td></tr>
+	<tr><td>ap_double</td><td>scanf1</td><td>scanf2</td></tr>
+	<tr><td>ActionGetVariable</td><td class="blue">name</td></tr>
+	<tr><td>ActionGetMember</td><td class="green">M</td></tr>
+</table>
+
+<br><div class="green">Members Right RIght RiGht</div>
