Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 edor (1-x47) focal; urgency=medium
 .
   * finds total
Author: bc <bc@bc-Type1ProductConfigId>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2024-02-05

--- edor-1.orig/clean
+++ edor-1/clean
@@ -1,2 +1,2 @@
 
-git clean -xdf -e .pc/ -e debian/patches/
+git clean -xdf -e .pc/ -e debian/patches/ && git diff && echo git diff
--- edor-1.orig/s/bar.c
+++ edor-1/s/bar.c
@@ -67,6 +67,7 @@ static size_t cursorr=0;
 #define get_right getbegx(poswn)-1
 static char inputf[max_path_0];
 static int cursorf=0;
+
 static int number2;//number is also negative
 static int number3;
 static int fprevnumber;
@@ -735,9 +736,10 @@ static bool dos(WINDOW*w,eundo*un,size_t
 	else mod_set_off_wrap();//only if not
 	return true;
 }
-#define maxint_nul 11
+#define maxuint 10
+#define maxuint_nul maxuint+1
 static void undo_show(size_t n){
-	char nr[maxint_nul];
+	char nr[maxuint_nul];
 	int a=sprintf(nr,protocol,n);
 	texter(nr);
 	undo_erase(a);
@@ -854,39 +856,27 @@ static int positiveInt_length(unsigned i
 	while(nr>0){nr/=10;x++;}
 	return x;
 }
-static int finds(bool phase,int number,bool*header_was){
-	if(*header_was==false){
-		if(phase/*true*/){
-			*header_was=true;
-		}
-		return 0;
-	}
-
-	char buf[1+maxint_nul];
-	if(number==0){
-		finds_big_clean();//can be 1
-		return 0;//0, in case was forward, then backward
-	}
+static void finds(bool phase,int number,int number_fix){//,bool*header_was){
+	//if(*header_was==false){if(phase/*true*/){*header_was=true;}return 0;}
 
-	int r=number;
+	char buf[maxuint+1+maxuint_nul];
 	if(number<0){
 		number*=-1;
 	}
 	if(phase/*true*/){
 		number2=sprintf(buf,"/%u",number);
 		mvaddstr(0,getmaxx(stdscr)-number2,buf);
-		r=0;
 	}else{//fprevnumber
 		int dif=positiveInt_length(fprevnumber)-positiveInt_length(number);
 		move(0,number3);
 		while(dif>0){addch(' ');dif--;}
 	}
+	number+=number_fix;
 	int nr=sprintf(buf,"%u",number);
-	fprevnumber=number;//for 10->9, 10/10->1/10, ... , 100/100->1/10, ...
+	fprevnumber=number;//for 10->9, 10/10->1/10, ... , 100/100->1/100, ...
 	number3=getmaxx(stdscr)-number2-nr;
 	mvaddstr(0,number3,buf);
 	wnoutrefresh(stdscr);
-	return r;
 }
 
 static bool delim_touch(size_t y1,size_t x1,size_t c){return ytext==y1&&(xtext==x1||(xtext<x1&&xtext+c>x1));}
@@ -904,6 +894,7 @@ static bool delimiter(size_t y1,size_t x
 }
 
 #define quick_get(z) ((WINDOW**)((void*)z))[1]
+#define find_returner return a==KEY_RESIZE?-2:1;
 
 //1,0cancel,-2resz
 static int find_core(WINDOW*w,size_t cursor,size_t xr,size_t xc,int y,size_t pos,size_t sz){
@@ -914,49 +905,115 @@ static int find_core(WINDOW*w,size_t cur
 	centering(w,&xr,&xc)
 	bool untouched=true;bool delimiter_touched=false;
 	char prev_key=' ';
-	bool is_for_forward=true;//last key only at next/prev/replace
+	//bool is_for_forward=true;//last key only at next/prev/replace
 
-	int number=0;bool header_was=true;int at_number;
+	int number=0;
 	number2=0;
 	number3=getmaxx(stdscr);//in case is required at clean
 
 	for(;;){
 		int a=wgetch(w);
 		if(a==Char_Return){
-			if(is_for_forward)xc+=cursor;//add only when last was simple find
-			else is_for_forward=true;//modify only if was replace
+			if(untouched/*true*/){
+				xc+=cursor;//add only when last was simple find
+				number+=1;
+			}else{
+				if(number<0)number+=1;
+			//	if(forward/*true*/)number+=1;
+				//else if(number==0)finds_big_clean();//header switch
+			}
 			forward=true;
-			at_number=1;
 		}else if(a==prev_key){
-			forward=false;is_for_forward=true;
-			at_number=-1;
+			if(untouched/*true*/)number-=1;
+			else{
+				if(number>0)number-=1;
+			//	if(forward==false)number-=1;
+				//else if(number==0)finds_big_clean();//header switch
+			}
+			forward=false;
+		}else if(a==KEY_RIGHT){
+			if(number2==0){//only when not knowing the total
+				if(delimiter_touched==false){//to omit last replace return if that can happen at this point
+					//set a limit
+					const size_t max=100;
+					//keep markers
+					size_t ystart=ytext;size_t xstart=xtext;size_t xrstart=xr;size_t xcstart=xc;
+					size_t n;
+					//only depending on number not on forward
+					int here_sense;bool here_forward;
+					if(number==0){//on delimiter or after a replace at 1/-1
+						here_sense=1;
+						ytext=y1;xtext=x1;xr=0;xc=cursor;
+						n=1;
+						here_forward=true;
+					}else{
+						ytext+=xr;xr=0;//xtext+=xc;xc=0;
+						if(number>0){
+							here_sense=1;
+							if(untouched/*true*/){
+								xc+=cursor;
+								n=1;
+							}else n=0;
+							here_forward=true;
+						}else{
+							here_sense=-1;
+							if(untouched/*true*/)n=1;
+							else n=0;
+							here_forward=false;
+						}
+					}
+					for(;;){
+						finding(cursor,xr,xc,here_forward);//is true
+						if(ytext==y1&&xtext==x1)break;
+						n++;
+						if(n==max)break;
+						//xr=0;//only first was with offset
+						xc=here_forward?cursor:0;//at backward must stay there
+					}
+					if(n!=max){
+						finds(true,number+(n*here_sense),-n);
+						wmove(w,getcury(w),getcurx(w));//print the result
+					}
+					//restore markers
+					ytext=ystart;xtext=xstart;xr=xrstart;xc=xcstart;
+					continue;
+				}
+			}
+			find_returner
 		}else if(a==KEY_LEFT){
 			size_t iferrory=ytext;size_t iferrorx=xtext;
 			if(untouched/*true*/){
+				ytext+=xr;xtext+=xc;
+				if(replace(cursor)/*true*/){ytext=iferrory;xtext=iferrorx;continue;}
+
 				if(number3!=getmaxx(stdscr)){
 					finds_big_clean();//wnoutrefresh when not on delimiter
-					if(number!=0)header_was=false;//is only at untouched at the moment
 				}
+				if(number!=0){//0 is on delimiter
+					//if(forward/*true*/)number-=1;
+					//else number+=1;
+					//fprevnumber=number;
+
+					//if(delim_touch(y1,x1,cursorr)/*true*/){delimiter_touched=true;}else
+					if(ytext==y1&&xtext<x1)x1-=cursor-cursorr;//this can be on delimiter but is observed outside
+				}else delimiter_touched=true;
 
-				ytext+=xr;xtext+=xc;
-				if(replace(cursor)/*true*/){ytext=iferrory;xtext=iferrorx;continue;}
-				if(delim_touch(y1,x1,cursorr)/*true*/){
-					delimiter_touched=true;
-				}
 				if(forward){xtext+=cursorr;centering2(w,&xr,&xc,true)}
 				else{centering(w,&xr,&xc)}
 				untouched=false;
-				is_for_forward=false;
+				//is_for_forward=false;
 				continue;
 			}
 			if(finding(cursor,xr,xc,forward)/*true*/){
 				if(replace(cursor)/*true*/){ytext=iferrory;xtext=iferrorx;continue;}
+
 				phase=delimiter(y1,x1,y,pos,sz,cursorr,phase);
 				if(phase/*true*/)delimiter_touched=true;
 				else if(ytext==y1&&xtext<x1)x1-=cursor-cursorr;
+
 				if(forward){xtext+=cursorr;centering2(w,&xr,&xc,true)}
 				else{centering(w,&xr,&xc)}
-				is_for_forward=false;
+				//is_for_forward=false;
 				continue;
 			}
 			return 1;
@@ -977,7 +1034,7 @@ static int find_core(WINDOW*w,size_t cur
 		}else if(a=='c'){
 			return 0;
 		}else{
-			return a==KEY_RESIZE?-2:1;
+			find_returner
 		}
 		if(finding(cursor,xr,xc,forward)==false){
 			//was last replace
@@ -988,7 +1045,12 @@ static int find_core(WINDOW*w,size_t cur
 		if(delimiter_touched/*true*/){
 			y1=ytext;x1=xtext;
 			delimiter_touched=false;
-		}else number=finds(phase,number+at_number,&header_was);
+		}else{
+			if(number!=0){
+				finds(phase,number,0);
+				if(phase/*true*/)number=0;
+			}else finds(false,0,0);
+		}
 		untouched=true;
 		centering(w,&xr,&xc)
 	}
@@ -1019,7 +1081,7 @@ static int find(char*z,size_t cursor,siz
 	if(a=='c'){
 		return 0;
 	}
-	return a==KEY_RESIZE?-2:1;
+	find_returner
 }
 static void command_rewrite(int y,int x,int pos,char*input,int cursor,int visib){
 	if(pos!=0)mvaddch(y,com_left-1,'<');
--- edor-1.orig/s/inc/bar/curses.h
+++ edor-1/s/inc/bar/curses.h
@@ -7,14 +7,14 @@ extern "C"{
 
 int addchnstr(const chtype *chstr, int n);
 int addnstr(const char*,int);
-int mvaddstr(int,int,const char*);
+int getbegx(const WINDOW*);
+int getbegy(const WINDOW*);
 int mvaddnstr(int,int,const char*,int);
+int mvaddstr(int,int,const char*);
 int mvwaddstr(WINDOW*,int,int,const char*);
-int wresize(WINDOW*,int,int);
 int mvwin(WINDOW*,int,int);
-int getbegx(const WINDOW*);
-int getbegy(const WINDOW*);
 int wdeleteln(WINDOW*);
+int wresize(WINDOW*,int,int);
 
 #ifdef __cplusplus
 }
--- edor-1.orig/s/main.c
+++ edor-1/s/main.c
@@ -19,11 +19,12 @@
 \nCtrl+g = go to row[,column]; Alt+g = \"current_row,\" is entered\
 \nCtrl+f = find text; Alt+f = refind text; Ctrl+c = word at cursor (alphanumerics and _); Alt+c = word from cursor\
 \n    if found\
-\n      Enter      = next\
-\n      Space      = previous\
-\n      Left Arrow = [(next/prev)&] replace\
-\n      r          = reset replace text\
-\n      R          = modify replace text\
+\n      Enter       = next\
+\n      Space       = previous\
+\n      Right Arrow = total\
+\n      Left Arrow  = [(next/prev)&] replace\
+\n      r           = reset replace text\
+\n      R           = modify replace text\
 \n    c = cancel\
 \n    other key to return\
 \nCtrl+u = undo; Alt+u = undo mode: left=undo,right=redo,other key to return\
@@ -1268,9 +1269,10 @@ static void hardtime_resolve_returner(WI
 	}
 }
 #define one_minute 60
-//#define one_minute 1
+//#define one_minute 3
 static void hardtime_resolve(WINDOW*w){//argument for errors
 	if(hardtime!=0){
+		//if((time((time_t)nullptr)-hardtime)>=one_minute){//= here is easily tested(set to 3, will wait 6 seconds if not and equal
 		if((time((time_t)nullptr)-hardtime)>one_minute){//>1
 			hardtime_resolve_returner(w);
 			easytime();
