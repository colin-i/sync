Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+165) xenial; urgency=medium
 .
   * fixes and size of var for groups and chars
Author: bc <bc@bc-desktop>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2024-04-12

--- ocompiler-1.orig/ReadMe.old.txt
+++ /dev/null
@@ -1,48 +0,0 @@
-O Compiler
-
-
-Files and Folders:
-
-fix\
-
-- fix for symbols folder
-
-src\
-
-- has the source code
-
-changelog.old.html
-
-- has the history of the program before git creation (last bump: 1.3.16, December 07, 2015)
-
-compiler.html
-
-- explains how to use o.exe
-
-o.html
-
-- O Langauage Documentation file
-
-ReadMe.old.txt
-
-- this file
-
-make
-
-- Linux shell file to compile the source for executable; the output file will be in the './build/' folder
-
-make.bat
-
-- Windows bat file to compile the source for executable; the output file will be in the './build/' folder
-
-makewin32
-
-- Linux shell file to compile the source and to link it with mingw-w64-i686 for linux; the output file will be 'ocompiler.zip'
-
-makewin64
-
-- Linux shell file to compile the source and to link it with mingw-w64-x86-64 for linux; the output file will be in the './buildg/' folder
-
-.ocompiler.txt
-
-- the program parse this file to set the preferences
--- /dev/null
+++ ocompiler-1/ReadMe.txt.old
@@ -0,0 +1,48 @@
+O Compiler
+
+
+Files and Folders:
+
+fix\
+
+- fix for symbols folder
+
+src\
+
+- has the source code
+
+changelog.html.old
+
+- has the history of the program before git creation (last bump: 1.3.16, December 07, 2015)
+
+compiler.html.old
+
+- was a short html page about the compiler
+
+o.html
+
+- O Langauage Documentation file
+
+ReadMe.txt.old
+
+- this file
+
+make.old
+
+- Linux shell file to compile the source for executable; the output file will be in the './build/' folder
+
+make.bat.old
+
+- Windows bat file to compile the source for executable; the output file will be in the './build/' folder
+
+makewin32
+
+- Linux shell file to compile the source and to link it with mingw-w64-i686 for linux; the output file will be 'ocompiler.zip'
+
+makewin64.old
+
+- Linux shell file to compile the source and to link it with mingw-w64-x86-64 for linux; the output file will be in the './buildg/' folder
+
+ocompiler.conf
+
+- the program parse this file to set the preferences
--- /dev/null
+++ ocompiler-1/changelog.html.old
@@ -0,0 +1,68 @@
+
+<p>O Compiler 1.3.9: <b>EntryLinux</b> added. Returns <i>exit</i> in the scope at <i>return</i>s.</p>
+
+<p>O Compiler 1.3.8: <b>ImportAfterCall</b> added. Used in objects to import an extern defined AfterCall.</p>
+
+<p>O Compiler 1.3.7: <b>AfterCall</b> added. Set a value to be tested with zero at every call and to return if it is not zero.</p>
+
+<p>O Compiler 1.3.4: <b>FunctionX</b> added. It works with ImportX and to be called from C 64-bit code.</p>
+
+<p>O Compiler 1.3.2: Size of an integer constant sign added: <b>:</b>. Returns 4B on 32-bits, 8B on 64-bits.</p>
+
+<p>O Compiler 1.3.1: <b>IncSt</b> command added. Adds 32/64 bits at the argument, depending on the build format.</p>
+
+<p>O Compiler 1.3: Build objects for 64 bit windows applications. New format: ElfObj64Microsoft. New tags: ImportX, SetX.</p>
+
+<p>O Compiler 1.2.82: Log imported functions preference.</p>
+
+<p>O Compiler 1.2.80: Semicolon added for breaking the lines. Previous sings were new line and carriage return plus new line.</p>
+
+<p>O Compiler 1.2.79: CallEx added for prepared calls.</p>
+
+<p>O Compiler 1.2.75: <b>warning on</b> and <b>warning off</b> language commands. This can be used for example to share files between projects.</p>
+
+<p>O Compiler 1.2.74: strings definitions can have multiple rows startings from this version</p>
+
+<p>O Compiler 1.2.68: Not sign (~) at numbers and constants added. Fix at quotation and comma values parser.</p>
+
+<p>O Compiler 1.2.66: Fix at function in code.</p>
+
+<p>O Compiler 1.2.64: Raw strings(not depending on variables) can be used at the code operations starting with this version.</p>
+
+<p>O Compiler 1.2.62: Added prefix at any variable operation, the current data section cursor with the "!" character, and function name placed in code option for debuggers.</p>
+
+<p>O Compiler 1.2.50: Numbers and constants usage at code operations added: arithmetic, bitwise operations, and the rest.</p>
+
+<p>O Compiler 1.2.41: stack variables are now aligned ascendent (like data).</p>
+
+<p>O Compiler 1.2.35: Stack variables added. These can be used at recursive functions or for volatile variable causes.</p>
+
+<p>O Compiler 1.2.22: Update: A variables that points to a function (imported or created) can be called like a function.</p>
+
+<p>O Compiler 1.2.18: Additional symbol preferences options for warnings and for log file. Used to handle code functions at object format.</p>
+
+<p>O Compiler 1.2.17: Additional <b>include</b> option added: The active folder can now be changed relative to the include command. To achieve that there is the "Include active folder" at the preferences.</p>
+
+<p>O Compiler 1.2.16: Flexibility added: at <b>chars</b> (chars name=value); at <b>str</b> (str name="string").</p>
+
+<p>O Compiler 1.2.10:
+ 	New preference option: <b>log file</b>, used when a log with the working path and all the compiled files results needed.<br>
+	New command: <b>Exit</b>, it will perform a linux sys_exit command, see the laguage documentation for details.</p>
+
+
+<p>O Compiler 1.2.8: Improvement added: arguments at function declaration can now be prefixed with unreference safety sign (*).</p>
+
+<p>O Compiler 1.2.1: Functions at object format can now have pointers: Pointer data declaration method now accepts functions (without constants).</p>
+
+<p>O Compiler 1.2, October 19 2012:
+	New format added: <b>ElfObj</b>. Can be used to create object files that can be united with a linker (e.g: gcc from gnu).
+	<br>
+	New declaration sign added: <b>%</b>. Used at elfobj format, has no effect at executables. Relocations are added automatically, but % sign can be used instead of = sign to add a data relocation, if required.</p>
+
+<p>O Compiler 1.1, October 13 2012:
+	O Compiler can now creates elf files for linux systems. Use the "Format elf" command at the start of the program.
+	<br>
+	All functions can now be called in combinations like AddCall, OrCall, AndCall, etc.</p>
+
+<p>O Compiler 1.0, October 2 2012: Release date.</p>
+
--- ocompiler-1.orig/changelog.old.html
+++ /dev/null
@@ -1,68 +0,0 @@
-
-<p>O Compiler 1.3.9: <b>EntryLinux</b> added. Returns <i>exit</i> in the scope at <i>return</i>s.</p>
-
-<p>O Compiler 1.3.8: <b>ImportAfterCall</b> added. Used in objects to import an extern defined AfterCall.</p>
-
-<p>O Compiler 1.3.7: <b>AfterCall</b> added. Set a value to be tested with zero at every call and to return if it is not zero.</p>
-
-<p>O Compiler 1.3.4: <b>FunctionX</b> added. It works with ImportX and to be called from C 64-bit code.</p>
-
-<p>O Compiler 1.3.2: Size of an integer constant sign added: <b>:</b>. Returns 4B on 32-bits, 8B on 64-bits.</p>
-
-<p>O Compiler 1.3.1: <b>IncSt</b> command added. Adds 32/64 bits at the argument, depending on the build format.</p>
-
-<p>O Compiler 1.3: Build objects for 64 bit windows applications. New format: ElfObj64Microsoft. New tags: ImportX, SetX.</p>
-
-<p>O Compiler 1.2.82: Log imported functions preference.</p>
-
-<p>O Compiler 1.2.80: Semicolon added for breaking the lines. Previous sings were new line and carriage return plus new line.</p>
-
-<p>O Compiler 1.2.79: CallEx added for prepared calls.</p>
-
-<p>O Compiler 1.2.75: <b>warning on</b> and <b>warning off</b> language commands. This can be used for example to share files between projects.</p>
-
-<p>O Compiler 1.2.74: strings definitions can have multiple rows startings from this version</p>
-
-<p>O Compiler 1.2.68: Not sign (~) at numbers and constants added. Fix at quotation and comma values parser.</p>
-
-<p>O Compiler 1.2.66: Fix at function in code.</p>
-
-<p>O Compiler 1.2.64: Raw strings(not depending on variables) can be used at the code operations starting with this version.</p>
-
-<p>O Compiler 1.2.62: Added prefix at any variable operation, the current data section cursor with the "!" character, and function name placed in code option for debuggers.</p>
-
-<p>O Compiler 1.2.50: Numbers and constants usage at code operations added: arithmetic, bitwise operations, and the rest.</p>
-
-<p>O Compiler 1.2.41: stack variables are now aligned ascendent (like data).</p>
-
-<p>O Compiler 1.2.35: Stack variables added. These can be used at recursive functions or for volatile variable causes.</p>
-
-<p>O Compiler 1.2.22: Update: A variables that points to a function (imported or created) can be called like a function.</p>
-
-<p>O Compiler 1.2.18: Additional symbol preferences options for warnings and for log file. Used to handle code functions at object format.</p>
-
-<p>O Compiler 1.2.17: Additional <b>include</b> option added: The active folder can now be changed relative to the include command. To achieve that there is the "Include active folder" at the preferences.</p>
-
-<p>O Compiler 1.2.16: Flexibility added: at <b>chars</b> (chars name=value); at <b>str</b> (str name="string").</p>
-
-<p>O Compiler 1.2.10:
- 	New preference option: <b>log file</b>, used when a log with the working path and all the compiled files results needed.<br>
-	New command: <b>Exit</b>, it will perform a linux sys_exit command, see the laguage documentation for details.</p>
-
-
-<p>O Compiler 1.2.8: Improvement added: arguments at function declaration can now be prefixed with unreference safety sign (*).</p>
-
-<p>O Compiler 1.2.1: Functions at object format can now have pointers: Pointer data declaration method now accepts functions (without constants).</p>
-
-<p>O Compiler 1.2, October 19 2012:
-	New format added: <b>ElfObj</b>. Can be used to create object files that can be united with a linker (e.g: gcc from gnu).
-	<br>
-	New declaration sign added: <b>%</b>. Used at elfobj format, has no effect at executables. Relocations are added automatically, but % sign can be used instead of = sign to add a data relocation, if required.</p>
-
-<p>O Compiler 1.1, October 13 2012:
-	O Compiler can now creates elf files for linux systems. Use the "Format elf" command at the start of the program.
-	<br>
-	All functions can now be called in combinations like AddCall, OrCall, AndCall, etc.</p>
-
-<p>O Compiler 1.0, October 2 2012: Release date.</p>
-
--- ocompiler-1.orig/compiler.html
+++ /dev/null
@@ -1,17 +0,0 @@
-
-<p style='margin-top:40px'><b>O Compiler</b></p>
-<p>
-	O Compiler is a tool to compile O programming language code. The language is easy to learn.
-	The compiler creates <b>pe</b> (Portable Executable) executable files and <b>elf</b> (Executable and Linking Format) executable and object files.
-	Can be used on windows and linux.
-	There is a documentation file <i>o.html</i>.
-	O Compiler can be used very simple.
-	<br>
-	To compile a file there are two methods:
-	<br>
-	1. Start the program with one argument (ex: from the command line). Example: windows, <b>o.exe src/windows/o.o</b>; linux, <b>o "./src/linux/o.o"</b>
-	<br>
-	2. <i>Windows only</i>. Start the program and select a file.
-	<br>
-	To disable warnings see the file 'ocompiler.conf'.
-</p>
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/compiler.html.old
@@ -0,0 +1,17 @@
+
+<p style='margin-top:40px'><b>O Compiler</b></p>
+<p>
+	O Compiler is a tool to compile O programming language code. The language is easy to learn.
+	The compiler creates <b>elf</b> (Executable and Linking Format) executable and object files and <b>pe</b> (Portable Executable) executable files.
+	Can be used on linux and windows.
+	There is a documentation file <i>o.html</i>.
+	O Compiler can be used very simple.
+	<br>
+	To compile a file there are two methods:
+	<br>
+	1. Start the program with one argument (ex: from the command line). Example: linux, <b>o "./src/linux/o.o"</b>; windows, <b>o.exe src/windows/o.o</b>
+	<br>
+	2. <i>Windows only</i>. Start the program and select a file.
+	<br>
+	To disable warnings see the file 'ocompiler.conf'.
+</p>
--- ocompiler-1.orig/make
+++ /dev/null
@@ -1,9 +0,0 @@
-
-#use Makefile
-exit
-
-./o "./src/linux/o.oc"
-
-mkdir ./build
-mv ./src/linux/o ./build/
-cp .ocompiler.txt ./build/
--- ocompiler-1.orig/make.bat
+++ /dev/null
@@ -1,8 +0,0 @@
-
-::use makewin32
-exit
-
-md build
-o.exe "src/windows/o.oc"
-move src\windows\o.exe build\
-copy .ocompiler.txt build\
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/make.bat.old
@@ -0,0 +1,8 @@
+
+::use makewin32
+exit
+
+md build
+o.exe "src/windows/o.oc"
+move src\windows\o.exe build\
+copy .ocompiler.txt build\
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/make.old
@@ -0,0 +1,9 @@
+
+#use Makefile
+exit
+
+./o "./src/linux/o.oc"
+
+mkdir ./build
+mv ./src/linux/o ./build/
+cp .ocompiler.txt ./build/
--- ocompiler-1.orig/makewin64
+++ /dev/null
@@ -1,51 +0,0 @@
-
-#is old staying for information
-#x86_64-w64-mingw32-ld --image-base=0 -s -entry _WinMain@16 "./obj64.o" -luser32 -lkernel32 -lcomdlg32 -lmsvcrt -o "./o64.exe"
-exit
-
-#########
-#the build is working
-#attention at GetCommandNameA to not return a 64 bit pointer and at realloc
-#modify the OPENFILENAME(needed when starting with no argument to compile):
-#       DWORD         lStructSize;       pad 0
-#QWORD  HWND          hwndOwner;         -
-#QWORD  HINSTANCE     hInstance;         -
-#QWORD  LPCTSTR       lpstrFilter;       -
-#QWORD  LPTSTR        lpstrCustomFilter; -
-#       DWORD         nMaxCustFilter;    x
-#       DWORD         nFilterIndex;      -
-#QWORD  LPTSTR        lpstrFile;         -
-#       DWORD         nMaxFile;          pad 0
-#QWORD  LPTSTR        lpstrFileTitle;    -
-#       DWORD         nMaxFileTitle;     pad 0
-#QWORD  LPCTSTR       lpstrInitialDir;   -
-#QWORD  LPCTSTR       lpstrTitle;        -
-#       DWORD         Flags;             x
-#       WORD          nFileOffset;       x
-#       WORD          nFileExtension;    -
-#QWORD  LPCTSTR       lpstrDefExt;       -
-#QWORD  LPARAM        lCustData;         -
-#QWORD  LPOFNHOOKPROC lpfnHook;          -
-#QWORD  LPCTSTR       lpTemplateName;    -
-#if (_WIN32_WINNT >= 0x0500)
-#QWORD  void          *pvReserved;       -
-#       DWORD         dwReserved;        x
-#       DWORD         FlagsEx;           -
-#endif
-
-x86_64-w64-mingw32-dlltool --no-leading-underscore -d ./fix/user.def -l ./fix/libuser.a
-x86_64-w64-mingw32-dlltool --no-leading-underscore -d ./fix/kernel.def -l ./fix/libkernel.a
-x86_64-w64-mingw32-dlltool --no-leading-underscore -d ./fix/comdlg.def -l ./fix/libcomdlg.a
-x86_64-w64-mingw32-dlltool --no-leading-underscore -d ./fix/c.def -l ./fix/libc.a
-
-./o ./src/windows/obj32_64code.oc
-objcopy --input-target=elf32-i386 --output-target=elf64-x86-64 "./src/windows/obj32_64code.o" "./src/windows/obj64.o"
-mkdir ./buildg
-x86_64-w64-mingw32-ld --image-base=0 -s -nostdlib -entry _WinMain@16 "./src/windows/obj64.o" -L./fix -luser -l kernel -lcomdlg -lc -o "./buildg/o64.exe"
-cp ./.ocompiler.txt ./buildg/
-
-rm ./fix/libuser.a
-rm ./fix/libkernel.a
-rm ./fix/libcomdlg.a
-rm ./fix/libc.a
-rm ./src/windows/obj64.o
--- /dev/null
+++ ocompiler-1/makewin64.old
@@ -0,0 +1,51 @@
+
+#is old staying for information
+#x86_64-w64-mingw32-ld --image-base=0 -s -entry _WinMain@16 "./obj64.o" -luser32 -lkernel32 -lcomdlg32 -lmsvcrt -o "./o64.exe"
+exit
+
+#########
+#the build is working
+#attention at GetCommandNameA to not return a 64 bit pointer and at realloc
+#modify the OPENFILENAME(needed when starting with no argument to compile):
+#       DWORD         lStructSize;       pad 0
+#QWORD  HWND          hwndOwner;         -
+#QWORD  HINSTANCE     hInstance;         -
+#QWORD  LPCTSTR       lpstrFilter;       -
+#QWORD  LPTSTR        lpstrCustomFilter; -
+#       DWORD         nMaxCustFilter;    x
+#       DWORD         nFilterIndex;      -
+#QWORD  LPTSTR        lpstrFile;         -
+#       DWORD         nMaxFile;          pad 0
+#QWORD  LPTSTR        lpstrFileTitle;    -
+#       DWORD         nMaxFileTitle;     pad 0
+#QWORD  LPCTSTR       lpstrInitialDir;   -
+#QWORD  LPCTSTR       lpstrTitle;        -
+#       DWORD         Flags;             x
+#       WORD          nFileOffset;       x
+#       WORD          nFileExtension;    -
+#QWORD  LPCTSTR       lpstrDefExt;       -
+#QWORD  LPARAM        lCustData;         -
+#QWORD  LPOFNHOOKPROC lpfnHook;          -
+#QWORD  LPCTSTR       lpTemplateName;    -
+#if (_WIN32_WINNT >= 0x0500)
+#QWORD  void          *pvReserved;       -
+#       DWORD         dwReserved;        x
+#       DWORD         FlagsEx;           -
+#endif
+
+x86_64-w64-mingw32-dlltool --no-leading-underscore -d ./fix/user.def -l ./fix/libuser.a
+x86_64-w64-mingw32-dlltool --no-leading-underscore -d ./fix/kernel.def -l ./fix/libkernel.a
+x86_64-w64-mingw32-dlltool --no-leading-underscore -d ./fix/comdlg.def -l ./fix/libcomdlg.a
+x86_64-w64-mingw32-dlltool --no-leading-underscore -d ./fix/c.def -l ./fix/libc.a
+
+./o ./src/windows/obj32_64code.oc
+objcopy --input-target=elf32-i386 --output-target=elf64-x86-64 "./src/windows/obj32_64code.o" "./src/windows/obj64.o"
+mkdir ./buildg
+x86_64-w64-mingw32-ld --image-base=0 -s -nostdlib -entry _WinMain@16 "./src/windows/obj64.o" -L./fix -luser -l kernel -lcomdlg -lc -o "./buildg/o64.exe"
+cp ./.ocompiler.txt ./buildg/
+
+rm ./fix/libuser.a
+rm ./fix/libkernel.a
+rm ./fix/libcomdlg.a
+rm ./fix/libc.a
+rm ./src/windows/obj64.o
--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -75,7 +75,7 @@
 <p>
 	The O language use constants, variables, pointers that are decimal integers or hexadecimal numbers.
 	<br>
-	Exe files for Windows and Elf executable files for Linux-based systems can be created.
+	Elf object/executable files for Linux-based systems and Exe files for Windows and can be created.
 	<br>
 	Object files that have elf relocatable format can be created.
 	<br>
@@ -100,6 +100,11 @@
 	The commands are from i386 with extension for x86-64 (but with the HEX macro anything can be wrote to code section).
 	<br>
 	4 bytes variables are sign extended to 8. 1 byte variables are zero extended to 4/8 bytes when needed.
+	<a class="code">
+	o[.exe] filename [options]
+	<br>
+	#key value options. more at configuration file.
+	</a>
 </p>
 
 <h3><a name="declaringdata">II. Declaring data</a></h3>
--- ocompiler-1.orig/old.html
+++ ocompiler-1/old.html
@@ -1,4 +1,8 @@
-File ID: 1oIbl4XhEVQfhcU2wZ43MdM4B5TggA_pK
+File ID: 1aSzpD6rTAnJYXchC1PqmaLiW0qI-P2We
+<p>Found file: ./ocompiler-1-5+164.x86_64.rpm, 1aSzpD6rTAnJYXchC1PqmaLiW0qI-P2We, 2024-04-12T11:11:11.321Z, 70282, https://drive.google.com/uc?id=1aSzpD6rTAnJYXchC1PqmaLiW0qI-P2We&export=download
+anyoneWithLink</p>
+<p>Found file: ./ocompiler-1-5+163.x86_64.rpm, 1IKQk1JeRR8C8MBFcJGdWrdLxjHwvaMEK, 2024-04-11T08:11:16.267Z, 70250, https://drive.google.com/uc?id=1IKQk1JeRR8C8MBFcJGdWrdLxjHwvaMEK&export=download
+anyoneWithLink</p>
 <p>Found file: ./ocompiler-1-5+158.x86_64.rpm, 1oIbl4XhEVQfhcU2wZ43MdM4B5TggA_pK, 2024-04-10T07:48:04.418Z, 70131, https://drive.google.com/uc?id=1oIbl4XhEVQfhcU2wZ43MdM4B5TggA_pK&export=download
 anyoneWithLink</p>
 <p>Found file: ./ocompiler-1-5+155.x86_64.rpm, 1V2Ovra0KkXmgKuf1p1dhRyM0jfyK4VNq, 2024-04-05T06:31:59.783Z, 69987, https://drive.google.com/uc?id=1V2Ovra0KkXmgKuf1p1dhRyM0jfyK4VNq&export=download
--- ocompiler-1.orig/otoc/Makefile
+++ ocompiler-1/otoc/Makefile
@@ -38,14 +38,15 @@ OFLAGS+=${OFLAGSEXTRA}
 
 number=number.h
 
-number.pre.o:
-	o number.pre.oc ${OFLAGS}
+number.pre.o: number.pre.oc
+	o $< ${OFLAGS}
 number.pre: number.pre.o
 	${ATLDCOM} $@ $^
 ${number}: number.pre
-	./number.pre
-${OBJ}: ${number}
-	${OCOMP} ${FULLOBJS} ${OFLAGS}
+	./$<
+#       in case otoc.oc is modified
+${OBJ}: ${FULLOBJS} ${number}
+	${OCOMP} $< ${OFLAGS}
 ${prog}: ${OBJ}
 	${OLINK} ${FULLOBJLOG}
 	@echo
--- ocompiler-1.orig/otoc/decl.oc
+++ ocompiler-1/otoc/decl.oc
@@ -27,46 +27,9 @@ function functiondef_extern(sv pbuffer)
 end
 #function functiondef_entry(sv pbuffer)
 
-#at N structure
-function normal(sv pbuffer)
-	charx type#1;call get_char(pbuffer,#type)
+#DoT
+function dot(sv pbuffer)
+	datax sz#1;valuex pointer#1
+	call get_string(pbuffer,#sz,#pointer)
+	call var(pbuffer)
 end
-function neg(sv pbuffer)
-	charx type#1;call get_char(pbuffer,#type)
-end
-function not(sv pbuffer)
-	charx type#1;call get_char(pbuffer,#type)
-end
-function notneg(sv pbuffer)
-	charx type#1;call get_char(pbuffer,#type)
-end
-function open();end
-function close();end
-function add();end
-function sub();end
-function mul();end
-function div();end
-function divu();end
-function and();end
-function or();end
-function xor();end
-function pow();end
-function rem();end
-function remu();end
-function shl();end
-function sar();end
-function shr();end
-function equal();end
-function inequal();end
-function less();end
-function greater();end
-function lessequal();end
-function greaterequal();end
-function logicaland();end
-function logicalor();end
-function unsignedless();end
-function unsignedgreater();end
-function unsignedlessequal();end
-function unsignedgreaterequal();end
-function parity();end
-function odd();end
--- ocompiler-1.orig/otoc/loop.oc
+++ ocompiler-1/otoc/loop.oc
@@ -10,7 +10,7 @@ const SEEK_CUR=1
 const SEEK_END=2
 
 include "xfile.h"
-const Xfile_last=Xfile_line
+#const Xfile_last=Xfile_line
 
 datax result#1
 
@@ -32,10 +32,7 @@ function loop(sd input,sd output)
 
 				while pointer!=delim
 					charx command#1;call get_char(#pointer,#command)
-					if command>(Xfile_last)
-						call puts("Error")
-						break
-					end
+					#if command>(Xfile_last);call puts("Error");break;end
 					value Xfile_comment^comment
 					value *Xfile_commentmulti^commentmulti
 					value *Xfile_commentlineend^commentlineend
@@ -99,6 +96,8 @@ end
 importx "fwrite" fwrite
 
 include "decl.oc"
+include "number.oc"
+include "var.oc"
 
 aftercall *
 function aftercallenable()
@@ -106,8 +105,6 @@ function aftercallenable()
 	aftercallenable
 end
 
-include "number.oc"
-
 function comment(sv pbuffer,sd outfile)
 	call write(outfile,"//",2)
 	datax sz#1;valuex pointer#1
@@ -137,7 +134,7 @@ function line(sv *pbuffer,sd outfile)
 end
 
 function include(sv pbuffer,sd output)
-#no write
+#need write
 	charx type#1;call get_char(pbuffer,#type)
 	datax sz#1;valuex pointer#1
 	call get_string(pbuffer,#sz,#pointer)
@@ -169,7 +166,7 @@ function functiondef(sv pbuffer,sd outfi
 	callret writen(outfile,"){",2)
 end
 function hex(sv pbuffer)
-#N is minimum, no write
+#need write
 	datax args#1;call get_data(pbuffer,#args)
 	sd n=0;while n!=args
 		call number(pbuffer)
--- ocompiler-1.orig/otoc/number.oc
+++ ocompiler-1/otoc/number.oc
@@ -1,21 +1,17 @@
 
-#aftercalli
-
 #N structure
+
 function number(sv pbuffer)
 include "number.h"
 	charx item#1;call get_char(pbuffer,#item)
 	while item!=(Xfile_numbers_done)
+		#this coresponds to number.pre.oc line
 		value functions^normal;               value  *^neg;            value  *^not;            value  *^notneg;            value  *^open;                 value  *^close;                 value *^add;                value *^sub;                value *^mul;                value *^div;                value *^divu;                value *^and;                value *^or;                value *^xor;                value *^pow;                value *^rem;                value *^remu;                value *^shl;                value *^sar;                value *^shr;                value *^equal;                value *^inequal;                value *^less;                value *^greater;                value *^lessequal;                value *^greaterequal;                value *^logicaland;                value *^logicalor;                value *^unsignedless;                value *^unsignedgreater;                value *^unsignedlessequal;                value *^unsignedgreaterequal;                value *^parity;                value *^odd;
-		if item>^(Xfile_numbers_last)
-			callret aftercallenable()
-		end
+		#if item>^(Xfile_numbers_last);callret aftercallenable();end
 		ss n;set n #data
 		add n item
-		sv &f;set f n#
-		if f=(Xfile_numbers_notmapped)
-			callret aftercallenable()
-		end
+		sv f;set f n#
+		#if f=(Xfile_numbers_notmapped);callret aftercallenable();end
 		mult f :
 		add f #functions
 		set f f#
@@ -23,3 +19,100 @@ include "number.h"
 		call get_char(pbuffer,#item)
 	end
 end
+
+function numbertype(sv pbuffer)
+	value functions^number_int_long
+	value         *^number_int_data
+	value         *^number_int_datax
+	value         *^number_text_dec
+	value         *^number_text_oct
+	value         *^number_text_hex
+	value         *^number_text_const
+	value         *^number_func_size
+	value         *^number_func_sizex
+	value         *^number_var_size
+	value         *^number_var_offset
+	charx type#1;call get_char(pbuffer,#type)
+	mult type :
+	sv f^functions
+	add f type
+	set f f#
+	call f(pbuffer)
+end
+
+function number_int_long();end
+function number_int_data();end
+function number_int_datax();end
+function number_text_dec(sv pbuffer)
+	datax sz#1;valuex pointer#1
+	call get_string(pbuffer,#sz,#pointer)
+end
+function number_text_oct(sv pbuffer)
+	datax sz#1;valuex pointer#1
+	call get_string(pbuffer,#sz,#pointer)
+end
+function number_text_hex(sv pbuffer)
+	datax sz#1;valuex pointer#1
+	call get_string(pbuffer,#sz,#pointer)
+end
+function number_text_const(sv pbuffer)
+	datax sz#1;valuex pointer#1
+	call get_string(pbuffer,#sz,#pointer)
+end
+function number_func_size(sv pbuffer)
+	datax sz#1;valuex pointer#1
+	call get_string(pbuffer,#sz,#pointer)
+end
+function number_func_sizex(sv pbuffer)
+	datax sz#1;valuex pointer#1
+	call get_string(pbuffer,#sz,#pointer)
+end
+function number_var_size(sv pbuffer)
+	call dot(pbuffer)
+end
+function number_var_offset(sv pbuffer)
+	call dot(pbuffer)
+end
+
+function normal(sv pbuffer)
+	call numbertype(pbuffer)
+end
+function neg(sv pbuffer)
+	call numbertype(pbuffer)
+end
+function not(sv pbuffer)
+	call numbertype(pbuffer)
+end
+function notneg(sv pbuffer)
+	call numbertype(pbuffer)
+end
+function open();end
+function close();end
+function add();end
+function sub();end
+function mul();end
+function div();end
+function divu();end
+function and();end
+function or();end
+function xor();end
+function pow();end
+function rem();end
+function remu();end
+function shl();end
+function sar();end
+function shr();end
+function equal();end
+function inequal();end
+function less();end
+function greater();end
+function lessequal();end
+function greaterequal();end
+function logicaland();end
+function logicalor();end
+function unsignedless();end
+function unsignedgreater();end
+function unsignedlessequal();end
+function unsignedgreaterequal();end
+function parity();end
+function odd();end
--- ocompiler-1.orig/otoc/number.pre.oc
+++ ocompiler-1/otoc/number.pre.oc
@@ -10,6 +10,8 @@ importx "exit" exit
 
 include "xfile.h"
 const Xfile_numbers_prefix_notneg=Xfile_numbers_prefix_not|Xfile_numbers_prefix_neg
+const Xfile_numbers_last=Xfile_numbers_operation_shr
+const Xfile_numbers_notmapped=0xff
 
 function nr(sd i,sd f)
 const numbers_start=\
--- /dev/null
+++ ocompiler-1/otoc/var.oc
@@ -0,0 +1,9 @@
+
+function var(sv pbuffer)
+	datax sz#1;valuex pointer#1
+	call get_string(pbuffer,#sz,#pointer)
+	charx suffix#1;call get_char(pbuffer,#suffix)
+	if suffix=(Xfile_suffix_true)
+		charx cast#1;call get_char(pbuffer,#cast)
+	end
+end
--- ocompiler-1.orig/otoc/xfile.h
+++ ocompiler-1/otoc/xfile.h
@@ -1,4 +1,2 @@
 einclude "../src/files/headers/xfile.h" "/usr/include/ocompiler/xfile.h"
 #einclude? will use all constants in the header. yes, but some are used without touching them, like in loop()
-const Xfile_numbers_last=Xfile_numbers_operation_shr
-const Xfile_numbers_notmapped=0xff
--- ocompiler-1.orig/src/Makefile
+++ ocompiler-1/src/Makefile
@@ -51,14 +51,15 @@ etcinclude=etcinclude.oc
 
 #OFLAGS=
 
-${OBJ}: ${etcinclude}
+#       this is in case .oc file is modified
+${OBJ}: ${FULLOBJS} ${etcinclude}
 	if [ -s ${OBT} ];then \
 		echo text; \
 		base64 -d ${OBT} > $@; \
 		${_ATLDCOM} o $@; \
 		./o ${FULLOBJS}; \
 	else \
-		${OCOMP} ${FULLOBJS} ${OFLAGS}; \
+		${OCOMP} $< ${OFLAGS}; \
 	fi; \
 	mv ${FULLOBJO} . \
 
--- ocompiler-1.orig/src/files/functions.oc
+++ ocompiler-1/src/files/functions.oc
@@ -48,6 +48,9 @@ Include "./functions/64/bit.oc"
 Include "./functions/64/reloc.oc"
 Include "./functions/64/align.oc"
 
+Include "./functions/xfile.oc"
+Include "./functions/xfile_details.oc"
+
 Include "./functions/include.oc"
 Include "./functions/dataassign.oc"
 Include "./functions/enumbags.oc"
@@ -57,6 +60,3 @@ Include "./functions/scopes.oc"
 Include "./functions/debug.oc"
 Include "./functions/index.oc"
 Include "./functions/short.oc"
-
-Include "./functions/xfile.oc"
-Include "./functions/xfile_details.oc"
--- ocompiler-1.orig/src/files/functions/actions/argstwo.oc
+++ ocompiler-1/src/files/functions/actions/argstwo.oc
@@ -303,7 +303,7 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 			if subtype!=(cCALLEX_primsec)
 				SetCall errnr write_imm_trunc(dataargsec,regopcode,lowprim,dataargprim,sufixprim)
 			else
-				SetCall errnr write_imm_sign(dataargsec,regopcode)
+				SetCall errnr write_imm_simple(dataargsec,regopcode) #not low, same scalar ff 34 c8  pushq  (%rax,%rcx,8),   and set ecx is ok on big, and with rex is sign extended that is also useless
 			endelse
 		else
 			if p_prefix#=(FALSE)
@@ -344,8 +344,25 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 	setcall imm getisimm()
 	if imm=true
 		#first argument imm are comparations
-		#first value is imm, or second value is imm (switched)
-		SetCall errnr write_imm_sign(dataargprim,(ecxregnumber)) #0xb8+
+		#or second value is imm (switched) still a comparation
+		if store_big=(TRUE)
+			SetCall errnr write_imm_sign(dataargprim,(ecxregnumber)) #0xb8+
+		else
+			setcall errnr write_imm_simple(dataargprim,(ecxregnumber))
+		endelse
+		if errnr=(noerror)
+			#continue to write the imm comparation(first is imm, second doesnt care)ex: 1(constant)==1(constant)->cmp ecx,eax (eax,ecx can be if switch)
+			char immcompdata#1
+			set immcompdata compimmop
+			char *immcompdatamodrm=0xc1
+			str immcomp^immcompdata
+			data immcompsz=2
+			if store_big=(TRUE)
+				call rex_w(#errnr)
+				If errnr!=noerr;Return errnr;EndIf
+			endif
+			SetCall errnr addtosec(immcomp,immcompsz,codeptr)
+		endif
 	else
 		SetCall errnr writeop_prim(dataargprim,opprim,sufixprim,lowprim,sameimportant,lowsec)
 	endelse
@@ -410,24 +427,6 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 			endelse
 		endelse
 	ElseIf ptrcondition!=false
-		if imm=true
-			#first imm true only at comparations
-			#continue to write the imm comparation(first is imm, second doesnt care)ex: 1(constant)==1(constant)->cmp ecx,eax (eax,ecx can be if switch)
-			char immcompdata#1
-			set immcompdata compimmop
-			char *immcompdatamodrm=0xc1
-			str immcomp^immcompdata
-			data immcompsz=2
-			if store_big=(TRUE)
-				call rex_w(#errnr)
-				If errnr!=noerr;Return errnr;EndIf
-			endif
-			SetCall errnr addtosec(immcomp,immcompsz,codeptr)
-			If errnr!=noerr
-				Return errnr
-			EndIf
-		endif
-
 		Char jumpifnotcond={0x0f}
 		Char cond#1
 		#this will be resolved at endcond
--- ocompiler-1.orig/src/files/functions/actions/dataparse.oc
+++ ocompiler-1/src/files/functions/actions/dataparse.oc
@@ -114,6 +114,7 @@ Function addvarreference(sv ptrcontent,s
 				or mask (pointbit)
 			endif
 		endelse
+		or mask 0x10000 #this is used at get var size number, both at fndec and declare
 	Else
 		Data structure#1
 		SetCall structure getstructcont(constantsnr)
--- ocompiler-1.orig/src/files/functions/actions/enumcomma.oc
+++ ocompiler-1/src/files/functions/actions/enumcomma.oc
@@ -181,7 +181,7 @@ Function enumcommas(sv ptrcontent,sd ptr
 							Return err
 						EndIf
 					endelse
-					call xfile_inc_commas_if()
+					call xfile_inc_commas()
 				else
 					add punitsizeOrparses# hexOrunitsize
 					call advancecursors(ptrcontent,ptrsize,argumentsize)
--- ocompiler-1.orig/src/files/functions/argument/arg.oc
+++ ocompiler-1/src/files/functions/argument/arg.oc
@@ -321,13 +321,9 @@ EndFunction
 #err
 function getarg_dot_any(sd content,sd argsize,sd container_sz,sd ptrdata,sd ptrlow,sd ptrsufix)
 	sd errnr
-	setcall errnr xfile_add_char_if((Xfile_arg_varfn_dot_yes))
+	sd scope
+	setcall errnr get_scope(#content,#argsize,container_sz,#scope)
 	if errnr=(noerror)
-		sd scope
-		setcall errnr get_scope(#content,#argsize,container_sz,#scope)
-		if errnr!=(noerror)
-			return errnr
-		endif
 		SetCall errnr varsufix_ex(content,argsize,ptrdata,ptrlow,ptrsufix,scope)
 	endif
 	return errnr
@@ -335,15 +331,18 @@ endfunction
 #err
 function getarg_dot(sd content,sd argsize,sd container_sz,sd ptrdata,sd ptrlow,sd ptrsufix)
 	sd errnr
-	setcall errnr getarg_dot_any(content,argsize,container_sz,ptrdata,ptrlow,ptrsufix)
-	if errnr!=(noerror)
-		return errnr
-	endif
-	sd test;setcall test stackbit(ptrdata#)
-	if test=0
-		return (noerror)
+	setcall errnr xfile_add_char_if((Xfile_arg_varfn_dot_yes))
+	if errnr=(noerror)
+		setcall errnr getarg_dot_any(content,argsize,container_sz,ptrdata,ptrlow,ptrsufix)
+		if errnr!=(noerror)
+			return errnr
+		endif
+		sd test;setcall test stackbit(ptrdata#)
+		if test=0
+			return (noerror)
+		endif
+		setcall errnr there_is_nothing_there()
 	endif
-	setcall errnr there_is_nothing_there()
 	return errnr
 endfunction
 #er
--- ocompiler-1.orig/src/files/functions/argument/imm.oc
+++ ocompiler-1/src/files/functions/argument/imm.oc
@@ -77,6 +77,13 @@ function write_imm(sd dataarg,sd op)
 	return err
 endfunction
 #er
+function write_imm_simple(sd value,sd reg)
+	sd err
+	add reg (ateaximm)
+	setcall err write_imm(value,reg)
+	return err
+endfunction
+#er
 function write_imm_sign(sd dataarg,sd regopcode)
 	vData codeptr%%ptr_codesec
 	sd err
@@ -99,12 +106,11 @@ function write_imm_trunc(sd value,sd reg
 		sd bool;setcall bool is_big_imm(data,sufix)
 		if bool=(FALSE)
 			#mediu
-			add reg (ateaximm)
-			setcall err write_imm(value,reg)
+			setcall err write_imm_simple(value,reg)
 			return err
 		endif
 		#big
-		setcall err write_imm_sign(value,reg)  #there is one if64 useless inside
+		setcall err write_imm_sign(value,reg)  #there is one if64 inside that extends the sign
 		return err
 	endif
 	#low
--- ocompiler-1.orig/src/files/functions/dataassign.oc
+++ ocompiler-1/src/files/functions/dataassign.oc
@@ -18,18 +18,16 @@ Function dataassign(sd ptrcontent,sd ptr
 	#Data pointer_structure#1
 	#at constants and at data^sd,str^ss
 
-	#for size of var
-	sd reg;sd ptr_reserve
-
 	if punitsize=(NULL)
 		if typenumber=constantsnr
 			#this can't go after dataparse, addvarref will increase the offset
 			Call getcontReg(constantsstruct,ptroffset_const)
-			SetCall err addvarreferenceorunref(ptrcontent,ptrsize,valsize,typenumber,long_mask) #there are 2 more argument but are not used
+			SetCall err addvarreferenceorunref(ptrcontent,ptrsize,valsize,typenumber,long_mask) #there are 2 more arguments but are not used
 			#it is not a mistake to go with 0 mask in variable from here to addaref
 			If err!=noerr;Return err;EndIf
 		else
-			sd immovable_struct_cont
+			sd immovable_struct_cont ;#for size of var
+			sd reg	             ;#for size of var
 			if stack=(TRUE)
 				sd sectiontypenumber=totalmemvariables
 				add sectiontypenumber typenumber
@@ -47,11 +45,7 @@ Function dataassign(sd ptrcontent,sd ptr
 			endelse
 			If err!=noerr;Return err;EndIf
 
-			#for size of var
-			call getcont(immovable_struct_cont,#ptr_reserve)
-			add ptr_reserve reg
-			add ptr_reserve (maskoffset_reserve)
-			call i_to_s(1,ptr_reserve) #why not set # 1? anyone can modify in peace and not set this part if not required. is this a plan? don't care
+			#for size of var  1 is set at addvar
 
 			if sign=nosign
 				#stack variable declared without assignation, only increment stack variables
@@ -139,9 +133,9 @@ Function dataassign(sd ptrcontent,sd ptr
 					#else is at stack value   grep stackfilter2   2
 						set stringtodata true
 						set skipNumberValue true
-						if punitsize!=(NULL)
-							set punitsize# 1    #was 1 from bsz is 1 from null end
-						endif
+						#??? #if punitsize!=(NULL)
+						#	set punitsize# 1    #was 1 from bsz is 1 from null end
+						#endif
 					endif
 				ElseIf typenumber=stringsnr
 					set stringtodata true
@@ -230,9 +224,10 @@ Function dataassign(sd ptrcontent,sd ptr
 				Str ptrgroupend^groupend
 				Return ptrgroupend
 			EndIf
-			if punitsize=(NULL)
+			if punitsize=(NULL)  #pass_write
 				SetCall err enumcommas(ptrcontent,ptrsize,sz,true,typenumber,(NULL),(not_hexenum),stack,long_mask,relocbool,relocindx)
 				If err!=noerr;Return err;EndIf
+				call to_size_of_var(main.xf_commas,immovable_struct_cont,reg)
 				setcall err xfile_add_commas_if()
 				If err!=noerr;Return err;EndIf
 			else
@@ -244,7 +239,7 @@ Function dataassign(sd ptrcontent,sd ptr
 			Return noerr
 		EndElse
 	ElseIf sign=(reservesign)
-		setcall err get_reserve_size(ptrcontent,ptrsize,size,ptrvalue,stack,typenumber,long_mask,ptr_reserve)
+		setcall err get_reserve_size(ptrcontent,ptrsize,size,ptrvalue,stack,typenumber,long_mask,immovable_struct_cont,reg)
 		if err=(noerror)
 			if punitsize!=(NULL)
 				set punitsize# value
@@ -420,6 +415,14 @@ Function dataassign(sd ptrcontent,sd ptr
 		SetCall err quotinmem(ptrcontent,ptrsize,ptrvalue,#escapes)
 		if punitsize=(NULL)
 			SetCall err addtosecstresc_xfile(ptrcontent,ptrsize,value,escapes,ptrdatasec)
+			If typenumber=charnr
+			#for size of var
+				if err=(noerror)
+					sub value escapes
+					inc value ##ptr_reserve is already 1, another solution is add short and check overlow there not at this _safe function
+					call to_size_of_var(value,immovable_struct_cont,reg)
+				endif
+			endif
 			return err
 		else
 			sub value escapes
@@ -456,8 +459,19 @@ function get_function_values(sd impbit,s
 	return pointer#
 endfunction
 
+function to_size_of_var(sd value,sd struct,sd reg)
+	sd r;call getcont(struct,#r)
+	add r reg
+	add r (maskoffset_reserve)
+	if value<=(wmax)
+		call i_to_s(value,r)
+	else
+		call i_to_s(0,r)
+	endelse
+endfunction
+
 #err
-function get_reserve_size(sv ptrcontent,sd ptrsize,sd size,sd ptrvalue,sd is_stack,sd typenumber,sd long_mask,sd ptr_reserve)
+function get_reserve_size(sv ptrcontent,sd ptrsize,sd size,sd ptrvalue,sd is_stack,sd typenumber,sd long_mask,sd struct,sd reg)
 	sd err
 	SetCall err parseoperations(ptrcontent,ptrsize,size,ptrvalue,(TRUE))
 	If err!=(noerror)
@@ -471,13 +485,9 @@ function get_reserve_size(sv ptrcontent,
 
 	sd value;set value ptrvalue#
 	vdata p_parses%ptr_parses
-	if p_parses=(pass_write)
-	#ptr_reserve is undefined at another pass (and theoretically at constants)
-		if value<=(wmax)
-			call i_to_s(value,ptr_reserve)
-		else
-			call i_to_s(0,ptr_reserve)
-		endelse
+	if p_parses#=(pass_write)
+	#strunct/reg not at another pass (and theoretically at constants)
+		call to_size_of_var(value,struct,reg) #for size of var
 	endif
 
 	if is_stack=(FALSE)
--- ocompiler-1.orig/src/files/functions/values/numbersandconstants.oc
+++ ocompiler-1/src/files/functions/values/numbersandconstants.oc
@@ -338,13 +338,13 @@ function numbertoint(vstrx content,datax
 	#0X ?
 	SetCall bool memtohex(content,size,outval)
 	If bool=(TRUE)
-		setcall err xfile_add_base_ifif((Xfile_numbers_type_thex),content,size)
+		setcall err xfile_add_base_ifif((Xfile_numbers_type_thexadec),content,size)
 		return err
 	endif
 	#0 ?
 	SetCall bool memtooct(content,size,outval)
 	If bool=(TRUE)
-		setcall err xfile_add_base_ifif((Xfile_numbers_type_toct),content,size)
+		setcall err xfile_add_base_ifif((Xfile_numbers_type_toctal),content,size)
 		return err
 	endif
 	#decimal number
--- ocompiler-1.orig/src/files/functions/xfile_details.oc
+++ ocompiler-1/src/files/functions/xfile_details.oc
@@ -109,14 +109,14 @@ function xfile_prepare_commas_if()
 		if main.xf_pos=-1
 			return err
 		endif
-		set main.xf_commas 0
 	endif
+	set main.xf_commas 0  # outside if? is used at var size for declare
 	return (noerror)
 endfunction
-function xfile_inc_commas_if()
-	if main.xfile!=(openno)
-		inc main.xf_commas
-	endif
+function xfile_inc_commas()#_if()         same as prepare_commas
+	#if main.xfile!=(openno)            same
+	inc main.xf_commas
+	#endif
 endfunction
 #err
 function xfile_add_commas_if()
--- ocompiler-1.orig/src/files/headers/xfile.h
+++ ocompiler-1/src/files/headers/xfile.h
@@ -31,8 +31,7 @@ const Xfile_override=22
 const Xfile_orphan=23
 const Xfile_interrupt=24
 const Xfile_line=25
-#const Xfile_last=Xfile_line
-#at the moment Xfile_last <= 0xff
+#at the moment these are <= 0xff
 
 #t from type
 const Xfile_function_tintern=0
@@ -126,8 +125,8 @@ const Xfile_numbers_type_idata=1
 const Xfile_numbers_type_idatax=2
 #t from text
 const Xfile_numbers_type_tdecimal=3
-const Xfile_numbers_type_toct=4
-const Xfile_numbers_type_thex=5
+const Xfile_numbers_type_toctal=4
+const Xfile_numbers_type_thexadec=5
 const Xfile_numbers_type_tconstant=6
 #f from function
 const Xfile_numbers_type_fsize=7
--- ocompiler-1.orig/tests/.expected/call/call-ret.o.txt
+++ ocompiler-1/tests/.expected/call/call-ret.o.txt
@@ -1,13 +1,13 @@
 f0VMRgIBAQAAAAAAAAAAAAEAPgABAAAAAAAAAAAAAAAAAAAAAAAAAEIAAAAAAAAAAAAAAEAAAAAA
 AEAACAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAwAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAHAAAAAQAAAAYAAAAAAAAAAAAAAAAAAAAABAAAAAAAAJIA
-AAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAADQAAAAgAAAADAAAAAAAAAAAAAAAAAAAAkgQA
+AAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAHAAAAAQAAAAYAAAAAAAAAAAAAAAAAAAAABAAAAAAAAI4A
+AAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAADQAAAAgAAAADAAAAAAAAAAAAAAAAAAAAjgQA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAABoAAAACAAAAAAAAAAAAAAAAAAAA
-AAAAAJIEAAAAAAAAkAAAAAAAAAAHAAAABAAAAAQAAAAAAAAAGAAAAAAAAAAiAAAABAAAAAAAAAAA
-AAAAAAAAAAAAAAAiBQAAAAAAAAAAAAAAAAAABAAAAAEAAAAEAAAAAAAAABgAAAAAAAAALQAAAAQA
-AAAAAAAAAAAAAAAAAAAAAAAAIgUAAAAAAAAAAAAAAAAAAAQAAAACAAAABAAAAAAAAAAYAAAAAAAA
-ADgAAAADAAAAAAAAAAAAAAAAAAAAAAAAACIFAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAA
+AAAAAI4EAAAAAAAAkAAAAAAAAAAHAAAABAAAAAQAAAAAAAAAGAAAAAAAAAAiAAAABAAAAAAAAAAA
+AAAAAAAAAAAAAAAeBQAAAAAAAAAAAAAAAAAABAAAAAEAAAAEAAAAAAAAABgAAAAAAAAALQAAAAQA
+AAAAAAAAAAAAAAAAAAAAAAAAHgUAAAAAAAAAAAAAAAAAAAQAAAACAAAABAAAAAAAAAAYAAAAAAAA
+ADgAAAADAAAAAAAAAAAAAAAAAAAAAAAAAB4FAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
@@ -16,10 +16,10 @@ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFNV
-SIvsSIvcyVvDWEiD7DBQU1VIi+xIi9xIgesIAAAAkEiL4+jX////kEiL40jHwQIAAABIi9NIiwJI
-gfkAAAAAdAhI/8n/NMjr7+iw////kEiL4+in////yVtZSIPEMFHDkEiL40jHwQIAAABIi9NIiwJI
-gfkAAAAAdAhI/8n/NMjr7+h3////yVtZSIPEMFHDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
-AAMAAQAAAAAAAAAAAAAAAAAAAAAABwAAAAMAAgAAAAAAAAAAAAAAAAAAAAAADQAAAAMAAwAAAAAA
-AAAAAAAAAAAAAAAAEwAAACIAAgAAAAAAAAAAAAAAAAAAAAAAFQAAABIAAgALAAAAAAAAAAAAAAAA
-AAAAAC5kYXRhAC50ZXh0AC5kdG5iAGEAbWFpbgAuc3ltdGFiAC5yZWxhLmRhdGEALnJlbGEudGV4
-dAAuc3RydGFiAA==
+SIvsSIvcyVvDWEiD7DBQU1VIi+xIi9xIgesIAAAAkEiL4+jX////kEiL47kCAAAASIvTSIsCSIH5
+AAAAAHQISP/J/zTI6+/osv///5BIi+Poqf///8lbWUiDxDBRw5BIi+O5AgAAAEiL00iLAkiB+QAA
+AAB0CEj/yf80yOvv6Hv////JW1lIg8QwUcMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwAB
+AAAAAAAAAAAAAAAAAAAAAAAHAAAAAwACAAAAAAAAAAAAAAAAAAAAAAANAAAAAwADAAAAAAAAAAAA
+AAAAAAAAAAATAAAAIgACAAAAAAAAAAAAAAAAAAAAAAAVAAAAEgACAAsAAAAAAAAAAAAAAAAAAAAA
+LmRhdGEALnRleHQALmR0bmIAYQBtYWluAC5zeW10YWIALnJlbGEuZGF0YQAucmVsYS50ZXh0AC5z
+dHJ0YWIA
--- ocompiler-1.orig/tests/.expected/cond.o.txt
+++ ocompiler-1/tests/.expected/cond.o.txt
@@ -1,13 +1,13 @@
 f0VMRgIBAQAAAAAAAAAAAAEAPgABAAAAAAAAAAAAAAAAAAAAAAAAAEIAAAAAAAAAAAAAAEAAAAAA
 AEAACAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAwAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAHAAAAAQAAAAYAAAAAAAAAAAAAAAAAAAAABAAAAAAAAHsB
-AAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAADQAAAAgAAAADAAAAAAAAAAAAAAAAAAAAewUA
+AAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAHAAAAAQAAAAYAAAAAAAAAAAAAAAAAAAAABAAAAAAAAF0B
+AAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAADQAAAAgAAAADAAAAAAAAAAAAAAAAAAAAXQUA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAABgAAAACAAAAAAAAAAAAAAAAAAAA
-AAAAAHsFAAAAAAAAeAAAAAAAAAAHAAAABAAAAAQAAAAAAAAAGAAAAAAAAAAgAAAABAAAAAAAAAAA
-AAAAAAAAAAAAAADzBQAAAAAAAAAAAAAAAAAABAAAAAEAAAAEAAAAAAAAABgAAAAAAAAAKwAAAAQA
-AAAAAAAAAAAAAAAAAAAAAAAA8wUAAAAAAAAAAAAAAAAAAAQAAAACAAAABAAAAAAAAAAYAAAAAAAA
-ADYAAAADAAAAAAAAAAAAAAAAAAAAAAAAAPMFAAAAAAAAPgAAAAAAAAAAAAAAAAAAAAEAAAAAAAAA
+AAAAAF0FAAAAAAAAeAAAAAAAAAAHAAAABAAAAAQAAAAAAAAAGAAAAAAAAAAgAAAABAAAAAAAAAAA
+AAAAAAAAAAAAAADVBQAAAAAAAAAAAAAAAAAABAAAAAEAAAAEAAAAAAAAABgAAAAAAAAAKwAAAAQA
+AAAAAAAAAAAAAAAAAAAAAAAA1QUAAAAAAAAAAAAAAAAAAAQAAAACAAAABAAAAAAAAAAYAAAAAAAA
+ADYAAAADAAAAAAAAAAAAAAAAAAAAAAAAANUFAAAAAAAAPgAAAAAAAAAAAAAAAAAAAAEAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
@@ -16,13 +16,13 @@ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhI
-g+wwUFNVSIvsSIvcuAEAAABIx8EBAAAAOcEPhQUAAADpFAAAALgBAAAASMfBAQAAADnBD4UAAAAA
-uAEAAABIx8EBAAAAOcEPhQ8AAADpCgAAAOni////6d3///+4AQAAAEjHwQEAAAA5wQ+CBQAAAOnc
-AAAAuAEAAABIx8EBAAAAOcEPgwUAAADpwwAAALgBAAAASMfBAQAAADnBD4QFAAAA6aoAAAC4AQAA
-AEjHwQEAAAA5wQ+FBQAAAOmRAAAAuAEAAABIx8EBAAAAOcEPhgUAAADpeAAAALgBAAAASMfBAQAA
-ADnBD4cFAAAA6V8AAAC4AQAAAEjHwQEAAAA5wQ+MBQAAAOlGAAAAuAEAAABIx8EBAAAAOcEPjQUA
-AADpLQAAALgBAAAASMfBAQAAADnBD44FAAAA6RQAAAC4AQAAAEjHwQEAAAA5wQ+PAAAAALgBAAAA
-SMfBBAAAADnBD4sAAAAAuAEAAABIx8ECAAAAOcEPigAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAABAAAAAwABAAAAAAAAAAAAAAAAAAAAAAAHAAAAAwACAAAAAAAAAAAAAAAAAAAAAAANAAAAAwAD
-AAAAAAAAAAAAAAAAAAAAAAATAAAAEgACAAAAAAAAAAAAAAAAAAAAAAAALmRhdGEALnRleHQALmR0
-bmIAbWFpbgAuc3ltdGFiAC5yZWxhLmRhdGEALnJlbGEudGV4dAAuc3RydGFiAA==
+g+wwUFNVSIvsSIvcuAEAAAC5AQAAADnBD4UFAAAA6RIAAAC4AQAAALkBAAAAOcEPhQAAAAC4AQAA
+ALkBAAAAOcEPhQ8AAADpCgAAAOnk////6d////+4AQAAALkBAAAAOcEPggUAAADpygAAALgBAAAA
+uQEAAAA5wQ+DBQAAAOmzAAAAuAEAAAC5AQAAADnBD4QFAAAA6ZwAAAC4AQAAALkBAAAAOcEPhQUA
+AADphQAAALgBAAAAuQEAAAA5wQ+GBQAAAOluAAAAuAEAAAC5AQAAADnBD4cFAAAA6VcAAAC4AQAA
+ALkBAAAAOcEPjAUAAADpQAAAALgBAAAAuQEAAAA5wQ+NBQAAAOkpAAAAuAEAAAC5AQAAADnBD44F
+AAAA6RIAAAC4AQAAALkBAAAAOcEPjwAAAAC4AQAAALkEAAAAOcEPiwAAAAC4AQAAALkCAAAAOcEP
+igAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwABAAAAAAAAAAAAAAAAAAAAAAAHAAAA
+AwACAAAAAAAAAAAAAAAAAAAAAAANAAAAAwADAAAAAAAAAAAAAAAAAAAAAAATAAAAEgACAAAAAAAA
+AAAAAAAAAAAAAAAALmRhdGEALnRleHQALmR0bmIAbWFpbgAuc3ltdGFiAC5yZWxhLmRhdGEALnJl
+bGEudGV4dAAuc3RydGFiAA==
--- ocompiler-1.orig/tests/.expected/declareN.o.txt
+++ ocompiler-1/tests/.expected/declareN.o.txt
@@ -1,13 +1,13 @@
 f0VMRgIBAQAAAAAAAAAAAAEAPgABAAAAAAAAAAAAAAAAAAAAAAAAAEIAAAAAAAAAAAAAAEAAAAAA
 AEAACAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAwAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAEwAAAAAAAAAA
-AAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAHAAAAAQAAAAYAAAAAAAAAAAAAAAAAAAATBAAAAAAAABwA
-AAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAADQAAAAgAAAADAAAAAAAAAAAAAAAAAAAALwQA
+AAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAwAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAIwAAAAAAAAAA
+AAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAHAAAAAQAAAAYAAAAAAAAAAAAAAAAAAAAjBAAAAAAAACwA
+AAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAADQAAAAgAAAADAAAAAAAAAAAAAAAAAAAATwQA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAABUAAAACAAAAAAAAAAAAAAAAAAAA
-AAAAAC8EAAAAAAAAeAAAAAAAAAAHAAAABAAAAAQAAAAAAAAAGAAAAAAAAAAdAAAABAAAAAAAAAAA
-AAAAAAAAAAAAAACnBAAAAAAAABgAAAAAAAAABAAAAAEAAAAEAAAAAAAAABgAAAAAAAAAKAAAAAQA
-AAAAAAAAAAAAAAAAAAAAAAAAvwQAAAAAAAAYAAAAAAAAAAQAAAACAAAABAAAAAAAAAAYAAAAAAAA
-ADMAAAADAAAAAAAAAAAAAAAAAAAAAAAAANcEAAAAAAAAOwAAAAAAAAAAAAAAAAAAAAEAAAAAAAAA
+AAAAAE8EAAAAAAAAeAAAAAAAAAAHAAAABAAAAAQAAAAAAAAAGAAAAAAAAAAdAAAABAAAAAAAAAAA
+AAAAAAAAAAAAAADHBAAAAAAAABgAAAAAAAAABAAAAAEAAAAEAAAAAAAAABgAAAAAAAAAKAAAAAQA
+AAAAAAAAAAAAAAAAAAAAAAAA3wQAAAAAAAAwAAAAAAAAAAQAAAACAAAABAAAAAAAAAAYAAAAAAAA
+ADMAAAADAAAAAAAAAAAAAAAAAAAAAAAAAA8FAAAAAAAAOwAAAAAAAAAAAAAAAAAAAAEAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
@@ -15,9 +15,10 @@ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
-AAAAAAAAAAgKAAEPAQkAAQBTVUiL7EiL3Ei6AQAAAAAAAABIixJID7YCyVvDAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAQAAAAMAAQAAAAAAAAAAAAAAAAAAAAAABwAAAAMAAgAAAAAAAAAAAAAAAAAA
-AAAADQAAAAMAAwAAAAAAAAAAAAAAAAAAAAAAEwAAACIAAgAAAAAAAAAAAAAAAAAAAAAAAQAAAAAA
-AAABAAAAAQAAAAAAAAAAAAAACgAAAAAAAAABAAAAAQAAAAEAAAAAAAAAAC5kYXRhAC50ZXh0AC5k
-dG5iAGIALnN5bXRhYgAucmVsYS5kYXRhAC5yZWxhLnRleHQALnN0cnRhYgA=
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAECAzEyMzQABAAAAAAAAAAIFwABDwEWAAIDBAUEi4QkCAAAAKMAAAAAAAAAAFNVSIvsSIvc
+SLoOAAAAAAAAAEiLEkgPtgLJW8MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAwABAAAAAAAA
+AAAAAAAAAAAAAAAHAAAAAwACAAAAAAAAAAAAAAAAAAAAAAANAAAAAwADAAAAAAAAAAAAAAAAAAAA
+AAATAAAAIgACAAAAAAAAAAAAAAAAAAAAAAAOAAAAAAAAAAEAAAABAAAABAAAAAAAAAAIAAAAAAAA
+AAEAAAABAAAAAAAAAAAAAAAaAAAAAAAAAAEAAAABAAAADgAAAAAAAAAALmRhdGEALnRleHQALmR0
+bmIAYgAuc3ltdGFiAC5yZWxhLmRhdGEALnJlbGEudGV4dAAuc3RydGFiAA==
--- ocompiler-1.orig/tests/.expected/declareN.oc.log
+++ ocompiler-1/tests/.expected/declareN.oc.log
@@ -1,7 +1,9 @@
 p./
 ndeclareN.oc
 ob.a
+ob.c
+ob.e
 ob.aa
 da
 q
-x00000013
+x00000023
--- ocompiler-1.orig/tests/.expected/declareN.oc.x.txt
+++ ocompiler-1/tests/.expected/declareN.oc.x.txt
@@ -1,6 +1,8 @@
-AwMFAQAAAGIAAAAAAAYCAAAAAQAAAGECAAADAQAAADEfBgIABAACAAAAYWEAAQAAAGEHAAIAAAAC
-AAAAYWEBUxAADQAAAGNvbnN0IGE9XGIuYVwGAAEAAABhAgAGAgAAAQEAAAB6AgAAAB8GAgAAAQEA
-AAB6AgAAAR8GAgAAAQEAAAB6AgAAAh8GAgAAAQEAAAB6AgAAAwEAAAAxHwYCAAABAQAAAHoCAAAF
-AwAAADB4Zh8GAgAAAQEAAAB6AgAABgEAAABhHwYCAAABAQAAAHoCAAAHAQAAAGIfBgIAAAEBAAAA
-egIAAAgBAAAAYh8GAgAAAQEAAAB6AgAACQEBAAAAYgEAAABhAB8GAgAAAQEAAAB6AgAACgEAAABi
-AQAAAGEAHw==
+AwMFAQAAAGIAAQAAAAIAAgABAAAAZAYCAAAAAQAAAGEBAAMBAAAAMh8GAgAAAAEAAABjAgEDAAAA
+AAMBAAAAMR8AAwEAAAAyHwADAQAAADMfBgIAAAABAAAAZQICBAAAADEyMzQGAgAEAAIAAABhYQAB
+AAAAYQcAAgAAAAIAAABhYQFTEAANAAAAY29uc3QgYT1cYi5hXAYAAQAAAGECAAYCAAABAQAAAHoC
+AAAAHwYCAAABAQAAAHoCAAABHwYCAAABAQAAAHoCAAACHwYCAAABAQAAAHoCAAADAQAAADEfBgIA
+AAEBAAAAegIAAAUDAAAAMHhmHwYCAAABAQAAAHoCAAAGAQAAAGEfBgIAAAEBAAAAegIAAAcBAAAA
+Yh8GAgAAAQEAAAB6AgAACAEAAABiHwYCAAABAQAAAHoCAAAJAQAAAGIBAAAAYQAfBgIAAAEBAAAA
+egIAAAkBAAAAYgEAAABjAB8GAgAAAQEAAAB6AgAACQEAAABiAQAAAGQAHwYCAAABAQAAAHoCAAAJ
+AQAAAGIBAAAAZQAfBgIAAAEBAAAAegIAAAoBAAAAYgEAAABhAB8=
--- ocompiler-1.orig/tests/.expected/end.o.txt
+++ ocompiler-1/tests/.expected/end.o.txt
@@ -1,10 +1,10 @@
 f0VMRgEBAQAAAAAAAAAAAAEAAwABAAAAAAAAAAAAAAA0AAAAAAAAADQAIAAAACgACAAHAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAMAAAAAAAAAAAQAAAAA
-AAAAAAAAAAAAAAQAAAAAAAAABwAAAAEAAAAGAAAAAAAAAAAEAAB8AAAAAAAAAAAAAAAEAAAAAAAA
-AA0AAAAIAAAAAwAAAAAAAAB8BAAAAAAAAAAAAAAAAAAABAAAAAAAAAAVAAAAAgAAAAAAAAAAAAAA
-fAQAAFAAAAAHAAAABAAAAAQAAAAQAAAAHQAAAAQAAAAAAAAAAAAAAMwEAAAAAAAABAAAAAEAAAAE
-AAAADAAAACgAAAAEAAAAAAAAAAAAAADMBAAAAAAAAAQAAAACAAAABAAAAAwAAAAzAAAAAwAAAAAA
-AAAAAAAAzAQAADsAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAQAAAAAAAAABwAAAAEAAAAGAAAAAAAAAAAEAAB3AAAAAAAAAAAAAAAEAAAAAAAA
+AA0AAAAIAAAAAwAAAAAAAAB3BAAAAAAAAAAAAAAAAAAABAAAAAAAAAAVAAAAAgAAAAAAAAAAAAAA
+dwQAAFAAAAAHAAAABAAAAAQAAAAQAAAAHQAAAAQAAAAAAAAAAAAAAMcEAAAAAAAABAAAAAEAAAAE
+AAAADAAAACgAAAAEAAAAAAAAAAAAAADHBAAAAAAAAAQAAAACAAAABAAAAAwAAAAzAAAAAwAAAAAA
+AAAAAAAAxwQAADsAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
@@ -16,8 +16,8 @@ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFNV
-i+yL3LgCAAAAx8EBAAAAOcEPhWAAAAC4BAAAAMfBAwAAADnBD4UFAAAA6RMAAAC4BgAAAMfBBQAA
-ADnBD4UAAAAAuAgAAADHwQcAAAA5wQ+FBQAAAOkAAAAAuAoAAADHwQkAAAA5wQ+FBQAAAOkFAAAA
-6Y3////JW8MAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAwABAAcAAAAAAAAAAAAAAAMAAgAN
-AAAAAAAAAAAAAAADAAMAEwAAAAAAAAAAAAAAIgACAAAuZGF0YQAudGV4dAAuZHRuYgBhAC5zeW10
-YWIALnJlbGEuZGF0YQAucmVsYS50ZXh0AC5zdHJ0YWIA
+i+yL3LgCAAAAuQEAAAA5wQ+FXAAAALgEAAAAuQMAAAA5wQ+FBQAAAOkSAAAAuAYAAAC5BQAAADnB
+D4UAAAAAuAgAAAC5BwAAADnBD4UFAAAA6QAAAAC4CgAAALkJAAAAOcEPhQUAAADpBQAAAOmS////
+yVvDAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMAAQAHAAAAAAAAAAAAAAADAAIADQAAAAAA
+AAAAAAAAAwADABMAAAAAAAAAAAAAACIAAgAALmRhdGEALnRleHQALmR0bmIAYQAuc3ltdGFiAC5y
+ZWxhLmRhdGEALnJlbGEudGV4dAAuc3RydGFiAA==
--- ocompiler-1.orig/tests/.expected/otoc.o.txt
+++ ocompiler-1/tests/.expected/otoc.o.txt
@@ -16,7 +16,7 @@ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AACLhCQIAAAAowAAAAAAAAAAU1VIi+xIi9zJW8NYSIPsMFBTVUiL7EiL3Pj3GQAAAAAAAAAAAAAA
+AACLhCQIAAAAowAAAAAAAAAAU1VIi+xIi9zJW8NYSIPsMFBTVUiL7EiL3Pj7DQAAAAAAAAAAAAAA
 AAAAAAAAAAAAAAAAAAEAAAADAAEAAAAAAAAAAAAAAAAAAAAAAAcAAAADAAIAAAAAAAAAAAAAAAAA
 AAAAAA0AAAADAAMAAAAAAAAAAAAAAAAAAAAAABMAAAAiAAIAAAAAAAAAAAAAAAAAAAAAABoAAAAS
 AAIAGwAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAQAAAAEAAAAAAAAAAAAAAAAuZGF0YQAudGV4dAAu
--- ocompiler-1.orig/tests/.expected/otoc.oc.log
+++ ocompiler-1/tests/.expected/otoc.oc.log
@@ -3,6 +3,4 @@ notoc.oc
 ninclude.h
 q
 q
-vintern.a
-fintern
 x00000004
--- ocompiler-1.orig/tests/.expected/otoc.oc.x.txt
+++ ocompiler-1/tests/.expected/otoc.oc.x.txt
@@ -1,4 +1,5 @@
 AwMABwAAAGNvbW1lbnQBDAAAAAptdWx0aQpsaW5lCgQACQAAAGluY2x1ZGUuaAEJAAAAaW5jbHVk
 ZS5oADIAAABub3QgMCBzaXplIGZpbGUgdG8gYmUgaW5jbHVkZWQgaW4gZGViaWFuIGZvciB0ZXN0
 cwUGAAAAaW50ZXJuAAEAAAACAAIAAQAAAGECCgAAAGNvbW1lbnRpbmcQBQQAAABtYWluAwAAAAAA
-FQMAAAABAB8CAB8DACsQAAArAAAYHxk=
+FQMAAAABAB8CAR8DAisQAAMBAAAAMSsABAIAAAAwMSsABQMAAAAweDIrAAcGAAAAaW50ZXJuKwAI
+BgAAAGludGVybisACQYAAABpbnRlcm4BAAAAYQArAAoGAAAAaW50ZXJuAQAAAGEAGB8Z
--- ocompiler-1.orig/tests/.expected/sizeofvar.o.txt
+++ ocompiler-1/tests/.expected/sizeofvar.o.txt
@@ -1184,9 +1184,9 @@ AAAASIvCUEiLPCRIi3QkCEiDxBBIuAAAAAAAAAAA
 JEiLdCQISIPEEEi4AAAAAAAAAAD/0EiL42gEAAAASLp4AgEAAAAAAEiLwlBIizwkSIt0JAhIg8QQ
 SLgAAAAAAAAAAP/QSIvjaAEAAABIunwCAQAAAAAASIvCUEiLPCRIi3QkCEiDxBBIuAAAAAAAAAAA
 /9BIi+NoCAAAAEi6gAIBAAAAAABIi8JQSIs8JEiLdCQISIPEEEi4AAAAAAAAAAD/0EiL42gIAAAA
-SLqEAgEAAAAAAEiLwlBIizwkSIt0JAhIg8QQSLgAAAAAAAAAAP/QSIvjaAEAAABIuogCAQAAAAAA
-SIvCUEiLPCRIi3QkCEiDxBBIuAAAAAAAAAAA/9BIi+NoBAAAAEi6jAIBAAAAAABIi8JQSIs8JEiL
-dCQISIPEEEi4AAAAAAAAAAD/0EiL42gIAAAASLqQAgEAAAAAAEiLwlBIizwkSIt0JAhIg8QQSLgA
+SLqEAgEAAAAAAEiLwlBIizwkSIt0JAhIg8QQSLgAAAAAAAAAAP/QSIvjaAIAAABIuogCAQAAAAAA
+SIvCUEiLPCRIi3QkCEiDxBBIuAAAAAAAAAAA/9BIi+NoDAAAAEi6jAIBAAAAAABIi8JQSIs8JEiL
+dCQISIPEEEi4AAAAAAAAAAD/0EiL42ggAAAASLqQAgEAAAAAAEiLwlBIizwkSIt0JAhIg8QQSLgA
 AAAAAAAAAP/QSMfAAAAAAMlbWUiDxDBRwwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAEA
 AAAAAAAAAAAAAAAAAAAAAAcAAAADAAIAAAAAAAAAAAAAAAAAAAAAAA0AAAADAAMAAAAAAAAAAAAA
 AAAAAAAAABMAAAAQAAAAAAAAAAAAAAAEAAAAAAAAABsAAAASAAIAAAAAAAAAAAAAAAAAAAAAADcA
--- ocompiler-1.orig/tests/.expected/sizeofvar.oc.x.txt
+++ ocompiler-1/tests/.expected/sizeofvar.oc.x.txt
@@ -2,14 +2,14 @@ AwMTAQYAAABwcmludGYGAAAAcHJpbnRmBQQAAABt
 MR8GAgACAAEAAABiAgAAAwEAAAAyHwYCAAQAAQAAAGMCAAADAQAAADMfBgIABwABAAAAZAIAAAMB
 AAAAMR8GAgAFAAEAAABlAgAAAwEAAAAxHwYBBAABAAAAZgIAAAMBAAAAMR8GAgAAAAEAAABnAQAD
 BQAAADY2MTIzHwYCAQAAAgAAAGFhAQADAQAAADIfBgIBAgACAAAAYmIBAAMBAAAAMx8GAgEEAAIA
-AABjYwEAAwEAAAA0HwkAAAYAAABwcmludGYCAAAAAAAJAQQAAABtYWluAQAAAGEAHwEDAAAAJWQK
-AgEAAAAxCQAABgAAAHByaW50ZgIAAAAAAAkBBAAAAG1haW4BAAAAYgAfAQMAAAAlZAoCAQAAADQJ
-AAAGAAAAcHJpbnRmAgAAAAAACQEEAAAAbWFpbgEAAABjAB8BAwAAACVkCgIBAAAAOAkAAAYAAABw
-cmludGYCAAAAAAAJAQQAAABtYWluAQAAAGMBAB8BAwAAACVkCgIBAAAAOAkAAAYAAABwcmludGYC
-AAAAAAAJAQQAAABtYWluAQAAAGQBAB8BAwAAACVkCgIBAAAANAkAAAYAAABwcmludGYCAAAAAAAJ
-AQQAAABtYWluAQAAAGUBAB8BAwAAACVkCgIBAAAAMQkAAAYAAABwcmludGYCAAAAAAAJAQQAAABt
-YWluAQAAAGYAHwEDAAAAJWQKAgEAAAA4CQAABgAAAHByaW50ZgIAAAAAAAkBBAAAAG1haW4BAAAA
-ZgEAHwEDAAAAJWQKAgEAAAA4CQAABgAAAHByaW50ZgIAAAAAAAkBBAAAAG1haW4CAAAAYWEAHwED
-AAAAJWQKAgEAAAAyCQAABgAAAHByaW50ZgIAAAAAAAkBBAAAAG1haW4CAAAAYmIAHwEDAAAAJWQK
-AgIAAAAxMgkAAAYAAABwcmludGYCAAAAAAAJAQQAAABtYWluAgAAAGNjAB8BAwAAACVkCgICAAAA
-MzIAGgAAAHJldHVybiAoXG1haW4uZykgICAgI2Vycm9yBwAAAAQBAAAAMB8=
+AABjYwEAAwEAAAA0HwkAAAYAAABwcmludGYCAAAAAAAJBAAAAG1haW4BAAAAYQAfAQMAAAAlZAoC
+AQAAADEJAAAGAAAAcHJpbnRmAgAAAAAACQQAAABtYWluAQAAAGIAHwEDAAAAJWQKAgEAAAA0CQAA
+BgAAAHByaW50ZgIAAAAAAAkEAAAAbWFpbgEAAABjAB8BAwAAACVkCgIBAAAAOAkAAAYAAABwcmlu
+dGYCAAAAAAAJBAAAAG1haW4BAAAAYwEAHwEDAAAAJWQKAgEAAAA4CQAABgAAAHByaW50ZgIAAAAA
+AAkEAAAAbWFpbgEAAABkAQAfAQMAAAAlZAoCAQAAADQJAAAGAAAAcHJpbnRmAgAAAAAACQQAAABt
+YWluAQAAAGUBAB8BAwAAACVkCgIBAAAAMQkAAAYAAABwcmludGYCAAAAAAAJBAAAAG1haW4BAAAA
+ZgAfAQMAAAAlZAoCAQAAADgJAAAGAAAAcHJpbnRmAgAAAAAACQQAAABtYWluAQAAAGYBAB8BAwAA
+ACVkCgIBAAAAOAkAAAYAAABwcmludGYCAAAAAAAJBAAAAG1haW4CAAAAYWEAHwEDAAAAJWQKAgEA
+AAAyCQAABgAAAHByaW50ZgIAAAAAAAkEAAAAbWFpbgIAAABiYgAfAQMAAAAlZAoCAgAAADEyCQAA
+BgAAAHByaW50ZgIAAAAAAAkEAAAAbWFpbgIAAABjYwAfAQMAAAAlZAoCAgAAADMyABoAAAByZXR1
+cm4gKFxtYWluLmcpICAgICNlcnJvcgcAAAAEAQAAADAf
--- ocompiler-1.orig/tests/d
+++ ocompiler-1/tests/d
@@ -1,4 +1,4 @@
 
-write_to_expected=1 compile_only=1 ./x ${1} && \
+./x ${1} && \
 ../otoc/otoc ${1}.oc.x && \
 cc ${1}.c
--- ocompiler-1.orig/tests/declareN.oc
+++ ocompiler-1/tests/declareN.oc
@@ -1,8 +1,10 @@
 
 format elfobj64
 
-function b()
-char a=1
+function b(data d)
+char a#2
+char c={1,2,3}
+char e="1234"
 value aa^a
 return aa#s^
 endfunction
@@ -19,4 +21,7 @@ char *z=a
 char *z=\b
 char *z=\\b
 char *z=\b.a
+char *z=\b.c
+char *z=\b.d
+char *z=\b.e
 char *z=\b.a\
--- /dev/null
+++ ocompiler-1/tests/di
@@ -0,0 +1,2 @@
+
+OCOMP=o ./d $@
--- ocompiler-1.orig/tests/otoc.oc
+++ ocompiler-1/tests/otoc.oc
@@ -14,5 +14,5 @@ function intern(data a) #commenting
 end
 
 entry main()
-hex -:,~:,~-:+(:+:)
+hex -:,~\,~-\\+(1+01+0x2+\intern+\\intern+\intern.a+\intern.a\)
 ;
--- ocompiler-1.orig/tests/x
+++ ocompiler-1/tests/x
@@ -1,3 +1,3 @@
 
-OFLAGS="x_file 1 includedir 0 relative_path 1" ./a $@
+write_to_expected=1 compile_only=1 OFLAGS="x_file 1 includedir 0 relative_path 1" ./a $@
 #       same as in ./compile
