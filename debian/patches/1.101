Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 actionswf (1-101) bionic; urgency=medium
 .
   * button xlog_ainit_true
Author: bc <bc@bc-desktop>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2024-10-13

--- actionswf-1.orig/Makefile
+++ actionswf-1/Makefile
@@ -7,15 +7,15 @@ else
 conv_64=0
 endif
 
-SUBDIRS := src example
-# oad
+SUBDIRS := src example oad
 
 $(TOPTARGETS): $(SUBDIRS)
 $(SUBDIRS):
 	$(MAKE) -C $@ conv_64=${conv_64} $(MAKECMDGOALS)
 
 test:
-	cd tests && conv_64=${conv_64} /bin/bash ./as && conv_64=${conv_64} /bin/bash ./c 1 && cd ffdec && conv_64=${conv_64} /bin/bash ./as && echo tests ok
+	cd tests && conv_64=${conv_64} /bin/bash ./as && conv_64=${conv_64} /bin/bash ./c 1 && cd ffdec && conv_64=${conv_64} /bin/bash ./as && \
+	cd ../data && /bin/bash ./test && echo tests ok
 clean:
 	cd tests; /bin/bash ./c; cd ffdec; /bin/bash ./c; cd ../data; /bin/bash ./c
 install:
--- actionswf-1.orig/example/Makefile
+++ actionswf-1/example/Makefile
@@ -103,7 +103,7 @@ uninstall:
 test:
 	diff ${sfile} expected.swf
 
-.PHONY: all install clean distclean uninstall test
+.PHONY: all build uns lib link exe install clean distclean uninstall test
 
 .NOTPARALLEL:
 
--- actionswf-1.orig/example/example.oc
+++ actionswf-1/example/example.oc
@@ -25,6 +25,8 @@ setcall shape swf_shape_basic((shape_lat
 sd movie_preid
 setcall movie_preid swf_sprite_new()
 
+call action_init_sprite(movie_preid,"_root.tog=1")
+
 call swf_sprite_placeobject(movie_preid,shape,1)
 call swf_sprite_showframe(movie_preid)
 
@@ -51,6 +53,22 @@ setcall movie swf_sprite_done(movie_prei
 call swf_exports_add(movie,"movie")
 call swf_exports_done()
 
+sd f;set f swf_font_basic("_sans")
+char ButtonData_a="Toggle"
+data ButtonData={0x11FF11ff,10,0x11FF1188, 0xaa1122ff,10,0xaa112288, 0x1122FFff,10,0x1122FF88, 24,24}
+vstr *^ButtonData_a
+data ButtonData_c#1;set ButtonData_c f;data *=20
+data *vert_off=-5
+data *font_color=0xff
+vstr ButtonData_d#1;set ButtonData_d "
+if(_root.tog==1){
+	_root.tog=0;_root._movie.stop()
+}else{
+	_root.tog=1;_root._movie.play()
+}"
+sd b;set b swf_button(150,50,#ButtonData)
+call swf_placeobject(b,0)
+
 call action("
 var x_coef=1;
 var y_coef=1;
--- actionswf-1.orig/include/xlog.h.oh
+++ actionswf-1/include/xlog.h.oh
@@ -16,3 +16,7 @@ const xlog_function=0x40       #@
 #A-F
 const xlog_string=0x5E        ;#^
 const xlog_innerbranchend=0x7C;#|
+
+#note: oaalternative is using ainit
+const xlog_ainit_false=0
+const xlog_ainit_true=1
--- actionswf-1.orig/oaalternative
+++ actionswf-1/oaalternative
@@ -42,7 +42,7 @@ doaction () {
 	to=${1}
 	shift
 	if [ ${#@} = 0 ]; then
-		return 1
+		return #is empty
 	fi
 	for var in "${@}"; do
 		f=`echo ${var} | grep -o "frame_.*/"`   #/ is important to stop the search
@@ -50,7 +50,6 @@ doaction () {
 		f=${to}_${f:6}
 		move ${var} ../${out}/${f}
 	done
-	return 0
 }
 new_tag () {
 	s=${p}
@@ -80,24 +79,24 @@ while read p; do
 			else
 			#done
 				if [ -n "${isdebug}" ]; then echo finalId = ${p}; fi
-				if [ "${ainits[${s}]}" = 1 ]; then #this sprite has a DoInitAction tag
-					if [ ${ainits_counter} != 1 ]; then
-						ainits_file="_${ainits_counter}.as"
-					else
-						ainits_file=".as"
-					fi
-					f=`find -name DoInitAction${ainits_file}`
-					move  ${f} ../${out}/${s}
-					ainits_counter=$((ainits_counter+1))
-				fi
-				doaction ${s} `find -name DoAction.as | grep "DefineSprite_${p}_movie"` || {
-					f=`find -name "BUTTONCONDACTION on(release).as" | grep "DefineButton2_${p}"` # | xargs -I {} echo "\"{}\""`; doaction ${s} "${f}" #double escape the quotes
+				if [ "${ainits[${s}]}" = 1 ]; then #button or DoInitAction sprite
+					f=`find -name "BUTTONCONDACTION on(release).as" | grep "DefineButton2_${p}"`
 					if [ -n "${f}" ]; then #is a button
 						d=../${out}/${s}
 						move "${f}" ${d}
 						sed -e '1d' -e '$d' -i ${d}  #remove on(release){ ... }
-					fi #else is empty
-				}
+					else #sprite init
+						if [ ${ainits_counter} != 1 ]; then
+							ainits_file="_${ainits_counter}.as"
+						else
+							ainits_file=".as"
+						fi
+						f=`find -name DoInitAction${ainits_file}`
+						move  ${f} ../${out}/${s}
+						ainits_counter=$((ainits_counter+1))
+					fi
+				fi
+				doaction ${s} `find -name DoAction.as | grep "DefineSprite_${p}_movie"`  #else is empty
 			fi
 			s=
 		else
--- actionswf-1.orig/oad/Makefile
+++ actionswf-1/oad/Makefile
@@ -24,13 +24,23 @@ re:
 
 xlog=../include/xlog.
 
-subobjects=intern.o compare.o
+items=intern compare frame
+#$(eval subobjects = )
+$(foreach var,$(items),$(eval subobjects += ${var}.o))
+#$(eval sublogs = )
+$(foreach var,$(items),$(eval sublogs += ${var}.oc.log))
+#$(eval subx = )
+$(foreach var,$(items),$(eval subx += ${var}.oc.x))
+#$(eval subc = )
+$(foreach var,$(items),$(eval subc += ${var}.c))
+
+objects=main.o ${subobjects}
+${objects}: common.h
+common.h: oadbgdata.h ${xlog}h
 ${exte}: ${subobjects}
 	$(AR) cr ${exte} $^
-objects=main.o ${subobjects}
-${objects}: common.h oadbgdata.h
 ${libname}: main.o ${exte}
-	${OLINK} main.oc.log intern.oc.log
+	${OLINK} main.oc.log ${sublogs}
 	$(CC) ${linkerflags} -shared $< -o ${libname} -L. -l:${exte} -Wl,--exclude-libs ${exte}
 # -l:intern.o ? is ok but exclude-libs intern.o/...a will not exclude
 
@@ -44,31 +54,29 @@ ${libname}: main.o ${exte}
 	echo "orphan off" >> $@
 	cat $< >> $@
 %.h: %.oh
-	if [ $@ = common.h ]; then $(MAKE) ${xlog}h;fi
-	${OCOMP} $< ${OFLAGS}
+#	if [ $@ = common.h ]; then $(MAKE) ${xlog}h;fi
+	${OCOMP} $< ${OFLAGS} logfile 0
 	${OCONV} $<.x
 
 clean:
-	-rm -f common.oh.log common.oh.x common.oh common.h
-	-rm -f ${xlog}oh.log ${xlog}oh.x ${xlog}oh ${xlog}h
-
-	-rm -f intern.o intern.oc.log intern.oc.x intern.c
-	-rm -f compare.o compare.oc.log compare.oc.x compare.c
+	-rm -f common.oh              common.oh.x     common.h
+	-rm -f ${xlog}oh              ${xlog}oh.x     ${xlog}h
+	-rm -f oadbgdata.oh           oadbgdata.oh.x  oadbgdata.h
+	-rm -f ${objects} ${sublogs}  ${subx}         ${subc}
+	-rm -f            main.oc.log main.oc.x       main.c
+	-rm -f oadbgdatai.oh          oadbgdatai.oh.x oadbgdatai.h
 
-	-rm -f main.o main.oc.log main.oc.x main.c
 	-rm -f ${exte} ${libname}
 
-	-rm -f oadbgdatai.oh.log oadbgdatai.oh.x oadbgdatai.oh oadbgdatai.h
-	-rm -f oadbgdata.oh.log oadbgdata.oh.x oadbgdata.oh oadbgdata.h
-
 distclean: clean
 
 test:
 	echo "Nothing"
 
 install-lib:
-	install -D ${libname} \
-		$(DESTDIR)$(prefix)/lib/${libname}
+	echo "not ready"
+#	install -D ${libname} \
+#		$(DESTDIR)$(prefix)/lib/${libname}
 
 install: all install-lib
 
--- actionswf-1.orig/oad/common.h.oh
+++ actionswf-1/oad/common.h.oh
@@ -17,8 +17,41 @@ const NineChar=0x39
 const A=0x41
 const F=0x46
 
-const mark_nothing=-1
-
 override include_sec 1
 einclude "../include/xlog.h" "../include/xlog.h.oh" #e? xlog_id is else
 include "oadbgdata.h" "oadbgdata.h.oh"
+
+const mark_nothing=-1
+
+const sprites_realloc_onepart=10*:
+#to be at least 2, for presprites_init; and 1 for sprite_done (root 0 move to final)
+
+function presprite() #presprites_size is intern
+	valuexu apreframe#1
+
+	dataxu  size#1     #same as parent, at button is extra, here are ui16 frames, copy sprites mechanism that is padded for debugger
+	valuexu preframes#1
+end
+function preframe()
+	valuexu abranch#1
+
+	wordxu size#1  ;#Count=ui16
+	valuexu strings#1
+end
+function branch()
+	dataxu *size#1
+	vdataxu *x#1
+
+	valuexu *subbranches#1
+
+	dataxu *offset#1
+	valuexu *action#1
+end
+#function string()
+#	vstrxu text#1
+
+#	valuexu branches#1
+#end
+
+const from_action=0
+const from_show=1
--- actionswf-1.orig/oad/compare.oc
+++ actionswf-1/oad/compare.oc
@@ -11,6 +11,10 @@ importx "fclose" fclose
 override include_sec 1
 include "common.h" "common.h.oh"
 
+#multithread unsafe
+valueu presprites_size#1  #same as sprites_size, but add 4 more for less calculation
+#
+
 char inter_extension_data=".data";vstr p_inter_extension_data^inter_extension_data
 function inter_extension(sv psize)
 	set psize# (\global.inter_extension_data)
@@ -38,22 +42,232 @@ function compare(ss swf_fullpath)
 	return (EXIT_FAILURE)
 end
 
-function preoadata_init(sv ppresprites)
-	set ppresprites# malloc(:)
-	sv ps;set ps ppresprites#
-	if ps!=(NULL)
-		set ps# (NULL)
-		return (EXIT_SUCCESS)
+function sprite_free(sv s,sv start)
+	sv sp;set sp s#
+	if sp!=(NULL)
+		if start!=(NULL)
+			sub s start
+			divu s :
+			call printf("\tid=%hu\n",s)
+		end
+		if sp#:sprite.aframe!=(NULL)
+			call free(sp#:sprite.aframe)
+		end
+		if sp#:sprite.frames!=(NULL)
+			sv pointer;sd end
+			set pointer sp#:sprite.frames
+			set end sp#:sprite.size
+			add end pointer
+			while pointer!=end
+				if pointer#!=(NULL)
+				end
+				incst pointer
+			end
+			call free(sp#:sprite.frames)
+		end
+		call free(sp)
+	end
+end
+
+function preoadata_init(sv ppresprites,sv psprites)
+	set ppresprites# malloc((sprites_realloc_onepart))
+	if ppresprites#!=(NULL)
+		set psprites# malloc((sprites_realloc_onepart))
+		if psprites#!=(NULL)
+			set global.presprites_size 0
+			return (EXIT_SUCCESS)
+		end
 	end
 	return (EXIT_FAILURE)
 end
-function preoadata_free(sv presprites)
+
+importx "puts" puts
+importx "printf" printf
+
+import "preframe_free" preframe_free
+
+function preoadata_free(sv presprites,sv sprites,charx log)
 	if presprites!=(NULL)
-		sv ps;set ps presprites
-		while ps#!=(NULL)
+		if sprites!=(NULL)
+			wordxu preid#1
+			if log=(TRUE)
+				set preid 0 #0root 1-FFFF sprite/button
+				call puts("presprites:")
+			end
+			add global.presprites_size presprites
+			sv ps;set ps presprites
+			sv s;set s sprites
+			while ps!=global.presprites_size
+				sv pres;set pres ps#
+				if pres!=(NULL)
+					if log=(TRUE)
+						call printf("\t%hu\n",preid)
+						dataxu frames#1;set frames pres#:presprite.size
+						divu frames :
+						call printf("\t\tframes=%hu\n",frames)
+					end
+					if pres#:presprite.apreframe!=(NULL)
+						call preframe_free(pres#:presprite.apreframe)
+					end
+					if pres#:presprite.preframes!=(NULL) #not making a template free because preframe is different than frame
+						sv pointer;set pointer pres#:presprite.preframes
+						sd end;set end pres#:presprite.size
+						add end pointer
+						while pointer!=end
+							if pointer#!=(NULL)
+							end
+							incst pointer
+						end
+						call free(pres#:presprite.preframes)
+
+						call sprite_free(s,(NULL)) #and unfinished sprites, here is after an error
+					end
+					call free(pres)
+				end
+				if log=(TRUE)
+					inc preid
+				end
+				incst ps
+				incst s
+			end
+			call free(sprites)
+			call free(presprites)
+		end
+	end
+end
+
+import "re_alloc" re_alloc
+import "preframe_init" preframe_init
+
+#                       wordxu preid
+function presprite_init(svu newpointer,sv ppresprites,sv psprites,charx type,charx ainit)
+	mult newpointer :
+	dataxu newsize#1;set newsize newpointer
+	add newsize :
+	charx ok#1
+	if global.presprites_size<^newsize   ##else example: preid 0 after a sprite preid 2
+		set ok re_alloc(ppresprites,global.presprites_size,newsize)
+		if ok!=(EXIT_SUCCESS)
+			return (EXIT_FAILURE)
+		end
+		set ok re_alloc(psprites,global.presprites_size,newsize) #and for sprites, but before sprite_done, with a preid
+		if ok!=(EXIT_SUCCESS)
+			return (EXIT_FAILURE)
+		end
+		set global.presprites_size newsize
+	end
+	sv ps;sv pf
+	sv s;sv f
+	add newpointer ppresprites#
+	if newpointer#!=(NULL) #already opened this sprite
+		if type=(from_show)
+			set ps newpointer#
+			set pf ps#:presprite.preframes
+			set newsize ps#:presprite.size
+			add newsize :
+			set ok re_alloc(#ps#:presprite.preframes,ps#:presprite.size,newsize)
+			if ok!=(EXIT_SUCCESS)
+				return (EXIT_FAILURE)
+			end
+			set ps#:presprite.size newsize
+
+			sub newpointer ppresprites#
+			add newpointer psprites#
+			set s newpointer# #is not done and moved, normally
+			set f s#:sprite.frames
+			set ok re_alloc(#s#:sprite.frames,s#:sprite.size,newsize)
+			if ok!=(EXIT_SUCCESS)
+				return (EXIT_FAILURE)
+			end
+			set s#:sprite.size newsize  ##set this size at move time? still extra code to reset ps size if not ok at s
+		else
+			if ainit=(xlog_ainit_true) #ainit/button , here is multiple action call, not after oalt
+			end
+		end
+		return (EXIT_SUCCESS)
+	end
+	set ps malloc(\presprite\)
+	if ps!=(NULL)
+		set newpointer# ps
+		set ps#:presprite.apreframe (NULL)
+		set ps#:presprite.preframes (NULL)
+		if type=(from_action)
+			if ainit=(xlog_ainit_true) #ainit/button
+				set ps#:presprite.apreframe preframe_init()
+				if ps#:presprite.apreframe=(NULL)
+					return (EXIT_FAILURE)
+				end
+			end
+		end
+		set ps#:presprite.preframes malloc((sprites_realloc_onepart))
+		set pf ps#:presprite.preframes
+		if pf!=(NULL)
+			set pf# (NULL)
+			set ps#:presprite.size :
+
+			#and for sprites
+			set s malloc(\sprite\)
+			if s!=(NULL)
+				sub newpointer ppresprites#
+				add newpointer psprites#
+				set newpointer# s
+				set s#:sprite.aframe (NULL)
+				set s#:sprite.frames (NULL)
+				if type=(from_action)
+					if ainit=(xlog_ainit_true) #ainit/button
+						set s#:sprite.aframe malloc((\frame\))
+						if s#:sprite.aframe=(NULL)
+							return (EXIT_FAILURE)
+						end
+					end
+				end
+				set s#:sprite.frames malloc((sprites_realloc_onepart))
+				set f s#:sprite.frames
+				if f!=(NULL)
+					set f# (NULL)
+					set s#:sprite.size :
+
+					if type=(from_show)
+						incst pf
+						set pf# (NULL)
+						add ps#:presprite.size :
+
+						incst f
+						set f# (NULL)
+						add s#:sprite.size :
+					end
+					return (EXIT_SUCCESS)
+				end
+			end
+		end
+	end
+	return (EXIT_FAILURE)
+end
+
+function presprite_done(sv sprites,wordxu preid,wordxu id,sv data)
+	sv pointer=:
+	mult pointer preid
+	if pointer<^global.presprites_size  ##can be a done with no action/show
+		add pointer sprites
+		if pointer#!=(NULL)     #same
+			sv destination=:
+			mult destination id
+			add destination :   #for size comparison
+			if destination>^data#:oadata.sprites_size
+				charx ok#1
+				set ok re_alloc(#data#:oadata.sprites,data#:oadata.sprites_size,destination)
+				if ok!=(EXIT_SUCCESS)
+					return (EXIT_FAILURE)
+				end
+				set data#:oadata.sprites_size destination
+			end
+			sub destination :
+			add destination data#:oadata.sprites
+			set destination# pointer#
+			set pointer# (NULL)
 		end
-		call free(presprites)
 	end
+	return (EXIT_SUCCESS)
 end
 
 entryraw global()
--- /dev/null
+++ actionswf-1/oad/frame.oc
@@ -0,0 +1,66 @@
+
+format elfobj64
+
+importx "realloc" realloc
+
+override include_sec 1
+include "common.h" "common.h.oh"
+
+function re_alloc(sv pmem,svu size,valueu newsize) #big at lines
+	valueu currentmaxsize#1;set currentmaxsize size
+	divu currentmaxsize ((sprites_realloc_onepart))
+	mult currentmaxsize ((sprites_realloc_onepart))
+	add currentmaxsize ((sprites_realloc_onepart))
+	if newsize>^currentmaxsize
+		set currentmaxsize newsize
+		divu currentmaxsize ((sprites_realloc_onepart))
+		mult currentmaxsize ((sprites_realloc_onepart))
+		add currentmaxsize ((sprites_realloc_onepart))
+		sv newmem;set newmem realloc(pmem#,currentmaxsize)
+		if newmem=(NULL);return (EXIT_FAILURE);end
+		set pmem# newmem
+	end
+	add size pmem#
+	add newsize pmem#
+	while size!=newsize
+		set size# (NULL)
+		add size :
+	end
+	return (EXIT_SUCCESS)
+end
+
+importx "malloc" malloc
+importx "free" free
+
+function preframe_init()
+	sv pf;set pf malloc((\preframe\))
+	if pf!=(NULL)
+		valueu bra#1
+		set bra malloc((\branch\))
+		if bra!=(NULL)
+			sv strings
+			set strings malloc((sprites_realloc_onepart))
+			if strings!=(NULL)
+				set pf#:preframe.abranch bra
+				set pf#:preframe.strings strings
+				set pf#:preframe.size 0
+				return pf
+			end
+			call free(bra)
+		end
+		call free(pf)
+	end
+	return (NULL)
+end
+function preframe_free(sv pf)
+	call free(pf#:preframe.abranch)
+	sv strings;set strings pf#:preframe.strings
+	sv s;set s strings
+	sv end;set end pf#:preframe.size
+	mult end :
+	add end s
+	while s!=end
+	end
+	call free(strings)
+	call free(pf)
+end
--- actionswf-1.orig/oad/intern.oc
+++ actionswf-1/oad/intern.oc
@@ -11,6 +11,10 @@ importx "malloc" malloc
 importx "fread" fread
 importx "fclose" fclose
 
+#multithread unsafe
+dataxu xoffset#1
+#
+
 function fcontent(sd path,sv psize)
 	sd f;set f fopen(path,"rb")
 	if f!=(NULL)
@@ -99,7 +103,6 @@ function memhex_parse_withinc(ss start,s
 	return a
 end
 
-dataxu xoffset#1
 function newbranch(sv px,sv pxx)
 	sd xx;set xx pxx#
 	sd branchsize;set branchsize xx#
@@ -149,21 +152,40 @@ function actionrow(ss log,sd end,sv px,s
 		end
 	end
 end
-function loop(ss log,sd x,sd xx,sd logsize)
+
+import "presprite_init" presprite_init
+import "presprite_done" presprite_done
+
+function loop(ss log,sd x,sd xx,sd logsize,sv ppresprites,sv psprites,sv data)
 	add logsize log
 	if log!=logsize  ##else no action sprites/shows
 		set global.xoffset 0
 		sd next
 		ss p;set p memnl(log,#next)
 		whiletrue
-			#[log,p)  #preid
+			wordxu preid#1
+			set preid memdec(log,p) #[log,p) ui16
 			set log next
 
+			charx ok#1
 			set p memnl(log,#next)
 			if log=p
 				set log next
 				# empty: show/done
 				set p memnl(log,#next)
+				if log=p ##show ui16
+					set ok presprite_init(preid,ppresprites,psprites,(from_show))
+					if ok!=(EXIT_SUCCESS)
+						return (EXIT_FAILURE)
+					end
+				else #done, here for sprite, already opened or ignore it (no action/show)
+					wordxu id#1
+					set id memdec(log,p) #[log,p) ui16
+					set ok presprite_done(psprites#,preid,id,data)
+					if ok!=(EXIT_SUCCESS)
+						return (EXIT_FAILURE)
+					end
+				end
 				set log next
 				if log=logsize
 					return (EXIT_SUCCESS)
@@ -171,8 +193,14 @@ function loop(ss log,sd x,sd xx,sd logsi
 				set p memnl(log,#next)
 			else
 				#ainit
+				charx ainit#1;set ainit memdec(log,p) #[log,p) 0/1
 				set log next
 
+				set ok presprite_init(preid,ppresprites,psprites,(from_action),ainit)
+				if ok!=(EXIT_SUCCESS)
+					return (EXIT_FAILURE)
+				end
+
 				#linesnr
 				set p memnl(log,#next)
 				value linesnr#1;set linesnr memdec(log,p)
@@ -241,19 +269,17 @@ function oadata_init(sv poadata)
 	set poadata# malloc(\oadata\)
 	sv a;set a poadata#
 	if a!=(NULL)
-		set a#:oadata.sprites malloc(:)
-		sv s;set s a#:oadata.sprites
-		if s!=(NULL)
-			set s# (NULL)
+		set a#:oadata.sprites malloc((sprites_realloc_onepart))
+		if a#:oadata.sprites!=(NULL)
+			set a#:oadata.sprites_size 0
 			set a#:oadata.marks malloc(\mark\)
 			sd m;set m a#:oadata.marks
 			if m!=(NULL)
 				set m#:mark.prev (mark_nothing)
 				set m#:mark.next (mark_nothing)
-				set a#:oadata.functions malloc(:)
-				sv f;set f a#:oadata.functions
-				if f!=(NULL)
-					set f# (NULL)
+				set a#:oadata.functions malloc((sprites_realloc_onepart))
+				if a#:oadata.functions!=(NULL)
+					set a#:oadata.functions_size 0
 					return (EXIT_SUCCESS)
 				end
 			end
--- actionswf-1.orig/oad/main.oc
+++ actionswf-1/oad/main.oc
@@ -15,10 +15,11 @@ import "inter" inter
 import "oadata_init" oadata_init
 import "preoadata_init" preoadata_init
 import "preoadata_free" preoadata_free
+import "presprite_done" presprite_done
 
 #functions are returning 0(long) on success and != on failure (EXIT_FAILURE or another != (from extern calls))
 
-functionx oadata_make(ss swf_fullpath,sv poadata)
+functionx oadata_make(ss swf_fullpath,sv poadata,charx log)
 	set poadata# (NULL)
 	sd size;set size strlen(swf_fullpath)
 	char logext=".log";vstr slogext^logext
@@ -43,14 +44,17 @@ functionx oadata_make(ss swf_fullpath,sv
 				if xxcontent!=(NULL)
 					set exit oadata_init(poadata)
 					if exit=(EXIT_SUCCESS)
-						sv presprites;set exit preoadata_init(#presprites)
+						sv presprites
+						sv sprites   ;#these will be filled before sprite done
+						set exit preoadata_init(#presprites,#sprites)
 						if exit=(EXIT_SUCCESS)
-							set exit loop(logcontent,xcontent,xxcontent,logsize)
+							set exit loop(logcontent,xcontent,xxcontent,logsize,#presprites,#sprites,poadata#)
 							if exit=(EXIT_SUCCESS)
+								call presprite_done(sprites,0,0,poadata#) #root has not a done(0 to 0) in .log
 								set exit inter(swf_fullpath)
 							end
 						end
-						call preoadata_free(presprites)
+						call preoadata_free(presprites,sprites,log)
 					end
 					if exit!=(EXIT_SUCCESS)
 						call oadata_free(poadata#,(FALSE)) #there are multiple mallocs in outinit
@@ -115,12 +119,25 @@ end
 importx "puts" puts
 importx "printf" printf
 
+import "sprite_free" sprite_free
+
 functionx oadata_free(sv data,charx log)
 	if data!=(NULL)
 		sv sprites;set sprites data#:oadata.sprites
 		if sprites!=(NULL)
 			sv s;set s sprites
-			while s#!=(NULL)
+			sv end;set end data#:oadata.sprites_size
+			add end s
+			if log=(TRUE)
+				call puts("sprites:")
+			end
+			while s!=end
+				if log=(FALSE)
+					call sprite_free(s,(NULL))
+				else
+					call sprite_free(s,sprites)
+				end
+				incst s
 			end
 			call free(sprites)
 
@@ -129,7 +146,7 @@ functionx oadata_free(sv data,charx log)
 				if log=(TRUE)
 					call puts("mark struct:")
 					sd m;set m marks
-					datau i=0
+					dataxu i#1;set i 0
 					whiletrue
 						datax next#1;set next m#:mark.next
 						call printf("\t%u\n\t\t%d\n\t\t%d\n",i,m#:mark.prev,next)
@@ -142,12 +159,14 @@ functionx oadata_free(sv data,charx log)
 				end
 				call free(marks)
 
-				sv fns;set fns data#:oadata.functions
-				if fns!=(NULL)
-					sv f;set f fns
-					while f#!=(NULL)
+				sv functions;set functions data#:oadata.functions
+				if functions!=(NULL)
+					set s functions
+					set end data#:oadata.functions_size
+					add end s
+					while s!=end
 					end
-					call free(fns)
+					call free(functions)
 				end
 			end
 		end
--- actionswf-1.orig/oad/md
+++ actionswf-1/oad/md
@@ -1,2 +1,2 @@
 
-compilerflags="-g" linkerflags=" " make $@
+compilerflags="-g" linkerflags=" " make -j4 $@
--- actionswf-1.orig/oad/oadbgdata.h.oh
+++ actionswf-1/oad/oadbgdata.h.oh
@@ -1,19 +1,25 @@
 
 function oadata()
+	dataxu sprites_size#1 ;#1(root)+ui16 *: ,for free
 	valuexu sprites#1
+
 	valuexu marks#1
+
+	dataxu functions_size#1  #anyway is using a counter at appending (preferred instead of null), DefineFunction is at minimum 8 like 64 :, anyway swfsize is ui32(that minus some tags)
 	valuexu functions#1
 end
-#function sprite()
-#	valuexu frame#1
-#	valuexu frames#1
-#end
-#function frame()
-#	valueu total#1
-#	valuexu lines#1
-#end
+function sprite()
+	valuexu aframe#1
+
+	dataxu size#1    #same as presprite. for free
+	valuexu frames#1
+end
+function frame()
+	valueu *total#1    #big blank lines group
+	valuexu *lines#1
+end
 #function line()
-#	valueu index#1
+#	valueu index#1    #same as lines total
 #	valuexu actions#1
 #end
 #function action()
@@ -24,25 +30,3 @@ function mark()
 	datax prev#1
 	datax next#1
 end
-
-#function presprite()
-#	valuexu preframe#1
-#	valuexu preframes#1
-#end
-#function preframe()
-#	valuexu branch#1
-#	valuexu strings#1
-#end
-#function branch()
-#	dataxu size#1
-#	vdataxu x#1
-#	valuexu subbranches#1
-
-#	dataxu offset#1
-#	valuexu action#1
-#end
-#function string()
-#	vstrxu text#1
-
-#	valuexu branches#1
-#end
--- actionswf-1.orig/src/Makefile
+++ actionswf-1/src/Makefile
@@ -72,6 +72,9 @@ link:
 	fi
 #on 64 is mingw-w64-x86-64-dev
 
+#next phony will += , tested
+.PHONY: link
+
 else
 OFLAGS += underscore_pref 1
 #else ifeq (${conv_64},1)
@@ -156,7 +159,7 @@ install: all install-lib
 uninstall:
 	-rm -f $(DESTDIR)$(prefix)/lib/${libname}
 
-.PHONY: all install install-lib clean distclean uninstall test
+.PHONY: all compile ounused def install install-lib clean distclean uninstall test
 
 .NOTPARALLEL:
 
--- actionswf-1.orig/src/action.e.oc
+++ actionswf-1/src/action.e.oc
@@ -16,7 +16,7 @@ import "actionf_local" actionf_local
 functionX action(ss ac)
 valuex bp#1;base bp;call ebase(bp)
 #ss ac       actionscript string to be parsed
-	call is_ainit((FALSE))
+	call is_ainit((xlog_ainit_false))
 	callg action_local(ac)
 endfunction
 #see at part_done functionX action_init(ss ac)
@@ -25,7 +25,7 @@ base action.bp;call ebase(action.bp)
 #ss buffer   the buffer where to sprintf the format and the arguments
 #ss format   the format
 #...         % arguments here
-	call is_ainit((FALSE))
+	call is_ainit((xlog_ainit_false))
 	callg actionf_local(#buffer)
 endfunction
 #see at part_done functionXx actionf_init(ss buffer,ss *format)
@@ -45,11 +45,11 @@ functionX action_sprite(sd sprite,ss act
 base action.bp;call ebase(action.bp)
 #sd sprite    sprite id
 #ss actions   same as action
-	call is_ainit((FALSE))
+	call is_ainit((xlog_ainit_false))
 	callg action_sprite_base(sprite,actions,(TRUE))
 endfunction
 functionX action_init_sprite(sd sprite,ss actions)
-	call is_ainit((TRUE))
+	call is_ainit((xlog_ainit_true))
 	callg action_sprite_base(sprite,actions,(TRUE))
 end
 import "actionf_sprite_local" actionf_sprite_local
@@ -58,10 +58,10 @@ base action.bp;call ebase(action.bp)
 #sd sprite    sprite id
 #ss buffer    same as actionf
 #ss format    same as actionf
-	call is_ainit((FALSE))
+	call is_ainit((xlog_ainit_false))
 	callg actionf_sprite_local(sprite,#buffer)
 endfunction
 functionXx actionf_init_sprite(sd sprite,ss buffer,ss *format)
-	call is_ainit((TRUE))
+	call is_ainit((xlog_ainit_true))
 	callg actionf_sprite_local(sprite,#buffer)
 end
--- actionswf-1.orig/src/alt.oc
+++ actionswf-1/src/alt.oc
@@ -71,7 +71,7 @@ function alt_action_base(sd orig_action,
 		whiletrue
 			if has_frames=(TRUE)
 				sd ai;set ai ainit()
-				if ai=(FALSE)
+				if ai=(xlog_ainit_false)
 					sw p
 					#if preid!=0
 					set p swf_sprite_frames_pointer(preid)
--- actionswf-1.orig/src/storage.oc
+++ actionswf-1/src/storage.oc
@@ -332,7 +332,7 @@ function swf_actionblock(sd proc,sd arg,
 		sd p_poolid;setcall p_poolid actionpoolid();set p_poolid# id
 		sd p_poolrootid;setcall p_poolrootid actionpoolid_root();set p_poolrootid# id
 
-		call struct_ids_action_set(id,(FALSE)) #see at part_done call struct_ids_action_set(id,(TRUE))
+		call struct_ids_action_set(id,(xlog_ainit_false)) #see at part_done call struct_ids_action_set(id,(TRUE))
 		import "pool_read" pool_read
 		callg pool_read(id,0)
 
@@ -347,12 +347,12 @@ function swf_actionblock(sd proc,sd arg,
 		set pframes swf_sprite_frames_pointer(id)
 		set frames word_arg_to_stack(pframes)
 
-		#call is_ainit((TRUE)) this is not similiar with DoAction, has spriteid and only once per swf, and ffdec is forgetting the sprite id
+		#call is_ainit((xlog_ainit_true)) this is not similiar with DoAction, has spriteid and only once per swf, and ffdec is forgetting the sprite id
 		# and, at ruffle, can add in multiple frames, but are executed all at once before any frames, and "this" is level0 for all
 		#then, this at done
 
 		sd sz
-		call is_ainit((FALSE))
+		call is_ainit((xlog_ainit_false))
 		set sz done_action(id,frames)
 
 		if arg=(from_show) #example: two action() and one show here
@@ -409,7 +409,7 @@ endfunction
 function new_sprite_id()
 	sd id
 	setcall id def_mem()
-	call struct_ids_action_set(id,(FALSE)) #at button and normal sprite
+	call struct_ids_action_set(id,(xlog_ainit_true)) #at button and normal sprite
 	return id
 endfunction
 
--- actionswf-1.orig/src/swf.e.oc
+++ actionswf-1/src/swf.e.oc
@@ -426,12 +426,12 @@ base swf_new.bp;call ebase(swf_new.bp)
     call swf_mem_add(mem,size)
 
 	#if is, add DoInitAction in timeline
-	call is_ainit((TRUE))
+	call is_ainit((xlog_ainit_true))
 	import "done_action_one" done_action_one
 	call done_action_one(spriteid,id)
 	call free_sprite_id_actions(spriteid)
 
-	call is_ainit((FALSE))
+	call is_ainit((xlog_ainit_false))
 	call free_sprite_id(spriteid,id)
 
     return id
@@ -444,10 +444,10 @@ base swf_new.bp;call ebase(swf_new.bp)
     sd id
     setcall id new_sprite_id()
 	import "pool_read" pool_read
-	call pool_read(id,0)
-	import "struct_ids_action_set" struct_ids_action_set
-	call struct_ids_action_set(id,(TRUE))
 	call pool_read(id,-1)
+	import "struct_ids_action_set" struct_ids_action_set
+	call struct_ids_action_set(id,(xlog_ainit_false))
+	call pool_read(id,0)
     call swf_mem((mem_exp_change),id)
     sd reserve;#set later
     call swf_mem_add(#reserve,2)
--- actionswf-1.orig/src/util.oc
+++ actionswf-1/src/util.oc
@@ -523,9 +523,9 @@ function struct_ids(sd proc,sd id)
 			sub pointer :
 			if pointer#!=(NULL)
 				call free(pointer#)
-				call is_ainit((FALSE)) #is first, at button is the only one
+				call is_ainit((xlog_ainit_false)) #at root is the only one
 				call struct_ids_free(counter)
-				call is_ainit((TRUE))
+				call is_ainit((xlog_ainit_true))  #at button is the only one
 				call struct_ids_free(counter)
 			endif
 		endwhile
@@ -583,7 +583,7 @@ function struct_ids_action(sd proc,sd id
 	sd v
 	vdatax action_structures#max_structures
 	vdatax action_structures_init#max_structures
-	if is_ainit.b=(FALSE)
+	if is_ainit.b=(xlog_ainit_false)
 		set v struct_ids_expand(proc,id,#action_structures)
 	else
 		set v struct_ids_expand(proc,id,#action_structures_init)
@@ -594,7 +594,7 @@ function struct_ids_actionpool(sd proc,s
 	sd v
 	vdatax action_structures#max_structures
 	vdatax action_structures_init#max_structures
-	if is_ainit.b=(FALSE)
+	if is_ainit.b=(xlog_ainit_false)
 		set v struct_ids_expand(proc,id,#action_structures)
 	else
 		set v struct_ids_expand(proc,id,#action_structures_init)
@@ -605,7 +605,7 @@ function struct_ids_actionpool_filter(sd
 	sd v
 	vdatax action_structures#max_structures
 	vdatax action_structures_init#max_structures
-	if is_ainit.b=(FALSE)
+	if is_ainit.b=(xlog_ainit_false)
 		set v struct_ids_expand(proc,id,#action_structures)
 	else
 		set v struct_ids_expand(proc,id,#action_structures_init)
--- actionswf-1.orig/tests/.expected/data.txt
+++ actionswf-1/tests/.expected/data.txt
@@ -1,3 +1,14 @@
+presprites:
+	0
+		frames=2
+	2
+		frames=3
+	3
+		frames=1
+sprites:
+	id=0
+	id=2
+	id=8
 mark struct:
 	0
 		-1
--- actionswf-1.orig/tests/data/a.oc
+++ actionswf-1/tests/data/a.oc
@@ -10,7 +10,7 @@ entry main(data srgc,sv argv)
 incst argv
 ss path;set path argv#
 sd oadata
-sd a;set a oadata_make(path,#oadata)
+sd a;set a oadata_make(path,#oadata,1)
 if a!=0;return a;end
 call oadata_free(oadata,1)
 set a oadata_ok(path)
--- actionswf-1.orig/tests/ffdec/c
+++ actionswf-1/tests/ffdec/c
@@ -1 +1,2 @@
 rm -f a.o a.out a.swf a.swf.log a.swf.orig
+rm -fr a
