Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+103) xenial; urgency=medium
 .
   * == to =
Author: bc <bc@bc-Type1ProductConfigId>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2023-11-22

--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -121,7 +121,7 @@
 	<br>
 	<a class="code">
 	Const TRUE=1<br>
-	if 20==(ConstantValue+11)<br>
+	if 20=(ConstantValue+11)<br>
 &emsp;	set	x	20<br>
 	endif<br>
 	Const x=3$2<br>
@@ -762,7 +762,7 @@
 	The language has <b>if-elseif-else</b> conditions that must by closed with <b>endif-endelseif-endelse</b> commands.
 	The condition operators are:
 	<br>
-	Equal: ==
+	Equal: =
 	<br>
 	Not Equal: !=
 	<br>
@@ -792,7 +792,7 @@
         If a&#62;=b<br>
 &emsp;			Set c a<br>
 &emsp;			#This will not be executed<br>
-        ElseIf a==b<br>
+        ElseIf a=b<br>
 &emsp;			Set c a<br>
 &emsp;			#This will not be executed<br>
         Else<br>
@@ -821,7 +821,7 @@
 	sd b=0<br>
 	while b&lt;a<br>
 &emsp;	inc b<br>
-&emsp;	if b==1<br>
+&emsp;	if b=1<br>
 &emsp;&emsp;	continue<br>
 &emsp;	endif<br>
 &emsp;	break<br>
@@ -953,7 +953,19 @@
 </table>
 <table id="selection_table">
 	<tr><td rowspan=2>Xfile_action2</td><td class="green" rowspan=2>VF</td><td rowspan=2>Xfile_action2_*</td><td class="green">A</td></tr>
-	<tr>                                                                                                     <td>Xfile_arg_call</td> <td class="green">C</td><td class="blue">nr_of_args</td><td class="green">{A}</td></tr>
+	<tr>                                                                                                     <td>Xfile_arg_call</td><td class="green">CL</td></tr>
+</table>
+<table id="selection_table">
+	<tr><td>Xfile_call</td>  <td rowspan=2>Xfile_call_*</td><td class="green">CL</td></tr>
+	<tr><td>Xfile_callex</td>                               <td class="green">C</td><td class="green">VF</td><td class="green">A</td></tr>
+</table>
+<table id="selection_table">
+	<tr><td>Xfile_if</td>      <td class="green">CD</td></tr>
+	<tr><td>Xfile_else</td></tr>
+	<tr><td>Xfile_while</td>   <td class="green">CD</td></tr>
+	<tr><td>Xfile_break</td></tr>
+	<tr><td>Xfile_continue</td></tr>
+	<tr><td>Xfile_condend</td></tr>
 </table>
 <br>Table A:
 <table id="selection_table">
@@ -965,9 +977,13 @@
 <table id="selection_table">
 	<tr><td>Xfile_arg_call_*</td><td class="red">var/fn</td></tr>
 </table>
-<br>Table CR:
+<br>Table CD:
+<table id="selection_table">
+	<tr><td class="green">A</td><td>Xfile_cond_*</td><td class="green">A</td></tr>
+</table>
+<br>Table CL:
 <table id="selection_table">
-	<tr><td>Xfile_call_*</td><td class="green">C</td></tr>
+	<tr><td class="green">C</td><td class="blue">nr_of_args</td><td class="green">{A}</td></tr>
 </table>
 <br>Table D:
 <table id="selection_table">
@@ -1012,7 +1028,7 @@
 	<tr><td>Xfile_arg_varfn_dot_no</td><td class="green">V</td></tr>
 	<tr><td class="green">VFD</td></tr>
 </table>
-<br><div class="green">A C CR D DT <sup-r>f</sup-r> N <sup-r>s</sup-r> V VF VFC VFD VFD*</div>
+<br><div class="green">A C CD CL D DT <sup-r>f</sup-r> N <sup-r>s</sup-r> V VF VFC VFD VFD*</div>
 <h3><a name="otheroperations">XVI. Other operations</a></h3>
 <p>
 	Other commands that comes with the language.
--- ocompiler-1.orig/old
+++ ocompiler-1/old
@@ -1,3 +1,4 @@
-File ID: 1O9NYDj0G-qGseaWXAWoIShjVm6cXbQzO
+File ID: 1Qbm2E_uMi85Gq1sJ1Yhc1CYstN8fleac
 [{'id': 'anyoneWithLink', 'type': 'anyone', 'kind': 'drive#permission', 'role': 'reader', 'allowFileDiscovery': False}, {'id': '04979898612943849512', 'type': 'user', 'kind': 'drive#permission', 'role': 'owner'}]
-Found file: ocompiler-1-5+98.x86_64.rpm, 1O9NYDj0G-qGseaWXAWoIShjVm6cXbQzO, 2023-11-13T13:29:55.208Z, https://drive.google.com/uc?id=1O9NYDj0G-qGseaWXAWoIShjVm6cXbQzO&export=download
+Found file: ocompiler-1-5+100.x86_64.rpm, 1Qbm2E_uMi85Gq1sJ1Yhc1CYstN8fleac, 2023-11-17T15:39:47.661Z, https://drive.google.com/uc?id=1Qbm2E_uMi85Gq1sJ1Yhc1CYstN8fleac&export=download
+Found file: ocompiler-1-5+98.x86_64.rpm, 1bNGKHelihqwRjqxpb43YwfcYlx1J_L78, 2023-11-17T15:27:56.867Z, https://drive.google.com/uc?id=1bNGKHelihqwRjqxpb43YwfcYlx1J_L78&export=download
--- ocompiler-1.orig/ostrip/after.s
+++ ocompiler-1/ostrip/after.s
@@ -22,10 +22,10 @@ const sym__to_shndx=datasize+charize+cha
 			add sym (sym__to_shndx)
 			char d={dataind,0}
 			sd cmp;setcall cmp memcmp(sym,#d,2)
-			if cmp==0
+			if cmp=0
 				sub sym (charize+charize)
 				char info=STB_GLOBAL*0x10|STT_NOTYPE   ;#global seems to always be here but there is too much code to separate
-				if info==sym#
+				if info=sym#
 				#this is the aftercall,get string pointer from strtab
 					sub sym (datasize)
 					incst obj
@@ -62,7 +62,7 @@ function aftercall_replace(sv psym,sv ps
 		add end sec
 		while sec!=end
 			#name pos is first
-			if sec#==pos
+			if sec#=pos
 				add sec (sym__to_value)
 				set sec#v^ aoffset
 				call verbose((verbose_count))
@@ -92,7 +92,7 @@ function aftercall_in_objects(sv objects
 			set end end#
 			add end sympos
 			while sympos!=end
-				if sympos#==pos
+				if sympos#=pos
 					break
 				endif
 				add sympos (sym_size)
--- ocompiler-1.orig/ostrip/file.s
+++ ocompiler-1/ostrip/file.s
@@ -50,12 +50,12 @@ function get_file(sd name,sv p_file,sv s
 		sd sz=4
 		sd sign;call read(file,#sign,sz)
 		sd c;setcall c memcmp(#sign,#elf64_ehd_e_ident_sign,sz)
-		if c==0
+		if c=0
 			call seekc(file,(after_sign_to_machine))
 			sd wsz=2
 			sd w;call read(file,#w,wsz)
 			setcall c memcmp(#w,#elf64_ehd_e_machine,wsz)
-			if c==0
+			if c=0
 				call seekc(file,(after_machine_to_shoff))
 				sd offset;call read(file,#offset,:)
 				call seekc(file,(after_shoff_to_shentsize))
@@ -104,7 +104,7 @@ function get_file(sd name,sv p_file,sv s
 					#next at frees
 					set p_secN# (NULL)  #this is extra only at first
 					setcall size get_section_many(file,offset,end,shentsize,pnrsec#,p_secN)
-					if p_secN#==(NULL)
+					if p_secN#=(NULL)
 						return return_value
 					endif
 					add secN :
@@ -192,7 +192,7 @@ function get_section_many(sd file,sd off
 	while offset!=end
 		#the sh64_name is first
 		datax offs#1;call read(file,#offs,(datasize))
-		if offs==nrsec
+		if offs=nrsec
 			sd sz;setcall sz get_section(file,offset,p_sec)
 			return sz   ##it's in use at rels,syms and can verify errors at data/text . and also at data/text
 		endif
@@ -217,7 +217,7 @@ function get_section(sd file,sd offset,s
 	call seeks(file,off)
 	sd mem;setcall mem alloc(size)
 	sd readed;setcall readed fread(mem,1,size,file)
-	if readed==size
+	if readed=size
 		set pmem# mem
 		return size
 	endif
@@ -231,7 +231,7 @@ function get_section_item(sd file,sd off
 	while offset!=end
 		#the sh64_name is first
 		datax offs#1;call read(file,#offs,(datasize))
-		if offs==p_in_out#d^
+		if offs=p_in_out#d^
 			set p_in_out# itemoff
 			call get_section_loc(file,offset,p_in_out)
 			ret
--- ocompiler-1.orig/ostrip/obj.s
+++ ocompiler-1/ostrip/obj.s
@@ -146,7 +146,7 @@ function write_symtab_offset(sd file,sd
 		while offset!=end
 			#the sh64_name is first
 			datax offs#1;call read(file,#offs,(datasize))
-			if offs==nr
+			if offs=nr
 				sd off=sh64_addr_to_offset
 				call get_section_loc(file,offset,#off)
 				sd fout;setcall fout fopen(#main.s3o,"wb")
--- ocompiler-1.orig/ostrip/ostrip.s
+++ ocompiler-1/ostrip/ostrip.s
@@ -156,7 +156,7 @@ if argc>=(1+3)  #0 is all the time
 		if frees.execdynsym!=(NULL)
 			sd bool;setcall bool aftercall_replace(#frees.execdynsym,#frees.execdynstr,acall,datavaddr)
 			#it is not in all cases here (even at shared)
-			if bool==(TRUE)
+			if bool=(TRUE)
 				call write_sec(".dynsym",frees.execdynsym,frees.execdynsymsize)
 			endif
 		endif
--- ocompiler-1.orig/ostrip/rel.s
+++ ocompiler-1/ostrip/rel.s
@@ -55,9 +55,9 @@ function reloc_sec(sv object,sd doffset,
 
 		sv cursor;set cursor pointer
 		incst cursor
-		if cursor#d^==(R_X86_64_64)
+		if cursor#d^=(R_X86_64_64)
 			add cursor (datasize)
-			if cursor#d^==(dataind)
+			if cursor#d^=(dataind)
 				add cursor (datasize)
 				sv addend;set addend cursor#
 				if addend>=voffset_obj
@@ -83,9 +83,9 @@ function reloc_item(sv object,sd index,s
 	while pointer!=end
 		sv cursor;set cursor pointer
 		incst cursor
-		if cursor#d^==(R_X86_64_64)
+		if cursor#d^=(R_X86_64_64)
 			add cursor (datasize)
-			if cursor#d^==index
+			if cursor#d^=index
 				sv rel_offset;set rel_offset pointer#
 				add rel_offset soffset
 				set rel_offset# replacement
--- ocompiler-1.orig/ostrip/reldyn.s
+++ ocompiler-1/ostrip/reldyn.s
@@ -7,12 +7,12 @@ function reloc_dyn(sd datavaddrstart,sd
 	add end pointer
 	sd start
 	while pointer!=end
-		if pointer#==(R_X86_64_64)
+		if pointer#=(R_X86_64_64)
 			set start pointer
 			setcall pointer reloc_dyn_sort(pointer,end,(R_X86_64_64),0)
 			call reloc_iteration(start,pointer,datavaddrstart,datavaddrend,-rel_to_type)
 			call verbose((verbose_flush))
-		elseif pointer#==(R_X86_64_RELATIVE)
+		elseif pointer#=(R_X86_64_RELATIVE)
 			#sort by addend then by offset to let at offset, at start probably is at offset but who cares
 			set start pointer
 			#by addend
--- ocompiler-1.orig/ostrip/throwless.s
+++ ocompiler-1/ostrip/throwless.s
@@ -68,8 +68,8 @@ function verbose(sd action)
 	datax a#1
 	const ptrverbose^a
 	data n=0     ;#only in one ocomp section
-	if a==0
-		if action==(verbose_count)
+	if a=0
+		if action=(verbose_count)
 			inc n
 		else
 		#if action==(verbose_flush)
@@ -88,7 +88,7 @@ function shnames_find(ss mem,sd end,sd s
 	sd start;set start mem
 	while mem!=end
 		sd cmp;setcall cmp strcmp(mem,str)
-		if cmp==0
+		if cmp=0
 			sub mem start
 			return mem
 		endif
--- ocompiler-1.orig/ounused/const.s
+++ ocompiler-1/ounused/const.s
@@ -10,7 +10,7 @@ function incrementfiles()
 	sd cursor%levels_dp
 	set cursor cursor#
 	sd pf
-	if cursor==0
+	if cursor=0
 		set pf (NULL)
 	else
 		setcall pf working_file()
--- ocompiler-1.orig/ounused/files.s
+++ ocompiler-1/ounused/files.s
@@ -12,12 +12,12 @@ function fileentry_add(sd full,sd len)
 	sd ent
 	add size len
 	setcall er malloc_throwless(#ent,size)
-	if er==(NULL)
+	if er=(NULL)
 		sd init
 		set init ent
 		#
 		setcall er fileentry_init(ent)
-		if er==(NULL)
+		if er=(NULL)
 			add ent (size_conts)
 			set ent# len
 			add ent (dword)
@@ -27,7 +27,7 @@ function fileentry_add(sd full,sd len)
 			sd previous_file
 			setcall previous_file incrementfiles()
 			setcall er ralloc_throwless(fls,:)
-			if er==(NULL)
+			if er=(NULL)
 				sd offset=-:
 				sd mem%files_dp
 				add offset mem#
@@ -79,7 +79,7 @@ function fileentry_exists(sd s)
 	while p!=fls
 		sd b
 		setcall b fileentry_compare(p#,s,sz)
-		if b==0
+		if b=0
 			call skip_set()
 			#add to previous declared
 			sd wf;setcall wf working_file()
--- ocompiler-1.orig/ounused/inits.s
+++ ocompiler-1/ounused/inits.s
@@ -9,7 +9,7 @@ function allocs()
 	#
 	sv cwd%cwd_p
 	setcall cwd# get_current_dir_name()
-	if cwd#==(NULL)
+	if cwd#=(NULL)
 		call erExit("get_current_dir_name error")
 	endif
 	sd size=:
--- ocompiler-1.orig/ounused/loop.s
+++ ocompiler-1/ounused/loop.s
@@ -30,14 +30,14 @@ function log_file(ss file)
 			else
 				sd e
 				setcall e feof(f)
-				if e==0
+				if e=0
 					call erExit("get line error")
 				endif
 			endelse
 		endwhile
 		call uconst_miniresolve()
 		call logclose()
-		if link==(TRUE)
+		if link=(TRUE)
 			call printlink(file)
 		endif
 		ret
@@ -51,49 +51,49 @@ function log_line(ss s,sd sz,sd plink)
 	set type s#
 	inc s;dec sz
 	sd skip
-	if plink#==(TRUE)
-		if type==(log_offset)
+	if plink#=(TRUE)
+		if type=(log_offset)
 			setcall skip skip_test()
-			if skip==(FALSE)
+			if skip=(FALSE)
 				call constant_add(s,sz) #same as with const, except it has a dot
 			endif
 			ret
-		elseif type==(log_declare)
+		elseif type=(log_declare)
 			setcall skip skip_test() #skip same included file
-			if skip==(FALSE)
+			if skip=(FALSE)
 				call constant_add(s,sz)
 			endif
 			ret
-		elseif type==(log_import)
+		elseif type=(log_import)
 			setcall skip skip_test()
-			if skip==(FALSE)
+			if skip=(FALSE)
 				call import_add(s,sz)
 			endif
 			ret
-		elseif type==(log_constant)
+		elseif type=(log_constant)
 			call uconst_add(s,sz)
 			ret
-		elseif type==(log_function)
+		elseif type=(log_function)
 			sv fns%fn_mem_p
 			call addtocont(fns,s,sz)
 			ret
-		elseif type==(log_variable)
+		elseif type=(log_variable)
 			call uconst_add(s,sz)
 			ret
 		endelseif
 	endif
-	if type==(log_pathname)
+	if type=(log_pathname)
 		call filesplus()
 		setcall skip skip_test()
-		if skip==(FALSE)
+		if skip=(FALSE)
 			call fileentry(s,sz)
 		endif
-	elseif type==(log_pathfolder)
+	elseif type=(log_pathfolder)
 		setcall skip skip_test()
-		if skip==(FALSE)
+		if skip=(FALSE)
 			call incrementdir(s,sz)
 		endif
-	elseif type==(log_fileend)
+	elseif type=(log_fileend)
 		setcall skip filesminus()
 		if skip<=0
 			call decrementdir()
@@ -101,12 +101,12 @@ function log_line(ss s,sd sz,sd plink)
 				call decrementfiles()
 			endif
 		endif
-	elseif type==(log_fileend_old)
+	elseif type=(log_fileend_old)
 		setcall skip filesminus()
 		if skip<0
 			call decrementfiles()
 		endif
-	elseif type==(log_reusable)
+	elseif type=(log_reusable)
 		set plink# (FALSE)
 	endelseif
 endfunction
@@ -115,7 +115,7 @@ function import_add(sd s,sd sz)
 	sv imps%imp_mem_p
 	sd p
 	setcall p pos_in_cont(imps,s,sz)
-	if p==-1
+	if p=-1
 		call addtocont(imps,s,sz)
 	endif
 endfunction
@@ -161,10 +161,10 @@ function printlink(sd file)
 	vstr ers="printlink problems with log file name extension."
 	while back!=file
 		dec back
-		if back#==(asciiperiod)
+		if back#=(asciiperiod)
 			while back!=file
 				dec back
-				if back#==(asciiperiod)
+				if back#=(asciiperiod)
 					inc back
 					if back#!=(NULL)
 						set back# (asciio)
@@ -173,10 +173,10 @@ function printlink(sd file)
 						sv st^stdout
 						sd len
 						setCall len fprintf(st#," ")
-						if len==1
+						if len=1
 							setCall len fprintf(st#,file)
 							sub back file
-							if len==back
+							if len=back
 								ret
 							endif
 						endif
--- ocompiler-1.orig/ounused/mem.s
+++ ocompiler-1/ounused/mem.s
@@ -4,7 +4,7 @@ const dword=4
 function alloc(sd p)
 	sd er
 	setcall er alloc_throwless(p)
-	if er==(NULL)
+	if er=(NULL)
 		ret
 	endif
 	call erExit(er)
@@ -13,7 +13,7 @@ endfunction
 function ralloc(sv p,sd sz)
 	sd er
 	setcall er ralloc_throwless(p,sz)
-	if er==(NULL)
+	if er=(NULL)
 		ret
 	endif
 	call erExit(er)
--- ocompiler-1.orig/ounused/resolve.s
+++ ocompiler-1/ounused/resolve.s
@@ -17,7 +17,7 @@ function resolve(sd j)
 		add p (dword)
 		sd pos
 		setcall pos pos_in_cont(imps,p,len)
-		if pos==-1
+		if pos=-1
 			call wrongExit(f,p,len)
 		endif
 		add p len
--- ocompiler-1.orig/ounused/skip.s
+++ ocompiler-1/ounused/skip.s
@@ -23,7 +23,7 @@ function filesminus()
 	sd nr
 	set nr f#
 	dec f#
-	if nr==s#
+	if nr=s#
 		call skip_reset()
 		return 0
 	elseif nr<s#
--- ocompiler-1.orig/ounused/throwless.s
+++ ocompiler-1/ounused/throwless.s
@@ -11,7 +11,7 @@ endfunction
 function alloc_throwless(sd p)
 	sd er
 	setcall er malloc_throwless(p,0)
-	if er==(NULL)
+	if er=(NULL)
 		add p :
 		set p# 0
 		return (NULL)
@@ -31,7 +31,7 @@ function ralloc_throwless(sv p,sd sz)
 			return (NULL)
 		endif
 		return "realloc error"
-	elseif sz==0  #equal 0 discovered at decrementfiles, since C23 the behaviour is undefined
+	elseif sz=0  #equal 0 discovered at decrementfiles, since C23 the behaviour is undefined
 	#using this quirk, lvs[0] will be used at constants at end, when size is 0
 		#set p# 0
 		set cursor# 0
@@ -53,10 +53,10 @@ function pos_in_cont(sv cont,ss s,sd sz)
 		sd len
 		set len p#
 		add p (dword)
-		if len==sz
+		if len=sz
 			sd c
 			setcall c memcmp(s,p,sz)
-			if c==0
+			if c=0
 				sub p cont#
 				sub p (dword)
 				return p
@@ -98,9 +98,9 @@ endfunction
 
 function uconst_resolved(sd t,sd size)
 	data nr#1
-	if t==0
+	if t=0
 		set nr 0
-	elseif t==1
+	elseif t=1
 		div size (dword)
 		add nr size
 	else
--- ocompiler-1.orig/ounused/uconst.s
+++ ocompiler-1/ounused/uconst.s
@@ -15,17 +15,17 @@ function uconst_spin(sd f,sd s,sd sz,sd
 	#search in includes declared in other logs
 	add f (size_cont)
 	setcall found uconst_search(f,s,sz,(FALSE))
-	if found==(FALSE)
+	if found=(FALSE)
 		#search in includes declared this log
 		add f (size_cont)
 		setcall found uconst_search(f,s,sz,is_new)
-		if found==(FALSE)
+		if found=(FALSE)
 			#search in constants declared in this file, with respect to is_new
 			sd ofs
 			setcall ofs pos_in_cont(const_cont,s,sz)
 			if ofs!=-1
 				add f (size_cont)
-				if is_new==(FALSE)
+				if is_new=(FALSE)
 					#if is in unused move it to doubleunused
 					call uconst_unused(f,ofs)
 				else
@@ -52,7 +52,7 @@ function uconst_search(sv fs,sd s,sd sz,
 		add pointer cursor#
 		sd found
 		setcall found uconst_spin(pointer#,s,sz,is_new)
-		if found==(TRUE)
+		if found=(TRUE)
 			return (TRUE)
 		endif
 		add cursor (dword)
@@ -77,7 +77,7 @@ function uconst_unused(sv cont,sd ofs)
 		#if offset<=ofs
 		#this is not ordered since mixing const and variables
 
-		if offset==ofs
+		if offset=ofs
 			#move to doubleunused
 			call adddwordtocont(cont,offset)
 			sub end (dword)
--- ocompiler-1.orig/ounused/uconstres.s
+++ ocompiler-1/ounused/uconstres.s
@@ -14,7 +14,7 @@ function uconstres_spin(sd f,sd is_new)
 	add f (size_cont)
 	call uconstres_search(f,is_new)
 	#
-	if is_new==(FALSE)
+	if is_new=(FALSE)
 		#resolve doubleunuseds
 		add f (size_cont)
 		sd double
--- ocompiler-1.orig/src/files/actions/fileformat.s
+++ ocompiler-1/src/files/actions/fileformat.s
@@ -7,7 +7,7 @@ endif
 #also needed at dtnb and old
 sub datasecSize datasecReg
 
-if nobits_virtual==(No)
+if nobits_virtual=(No)
 	#in case old style virtual
 	setcall errormsg set_reserve(datasecSize)
 	#setcall errormsg set_reserve(nobitssecReg)
@@ -16,7 +16,7 @@ if nobits_virtual==(No)
 	endif
 endif
 
-If fileformat==pe_exec
+If fileformat=pe_exec
 	Include "./fileformat/pe_struct.s"
 	Include "./fileformat/pe_resolve.s"
 Else
--- ocompiler-1.orig/src/files/actions/fileformat/elf_resolve.s
+++ ocompiler-1/src/files/actions/fileformat/elf_resolve.s
@@ -1,5 +1,5 @@
 
-If object==false
+If object=false
 	#data
 	Set elf32_phdr_p_filesz_data datasecReg
 	Set elf32_phdr_p_memsz_data datasecReg
@@ -38,7 +38,7 @@ If object==false
 	Set sizefileheaders elf_fileheaders_size
 	#commons#
 
-	if implibsstarted==false
+	if implibsstarted=false
 		call memtomem(ptrelf32_ehd_e_shnum,#one,wordsize)
 		#######
 		call memtomem(ptrelf32_ehd_e_shstrndx,ptrnull,wordsize)
@@ -98,7 +98,7 @@ If object==false
 		div test1 page_sectionalignment
 		set test2 elf32_phdr_p_vaddr_dyn
 		div test2 page_sectionalignment
-		if test2==test1
+		if test2=test1
 			add elf32_phdr_p_vaddr_dyn page_sectionalignment
 		endif
 		#recent tests (after some years have passed):
@@ -309,7 +309,7 @@ Else
 
 	sd symind=symind
 
-	if nobits_virtual==(Yes)
+	if nobits_virtual=(Yes)
 		SetCall errormsg elfaddsecs(dtnbstrtab,(SHT_NOBITS),elf_sec_flags_data,elf_sec_fileoff,datasecSize,(elf_sec_obj_align))
 		If errormsg!=noerr
 			Call msgerrexit(errormsg)
@@ -318,7 +318,7 @@ Else
 		inc symind
 	endif
 
-	if has_debug==(Yes)
+	if has_debug=(Yes)
 		#SHT_NULL will not reach linker output
 		SetCall errormsg elfaddstrsec(".debug",(SHT_PROGBITS),0,elf_sec_fileoff,ptrdebug,0,0,(bsz),0)
 		If errormsg!=noerr
@@ -331,7 +331,7 @@ Else
 
 	add elf_sec_strtab_nr elf_sec_nr
 	sd syment;sd relent
-	if p_is_for_64_value#==(TRUE)
+	if p_is_for_64_value#=(TRUE)
 		Set elf64_ehd_e_shoff (elf64_fileheaders_size)
 		call memtomem(#elf64_ehd_e_shnum,ptrelf_sec_nr,wordsize)
 		call memtomem(#elf64_ehd_e_shstrndx,ptrelf_sec_strtab_nr,wordsize)
--- ocompiler-1.orig/src/files/actions/fileformat/pe_resolve.s
+++ ocompiler-1/src/files/actions/fileformat/pe_resolve.s
@@ -59,7 +59,7 @@ add virtuallocalsoffset imagebaseoffset
 
 Data directoriesaddress^directoryentries
 Data destdir#1
-If implibsstarted==true
+If implibsstarted=true
 	##############################################
 	Set iVirtualAddress SizeOfImage
 	#######################
--- ocompiler-1.orig/src/files/actions/main.s
+++ ocompiler-1/src/files/actions/main.s
@@ -22,8 +22,8 @@ While includesReg!=null
 	Sub cursorforincludes sizeofincludeset
 
 	Set contentoffile cursorforincludes#
-	If errormsg==noerr
-		if includemask==(TRUE)
+	If errormsg=noerr
+		if includemask=(TRUE)
 			set warningsbool (TRUE)
 		#else was not einclude or warns was off
 		endif
@@ -44,9 +44,9 @@ While includesReg!=null
 
 		While content!=last
 			Include "./main/index.s"
-			If errormsg==noerr
-				if parses==(pass_write)
-					if has_debug==(Yes)
+			If errormsg=noerr
+				if parses=(pass_write)
+					if has_debug=(Yes)
 						setcall errormsg debug_lines(codesecReg,lineoffile,content,last)
 					endif
 				endif
@@ -65,13 +65,13 @@ While includesReg!=null
 
 				Data printbuffer#1
 
-				if totalnewlines==0
+				if totalnewlines=0
 					setcall printbuffer printbuf("%s File %s, Row %u, Column %u",errormsg,cursorforincludes,2,lineoffile,columnoffile)
 				else
 				#first textlinestart is lost at multilines command
 					setcall printbuffer printbuf("%s File %s, Row %u",errormsg,cursorforincludes,1,lineoffile)
 				endelse
-				If printbuffer==null
+				If printbuffer=null
 					Call errexit()
 				EndIf
 				Call Message(printbuffer)
@@ -79,11 +79,11 @@ While includesReg!=null
 				Set content last
 			EndIf
 		EndWhile
-		If errormsg==noerr
+		If errormsg=noerr
 			setcall errormsg addtolog_withchar_parses("",fileendchar,(FALSE)) #also ok on win
 			if errormsg!=(noerror)
 				Call Message(errormsg)
-			elseif includedir==true
+			elseif includedir=true
 				data int#1
 				setcall int chdir(contentoffile)
 				#0 success
@@ -101,19 +101,19 @@ While includesReg!=null
 
 	data skipfree#1
 	set skipfree 0
-	if includesReg==0
+	if includesReg=0
 		if parses!=(pass_write)
-			if errormsg==(noerror)
-				If innerfunction==true
+			if errormsg=(noerror)
+				If innerfunction=true
 					Str endfnexp="ENDFUNCTION command expected to close the opened FUNCTION."
 					set errormsg endfnexp
 					Call Message(errormsg)
 				Else
-					if formatdefined==1
+					if formatdefined=1
 					# a file with only comments, but cCOMMENT whitespaces is at pass write
 						call pref_restore()
 					endif
-					if parses==(pass_init)
+					if parses=(pass_init)
 						set g_e_b_p# (FALSE)  #in case was set, for writes
 
 						set datasecSize datasecReg
@@ -131,7 +131,7 @@ While includesReg!=null
 						setcall errormsg scopes_alloc(el_or_e,functionTagIndex)
 						set parses (pass_write)
 					endelse
-					if errormsg==(noerror)
+					if errormsg=(noerror)
 						#used when having multiple includes
 						data includescursor#1
 						set includescursor includes
@@ -153,7 +153,7 @@ While includesReg!=null
 			endif
 		endif
 	endif
-	if skipfree==0
+	if skipfree=0
 		Call free(contentoffile)
 	endif
 EndWhile
--- ocompiler-1.orig/src/files/actions/main/index.s
+++ ocompiler-1/src/files/actions/main/index.s
@@ -8,7 +8,7 @@ Data pcontent^content
 Data pcomsize^comsize
 
 Str textlinestart#1
-if dot_comma_end==0
+if dot_comma_end=0
 	Set textlinestart content
 endif
 
@@ -26,26 +26,26 @@ ss pointer
 sd is_comment;sd is_comment_multiline
 
 setcall pointer command_start(#is_comment,#is_comment_multiline,#cursor_start,#content,last)
-while loop==2
-	if pointer==last
+while loop=2
+	if pointer=last
 		set loop 1
 		if is_comment!=0
-			if is_comment_multiline==0
+			if is_comment_multiline=0
 				setcall errormsg xfile_add_comment_ifif(content,pointer)
 			else
 				setcall errormsg xfile_add_comment_multi_ifif(content,pointer)
 			endelse
 		endif
-	elseif pointer#==newline
+	elseif pointer#=newline
 		set dot_comma_end 0   #a multiline comment can also be in a commands line
-		if is_comment_multiline==0
+		if is_comment_multiline=0
 			set loop 1
 			if pointer!=content
 				Char carriage=asciicarriage
 				ss testcontent
 				set testcontent pointer
 				dec testcontent
-				If testcontent#==carriage
+				If testcontent#=carriage
 					#Dec comsize
 					set pointer testcontent
 					Inc linebreaksize
@@ -62,7 +62,7 @@ while loop==2
 			if pointer!=last
 				setcall pointer mem_spaces(pointer,last)
 				if pointer!=last
-					if pointer#==(asciiexclamationmark)
+					if pointer#=(asciiexclamationmark)
 						setcall errormsg xfile_add_comment_multi_ifif(content,pointer)
 						if errormsg!=(noerror)
 							set loop 1
@@ -75,15 +75,15 @@ while loop==2
 				endif
 			endif
 		endelse
-	elseif is_comment==0
-		if pointer#==(asciidoublequote)
+	elseif is_comment=0
+		if pointer#=(asciidoublequote)
 			setcall errormsg quotes_forward(#pointer,last,#newlines,#textlinestart)
 			if errormsg!=(noerror)
 				set loop 1
 			else
 				add totalnewlines newlines
 			endelse
-		elseif pointer#==(asciisemicolon)
+		elseif pointer#=(asciisemicolon)
 			set loop 1
 			set dot_comma_end 1
 		else
@@ -93,7 +93,7 @@ while loop==2
 		inc pointer
 	endelse
 endwhile
-if errormsg==(noerror)
+if errormsg=(noerror)
 	set comsize pointer
 	sub comsize content
 	#\r\n case begin
@@ -105,102 +105,102 @@ if errormsg==(noerror)
 	If comsize!=0
 		Data pointtosearchat%compointersloc
 		SetCall commandset getcommand(pcontent,pcomsize,ptrsubtype,_errormsg,pointtosearchat)
-		If errormsg==noerr
+		If errormsg=noerr
 			if parses!=(pass_write)
 				if commandset!=(cCOMMENT)
-					if parses==(pass_init)
+					if parses=(pass_init)
 						#tested at function gather; FORMAT is here starting with FUNCTIONX to set the mask knowing the format
-						if formatdefined==0
+						if formatdefined=0
 							if commandset!=(cFORMAT)
 								set nobits_virtual (No)     #this is default pe_exe format, same behavior for nobits
 								call backup_pref(#formatdefined)
 							endif
 						endif
 						#needing to find virtual start
-						if commandset==(cDECLARE)
-						ElseIf commandset==(cPRIMSEC)
-						ElseIf commandset==(cONEARG)
-						Elseif commandset==(cCALL)
+						if commandset=(cDECLARE)
+						ElseIf commandset=(cPRIMSEC)
+						ElseIf commandset=(cONEARG)
+						Elseif commandset=(cCALL)
 						#before .dtnb: at object is difficult, there is no virtual, ostrip is in the project
-						elseIf commandset==(cIMPORTLINK) #needing importx here
-						elseif commandset==(cSTARTFUNCTION);elseif commandset==(cENDFUNCTION)
-						ElseIf commandset==(cLIBRARY)
-						elseif commandset==(cINCLUDELINK)
-						Elseif commandset==(cFORMAT)
-						Elseif commandset==(cDECLAREAFTERCALL)  #and import
-						elseif commandset==(cORPHAN)    #for addaref
-						elseif commandset==(cOVERRIDE)   #example underscore_pref
+						elseIf commandset=(cIMPORTLINK) #needing importx here
+						elseif commandset=(cSTARTFUNCTION);elseif commandset=(cENDFUNCTION)
+						ElseIf commandset=(cLIBRARY)
+						elseif commandset=(cINCLUDELINK)
+						Elseif commandset=(cFORMAT)
+						Elseif commandset=(cDECLAREAFTERCALL)  #and import
+						elseif commandset=(cORPHAN)    #for addaref
+						elseif commandset=(cOVERRIDE)   #example underscore_pref
 						else;set commandset (cCOMMENT);endelse
 					else
 					#pass_calls
-						If commandset==(cPRIMSEC);elseif commandset==(cCALL)
-						elseif commandset==(cINCLUDELINK);elseif commandset==(cENDFUNCTION)
-						elseif commandset==(cOVERRIDE)   #example call_align
+						If commandset=(cPRIMSEC);elseif commandset=(cCALL)
+						elseif commandset=(cINCLUDELINK);elseif commandset=(cENDFUNCTION)
+						elseif commandset=(cOVERRIDE)   #example call_align
 						else;set commandset (cCOMMENT);endelse
 					endelse
 				endif
 			endif
-			if commandset==(cCOMMENT)
+			if commandset=(cCOMMENT)
 				Call advancecursors(pcontent,pcomsize,comsize)
 				#1 is last
-				if parses==(pass_write) #at init and calls cCOMMENT istead of many commands
+				if parses=(pass_write) #at init and calls cCOMMENT istead of many commands
 					set was_whitespaces content;dec was_whitespaces;setcall was_whitespaces is_whitespace(was_whitespaces#)
-					if was_whitespaces==(TRUE)
+					if was_whitespaces=(TRUE)
 					#this is comment ending in whitespace
 						setcall errormsg warn_hidden_whitespaces(cursorforincludes) #includes,nameofstoffile)
 					endif
 				endif
-			ElseIf commandset==(cDECLARE)
+			ElseIf commandset=(cDECLARE)
 				setcall errormsg xfile_add_char_ifif((Xfile_declare))
-				If errormsg==(noerror)
+				If errormsg=(noerror)
 					setcall errormsg declare(pcontent,pcomsize,p_is_for_64_value#,subtype,parses)
 				endIf
-			ElseIf commandset==(cPRIMSEC)
+			ElseIf commandset=(cPRIMSEC)
 				Include "./index/primsec.s"
-			ElseIf commandset==(cONEARG)
+			ElseIf commandset=(cONEARG)
 				Include "./index/onearg.s"
-			ElseIf commandset==(cCALL)
-				if parses==(pass_write)
+			ElseIf commandset=(cCALL)
+				if parses=(pass_write)
 		call entryscope_verify_code()
 				endif
 				Include "./index/call.s"
-			ElseIf commandset==(cCONDITIONS)
+			ElseIf commandset=(cCONDITIONS)
 		call entryscope_verify_code()
 				Include "./index/conditions.s"
-			ElseIf commandset==(cIMPORTLINK)
-				if parses==(pass_init);Include "./index/import.s"
+			ElseIf commandset=(cIMPORTLINK)
+				if parses=(pass_init);Include "./index/import.s"
 				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
-			ElseIf commandset==(cSTARTFUNCTION)
+			ElseIf commandset=(cSTARTFUNCTION)
 				Include "./index/function.s"
-			ElseIf commandset==(cENDFUNCTION)
+			ElseIf commandset=(cENDFUNCTION)
 				Include "./index/endfunction.s"
-			ElseIf commandset==(cRET)
+			ElseIf commandset=(cRET)
 		call entryscope_verify_code()
 				setcall errormsg writeret()
-			ElseIf commandset==(cINCLUDELINK)
+			ElseIf commandset=(cINCLUDELINK)
 				Include "./index/include.s"
-			ElseIf commandset==(cFORMAT)
-				if parses==(pass_init);Include "./index/format.s"
+			ElseIf commandset=(cFORMAT)
+				if parses=(pass_init);Include "./index/format.s"
 				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
-			ElseIf commandset==(cDECLAREAFTERCALL)
-				if parses==(pass_write);Include "./index/aftercall.s";
-				else;if subtype==(cAFTERCALL);add datasecReg (aftercalldeclaresize);endif
+			ElseIf commandset=(cDECLAREAFTERCALL)
+				if parses=(pass_write);Include "./index/aftercall.s";
+				else;if subtype=(cAFTERCALL);add datasecReg (aftercalldeclaresize);endif
 					Call advancecursors(pcontent,pcomsize,comsize);endelse
 				set g_e_b_p# (TRUE)
-			ElseIf commandset==(cMANIPULATEAFTERCALL)
+			ElseIf commandset=(cMANIPULATEAFTERCALL)
 				Include "./index/aftercallmanipulate.s"
-			ElseIf commandset==(cORPHAN)
+			ElseIf commandset=(cORPHAN)
 				Include "./index/warning.s"
-			ElseIf commandset==(cCALLEX)
+			ElseIf commandset=(cCALLEX)
 		call entryscope_verify_code()
 				Include "./index/callex.s"
-			ElseIf commandset==(cOVERRIDE)
+			ElseIf commandset=(cOVERRIDE)
 				#is at all, example at write hidden_pref
 				setcall errormsg override_com(#content,#comsize)
-			ElseIf commandset==(cLIBRARY)
-				if parses==(pass_init);Include "./index/library.s"
+			ElseIf commandset=(cLIBRARY)
+				if parses=(pass_init);Include "./index/library.s"
 				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
-			ElseIf commandset==(cHEX)
+			ElseIf commandset=(cHEX)
 		call entryscope_verify_code()
 				Include "./index/hex.s"
 			Else
@@ -208,10 +208,10 @@ if errormsg==(noerror)
 		call entryscope_verify_code()
 				Include "./index/i3.s"
 			EndElse
-			If errormsg==(noerror)
+			If errormsg=(noerror)
 				#set when code started
 				#this can be at line 0
-				If fnavailable==two
+				If fnavailable=two
 					#retain the file and line where the main scope was started for functions separated from main code
 					#fnavailable two was set by code detectors
 
@@ -241,11 +241,11 @@ if errormsg==(noerror)
 								set xfile_sharp_comment 0
 							endif
 							setcall errormsg xfile_add_comment_ifif(content,pointer)
-							if errormsg==(noerror)
+							if errormsg=(noerror)
 								Call advancecursors(pcontent,pcomsize,comsize)
 							endif
 						endelse
-					elseIf was_whitespaces==(TRUE)
+					elseIf was_whitespaces=(TRUE)
 						#mostly parses (pass_write), example: at cCALL is at all parses
 						#this is whitespace after command
 						#if parses==(pass_write) can be at init commands only, or write commands only, if all parses then extra code for wrongers (only at not w_as_e)
@@ -262,21 +262,21 @@ if errormsg==(noerror)
 		#endif
 	Endelseif
 
-	If errormsg==noerr
+	If errormsg=noerr
 		add lineoffile totalnewlines
 		#parse the line termination,then is the include that will retain the next line and advance to the next file
 		Data lineincrease#1
 		Set lineincrease zero
 		If content!=last
 			Add content linebreaksize
-			if dot_comma_end==0
+			if dot_comma_end=0
 				Set lineincrease one
 			endif
 		EndIf
 		Add lineoffile lineincrease
 
 		#include next file
-		If includebool==one
+		If includebool=one
 			Data inccursor#1
 			Set inccursor includes
 			Add inccursor includesReg
--- ocompiler-1.orig/src/files/actions/main/index/aftercall.s
+++ ocompiler-1/src/files/actions/main/index/aftercall.s
@@ -3,14 +3,14 @@
 
 const aftercalldeclaresize=1
 
-if comsize==0;set errormsg "AfterCall variable name expected."
+if comsize=0;set errormsg "AfterCall variable name expected."
 else
 	str ac_store_content#1;data ac_store_size#1
 	set ac_store_content content;set ac_store_size comsize
 	data acsym_value#1;data acsym_size#1;data acsym_shndx#1
 	sd g_e_p;setcall g_e_p global_err_p()
-	if subtype==(cIMPORTAFTERCALL)
-		If object==(FALSE);set errormsg "ImportAfterCall is used at objects."
+	if subtype=(cIMPORTAFTERCALL)
+		If object=(FALSE);set errormsg "ImportAfterCall is used at objects."
 		else
 			set acsym_value 0;set acsym_size (sym_with_size);set acsym_shndx (NULL)
 			call advancecursors(pcontent,pcomsize,comsize)
@@ -20,8 +20,8 @@ else
 		sd ac_current_data
 		setcall ac_current_data get_img_vdata_dataReg()  #this must be before addtosec
 		SetCall errormsg addtosec(#null,(aftercalldeclaresize),ptrdatasec)
-		if errormsg==(noerror)
-			If object==(FALSE)
+		if errormsg=(noerror)
+			If object=(FALSE)
 				set g_e_p# ac_current_data
 			else
 				set acsym_value ac_current_data;set acsym_size 0;set acsym_shndx (dataind)
@@ -29,7 +29,7 @@ else
 			#size 0 test is above
 			if content#!=(unrefsign)
 				SetCall errormsg entryvarsfns(content,comsize)
-				if errormsg==(noerror)
+				if errormsg=(noerror)
 					SetCall errormsg addaref(ac_current_data,pcontent,pcomsize,comsize,(charnumber),(dummy_mask))
 				endif
 			else
@@ -38,11 +38,11 @@ else
 			endelse
 		endif
 	endelse
-	if errormsg==(noerror)
+	if errormsg=(noerror)
 		#set g_e_b_p# (TRUE)
-		if object==(TRUE)
+		if object=(TRUE)
 			set g_e_p# tableReg
-			if p_is_for_64_value#==(TRUE)
+			if p_is_for_64_value#=(TRUE)
 				div g_e_p# (elf64_dyn_d_val_syment)
 			else
 				div g_e_p# elf32_dyn_d_val_syment
--- ocompiler-1.orig/src/files/actions/main/index/aftercallmanipulate.s
+++ ocompiler-1/src/files/actions/main/index/aftercallmanipulate.s
@@ -1,9 +1,9 @@
 
-if g_e_b_p#==(FALSE)
+if g_e_b_p#=(FALSE)
 	set errormsg "AfterCall is not defined."
 else
 	sd acall_val
-	if subtype==(cAFTERCALLACTIVATE)
+	if subtype=(cAFTERCALLACTIVATE)
 		set acall_val (~aftercall_clearstate)
 	else
 	#cAFTERCALLCLEAR
--- ocompiler-1.orig/src/files/actions/main/index/call.s
+++ ocompiler-1/src/files/actions/main/index/call.s
@@ -1,10 +1,10 @@
 
-setcall errormsg xfile_add_callret_ifif(subtype)
-if errormsg==(noerror)
+setcall errormsg xfile_add_callret_ifif((Xfile_call),subtype)
+if errormsg=(noerror)
 	Data callfn=callfunction
 	SetCall errormsg parsefunction(pcontent,pcomsize,callfn,subtype) #there are 2 more arguments but are not used
-	if parses==(pass_write)
-		if errormsg==(noerror)
+	if parses=(pass_write)
+		if errormsg=(noerror)
 			setcall errormsg after_after_call(subtype)
 		endif
 	endif
--- ocompiler-1.orig/src/files/actions/main/index/callex.s
+++ ocompiler-1/src/files/actions/main/index/callex.s
@@ -1,26 +1,26 @@
 
-setcall errormsg xfile_add_callret_if(subtype)
-if errormsg==(noerror)
+setcall errormsg xfile_add_callret_if((Xfile_callex),subtype)
+if errormsg=(noerror)
 	sd call_sz
 	setcall errormsg arg_size(pcontent#,pcomsize#,#call_sz)
-	if errormsg==(noerror)
+	if errormsg=(noerror)
 		sd top_data
 		sd bool_indirect
 		setcall errormsg prepare_function_call(pcontent,pcomsize,call_sz,#top_data,#bool_indirect,subtype)
-		if errormsg==(noerror)
+		if errormsg=(noerror)
 			call spaces(pcontent,pcomsize)
 			setcall errormsg twoargs(pcontent,pcomsize,(cCALLEX_primsec),(NULL))
-			if errormsg==(noerror)
+			if errormsg=(noerror)
 				#
 				sd callex_data;sd callex_sz
 				const callex_regopcode=ecxregnumber*toregopcode
 				sd callex_bool;setcall callex_bool is_for_64()
-				if callex_bool==(TRUE)
+				if callex_bool=(TRUE)
 					sd callex64;setcall callex64 is_for_64_is_impX_or_fnX_get()
-					if callex64==(TRUE)
+					if callex64=(TRUE)
 						setcall errormsg callex64_call()
 					endif
-					if errormsg==(noerror)
+					if errormsg=(noerror)
 						const callex_x86_64_start=!
 						#same but with 2 rex, inc je, -2 jmp, and 3* at sib
 						char callex_x86_64={REX_Operand_64,0x81,0xf9,0,0,0,0,0x74,8,REX_Operand_64,0xFF,1*toregopcode|ecxregnumber|regregmod,0xff,6*toregopcode|espregnumber,3*tomod|callex_regopcode,0xEB,0xef}
@@ -42,11 +42,11 @@ if errormsg==(noerror)
 					set callex_sz (!-callex_start);set callex_data #callex_i386
 				endelse
 				#
-				if errormsg==(noerror)
+				if errormsg=(noerror)
 					SetCall errormsg addtosec(callex_data,callex_sz,ptrcodesec)
-					if errormsg==(noerror)
+					if errormsg=(noerror)
 						setcall errormsg write_function_call(top_data,bool_indirect,(TRUE))
-						if errormsg==(noerror)
+						if errormsg=(noerror)
 							setcall errormsg after_after_call(subtype)
 						endif
 					endif
--- ocompiler-1.orig/src/files/actions/main/index/conditions.s
+++ ocompiler-1/src/files/actions/main/index/conditions.s
@@ -5,34 +5,43 @@ Data ptrifinscribe^ifinscribe
 
 Data nocond=nocondnumber
 
-If subtype==(cIF)
+If subtype=(cIF)
 	SetCall errormsg addtosec(ptrifinscribe,dwordsize,ptrconditionsloops)
-	If errormsg==noerr
+	If errormsg=noerr
 		SetCall errormsg condbegin(pcontent,pcomsize,(ifnumber))
 	EndIf
-ElseIf subtype==(cENDIF)
+ElseIf subtype=(cENDIF)
 	SetCall errormsg conditionscondend((ifnumber),nocond)
-ElseIf subtype==(cELSE)
+ElseIf subtype=(cELSE)
 	SetCall errormsg closeifopenelse()
-ElseIf subtype==(cENDELSE)
+ElseIf subtype=(cENDELSE)
 	SetCall errormsg conditionscondend((elsenumber),nocond)
-ElseIf subtype==(cELSEIF)
+ElseIf subtype=(cELSEIF)
 	SetCall errormsg closeifopenelse()
-	If errormsg==noerr
+	If errormsg=noerr
 		SetCall errormsg condbegin(pcontent,pcomsize,(ifnumber))
 	EndIf
-ElseIf subtype==(cENDELSEIF)
+ElseIf subtype=(cENDELSEIF)
 	SetCall errormsg conditionscondend((ifnumber),(elsenumber))
-ElseIf subtype==(cWHILE)
+ElseIf subtype=(cWHILE)
 	SetCall errormsg coderegtocondloop()
-	If errormsg==noerr
+	If errormsg=noerr
 		SetCall errormsg condbegin(pcontent,pcomsize,(whilenumber))
 	EndIf
-ElseIf subtype==(cENDWHILE)
-	SetCall errormsg condend((whilenumber))
-ElseIf subtype==(cBREAK)
-	setcall errormsg break()
+ElseIf subtype=(cENDWHILE)
+	setcall errormsg xfile_add_char_if((Xfile_condend))
+	If errormsg=noerr
+		SetCall errormsg condend((whilenumber))
+	EndIf
+ElseIf subtype=(cBREAK)
+	setcall errormsg xfile_add_char_if((Xfile_break))
+	If errormsg=noerr
+		setcall errormsg break()
+	EndIf
 Else
 #cCONTINUE
-	setcall errormsg continue()
+	setcall errormsg xfile_add_char_if((Xfile_continue))
+	If errormsg=noerr
+		setcall errormsg continue()
+	EndIf
 EndElse
--- ocompiler-1.orig/src/files/actions/main/index/endfunction.s
+++ ocompiler-1/src/files/actions/main/index/endfunction.s
@@ -1,7 +1,7 @@
 
 
-if parses==(pass_init)
-	if innerfunction==false
+if parses=(pass_init)
+	if innerfunction=false
 		Char unexef="Unexpected ENDFUNCTION command."
 		Str unexeferr^unexef
 		Set errormsg unexeferr
@@ -10,18 +10,18 @@ if parses==(pass_init)
 		call vars_log_reset() #to let next variables be ".var"
 	endelse
 else
-	if parses==(pass_write)
+	if parses=(pass_write)
 		SetCall errormsg checkcondloopclose()
-		If errormsg==noerr
+		If errormsg=noerr
 			data ptrreturn#1
 			data sizereturn#1
 			data ptrptrreturn^ptrreturn
 			setcall sizereturn getreturn(ptrptrreturn)
 
 			SetCall errormsg addtoCode_set_programentrypoint(ptrreturn,sizereturn)
-			If errormsg==noerr
+			If errormsg=noerr
 				setcall errormsg scopes_store(functionTagIndex)
-				If errormsg==noerr
+				If errormsg=noerr
 					Set i zero
 					While i!=(numberofvars)
 						Data containertoclear#1
--- ocompiler-1.orig/src/files/actions/main/index/format.s
+++ ocompiler-1/src/files/actions/main/index/format.s
@@ -1,5 +1,5 @@
 
-If formatdefined==1
+If formatdefined=1
 	Char nomoreformats="The FORMAT command can be defined at start and only once."
 	Str ptrnomoreformats^nomoreformats
 	Set errormsg ptrnomoreformats
@@ -12,36 +12,36 @@ else
 	SetCall formatresponse stratmemspc(pcontent,pcomsize,ptrexeformat,false)
 
 	#elf format
-	If formatresponse==false
+	If formatresponse=false
 		Char elfformat="ELF"
 		Str ptrelfformat^elfformat
 		SetCall formatresponse stratmemspc(pcontent,pcomsize,ptrelfformat,false)
-		If formatresponse==true
+		If formatresponse=true
 			Set fileformat elf_unix
 			Char elfobjformat="OBJ"
 			Str ptrelfobjformat^elfobjformat
 			Data elfobjformresp#1
 
 			SetCall elfobjformresp stringsatmemspc(pcontent,pcomsize,ptrelfobjformat,false,"64",p_is_for_64_value)
-			If elfobjformresp==true
+			If elfobjformresp=true
 				sd is_so
 				setcall is_so stratmemspc(pcontent,pcomsize,"SO",false)
-				if is_so==true
-					if ignore_format_so==(No)
+				if is_so=true
+					if ignore_format_so=(No)
 						setcall errormsg addtolog_char((log_reusable),logfile)
 					endif
 				endif
-				If errormsg==noerr
-					if p_is_for_64_value#==(TRUE)
+				If errormsg=noerr
+					if p_is_for_64_value#=(TRUE)
 						set convention_64 convention_64#
-						if convention_64==(ignore_convention_input)
+						if convention_64=(ignore_convention_input)
 							set p_is_for_64_value# (FALSE)
 						else
 							call reloc64_init()
-							if convention_64==(direct_convention_input)
+							if convention_64=(direct_convention_input)
 								call convdata((convdata_init),(variable_convention))
 							#cross_convention_input
-							elseif (variable_convention)==(ms_convention)
+							elseif (variable_convention)=(ms_convention)
 								call convdata((convdata_init),(lin_convention))
 							else
 								call convdata((convdata_init),(ms_convention))
@@ -50,21 +50,21 @@ else
 					endif
 					Set object true
 					SetCall errormsg elfaddstrsym(ptrnull,null,null,null,null,null,ptrtable)
-					If errormsg==noerr
+					If errormsg=noerr
 						Char elfdata=".data"
 						Str ptrelfdata^elfdata
 						Data dataind=dataind
 						Set datastrtab namesReg
 						SetCall errormsg elfaddstrsym(ptrelfdata,null,null,STT_SECTION,(STB_LOCAL),dataind,ptrtable)
-						If errormsg==noerr
+						If errormsg=noerr
 							Char elftext=".text"
 							Str ptrelftext^elftext
 							Data codeind=codeind
 							Set codestrtab namesReg
 							SetCall errormsg elfaddstrsym(ptrelftext,null,null,STT_SECTION,(STB_LOCAL),codeind,ptrtable)
 							sd totallocalsymsaddedatstart=3
-							If errormsg==noerr
-								if nobits_virtual==(Yes)
+							If errormsg=noerr
+								if nobits_virtual=(Yes)
 									Set dtnbstrtab namesReg
 									SetCall errormsg elfaddstrsym(".dtnb",null,null,STT_SECTION,(STB_LOCAL),(dtnbind),ptrtable)
 									inc totallocalsymsaddedatstart
@@ -88,8 +88,8 @@ else
 		set nobits_virtual (No)  #.dtnb is not yet at exe format
 	EndElse
 
-	If errormsg==noerr
-		If formatresponse==false
+	If errormsg=noerr
+		If formatresponse=false
 			Char unrecform="Unrecognized file format."
 			Str ptrunrecform^unrecform
 			Set errormsg ptrunrecform
--- ocompiler-1.orig/src/files/actions/main/index/function.s
+++ ocompiler-1/src/files/actions/main/index/function.s
@@ -1,5 +1,5 @@
 
-If innerfunction==true
+If innerfunction=true
 	Char finferr="There is already another function started."
 	Str ptrfinf^finferr
 	Set errormsg ptrfinf
@@ -9,7 +9,7 @@ ElseIf programentrypoint!=codesecReg
 
 	call dwtomem(entrylinenumber,uint32s)
 	SetCall allocerrormsg printbuf(fnafteren,ptrentrystartfile,uint32s,0)
-	If allocerrormsg==null
+	If allocerrormsg=null
 		Call errexit()
 	EndIf
 	Set errormsg allocerrormsg
@@ -18,20 +18,20 @@ Else
 	and varargs (x_func_flag)
 	and subtype (~x_func_flag)
 
-	if subtype==(cENTRY);set el_or_e (TRUE)
-	elseif subtype==(cENTRYRAW);set el_or_e (TRUE)
+	if subtype=(cENTRY);set el_or_e (TRUE)
+	elseif subtype=(cENTRYRAW);set el_or_e (TRUE)
 	else;set el_or_e (FALSE);endelse
-	If el_or_e==(TRUE)
+	If el_or_e=(TRUE)
 		#Data referencebit=referencebit
 		#Set objfnmask referencebit
-		if parses==(pass_write)
+		if parses=(pass_write)
 			set fnavailable two
 		endif
 	Else
 		#Set objfnmask null
 		Set innerfunction true
 	EndElse
-	if errormsg==(noerror)
+	if errormsg=(noerror)
 		Data declarefn=declarefunction
 		SetCall errormsg parsefunction(pcontent,pcomsize,declarefn,subtype,el_or_e,varargs)
 	endif
--- ocompiler-1.orig/src/files/actions/main/index/i3.s
+++ ocompiler-1/src/files/actions/main/index/i3.s
@@ -1,5 +1,5 @@
 
-If comsize==zero
+If comsize=zero
 	Char interrupt={0xCC}
 	Str ptrinterrupt^interrupt
 	SetCall errormsg addtosec(ptrinterrupt,bytesize,ptrcodesec)
--- ocompiler-1.orig/src/files/actions/main/index/import.s
+++ ocompiler-1/src/files/actions/main/index/import.s
@@ -5,79 +5,79 @@ Data impescapes#1
 Data ptrimpquotsz^impquotsz
 Data ptrimpescapes^impescapes
 
-If object==false
-	If implibsstarted==false
+If object=false
+	If implibsstarted=false
 		Char noliberr="Unexpected IMPORT statement; there is no LIBRARY opened."
 		Str ptrnoliberr^noliberr
 		Set errormsg ptrnoliberr
 	EndIf
 EndIf
-If errormsg==noerr
+If errormsg=noerr
 	Data functionoffset#1
 
-	If fileformat==pe_exec
+	If fileformat=pe_exec
 		Set functionoffset addressesReg
 
 		Str ptrnamescurrentoffset^namesReg
 		SetCall errormsg addtosec(ptrnamescurrentoffset,dwordsize,ptraddresses)
-		If errormsg==noerr
+		If errormsg=noerr
 			SetCall errormsg addtosec(ptrnull,wordsize,ptrnames)
 		EndIf
 	Else
 		#get the last index for offset resolvations
-		If object==false
+		If object=false
 			Set functionoffset addressesReg
 		Else
 			Set functionoffset tableReg
 		EndElse
 		#get the function index
-		If object==false
+		If object=false
 			Div functionoffset elf32_dyn_d_val_syment
 			#get the dword offset to call at, index*dword
 			Mult functionoffset dwordsize
 			SetCall errormsg elfaddsym(namesReg,null,null,STT_FUNC,(STB_GLOBAL),null,ptraddresses)
-		ElseIf p_is_for_64_value#==(TRUE)
+		ElseIf p_is_for_64_value#=(TRUE)
 			div functionoffset (elf64_dyn_d_val_syment)
 		Else
 			Div functionoffset elf32_dyn_d_val_syment
 		EndElse
 	EndElse
-	If errormsg==noerr
+	If errormsg=noerr
 		SetCall errormsg quotinmem(pcontent,pcomsize,ptrimpquotsz,ptrimpescapes)
-		If errormsg==noerr
+		If errormsg=noerr
 			Call import_leading_underscore(pcontent,pcomsize,ptrimpquotsz)
-			If object==true
+			If object=true
 				#the sym entry
 				SetCall errormsg elfaddsym(namesReg,zero,(sym_with_size),STT_NOTYPE,(STB_GLOBAL),null,ptrtable)
 			EndIf
-			If errormsg==noerr
+			If errormsg=noerr
 				sd imp_mark;set imp_mark namesReg ##this is because the null at end makes code harder
 				SetCall errormsg addtosecstresc(pcontent,pcomsize,impquotsz,impescapes,ptrnames,true)
-				If errormsg==noerr
+				If errormsg=noerr
 					Call stepcursors(pcontent,pcomsize)
 					Call spaces(pcontent,pcomsize)
 					#after this will find var in vars/fns and if not add a new
 					sd imp_size;setcall imp_size find_whitespaceORcomment(content,comsize)
-					If imp_size==zero
+					If imp_size=zero
 						Char missimportref="Import name for compiler must be specified after the name for output."
 						Str ptrimpref^missimportref
 						Set errormsg ptrimpref
 					Else
 						SetCall errormsg fnimp_exists(content,imp_size) #it is at first pass when only fns and imports are
-						If errormsg==noerr
-							if codeFnObj==(log_warn)
-								if subtype==(cIMPORT)
+						If errormsg=noerr
+							if codeFnObj=(log_warn)
+								if subtype=(cIMPORT)
 									sub impquotsz impescapes
 									add imp_mark names
 									setcall errormsg addtolog_withchar_ex_atunused_handle(imp_mark,impquotsz,(log_import),logfile)
 								endif
 							endif
-							If errormsg==noerr
+							If errormsg=noerr
 								sd import_ref_mask=idatabitfunction
-								if subtype==(cIMPORTX)
+								if subtype=(cIMPORTX)
 									or import_ref_mask (x86_64bit)
 								endif
-								if g_e_b_p#==(FALSE)
+								if g_e_b_p#=(FALSE)
 									or import_ref_mask (aftercallthrowlessbit)
 								endif
 
--- ocompiler-1.orig/src/files/actions/main/index/include.s
+++ ocompiler-1/src/files/actions/main/index/include.s
@@ -6,15 +6,15 @@ Data pquotsz^quotsz
 Data pescapes^escapes
 
 SetCall errormsg quotinmem(pcontent,pcomsize,pquotsz,pescapes)
-if errormsg==noerr
-	if include_sec==(TRUE)
+if errormsg=noerr
+	if include_sec=(TRUE)
 		ss include_test
 		set include_test content
 		add include_test quotsz
 		inc include_test
 		setcall include_test mem_spaces(include_test,pointer)
 		if include_test!=pointer
-			if include_test#==(asciidoublequote)
+			if include_test#=(asciidoublequote)
 				sub include_test content
 				sub comsize include_test
 				add content include_test
@@ -22,12 +22,12 @@ if errormsg==noerr
 			endif
 		endif
 	endif
-	if errormsg==noerr
+	if errormsg=noerr
 		SetCall errormsg addtosecstresc(pcontent,pcomsize,quotsz,escapes,ptrmiscbag,zero)
-		If errormsg==noerr
+		If errormsg=noerr
 			Call stepcursors(pcontent,pcomsize)
 			Set includebool one
-			if include_sec==(FALSE)
+			if include_sec=(FALSE)
 				SetCall errormsg include_sec_skip(pcontent,pcomsize)
 			endif
 		EndIf
--- ocompiler-1.orig/src/files/actions/main/index/library.s
+++ ocompiler-1/src/files/actions/main/index/library.s
@@ -4,15 +4,15 @@ Data libescapes#1
 Data ptrlibquotsz^libquotsz
 Data ptrlibescapes^libescapes
 
-If fileformat==pe_exec
-	If implibsstarted==true
+If fileformat=pe_exec
+	If implibsstarted=true
 		SetCall errormsg closelib()
 	EndIf
-	If errormsg==noerr
+	If errormsg=noerr
 		SetCall errormsg openlib()
 	EndIf
 Else
-	If object==false
+	If object=false
 		#Name of needed library offset
 		Data DT_NEEDED=1
 		Data d_un#1
@@ -26,11 +26,11 @@ Else
 	EndElse
 EndElse
 
-If errormsg==noerr
+If errormsg=noerr
 	SetCall errormsg quotinmem(pcontent,pcomsize,ptrlibquotsz,ptrlibescapes)
-	If errormsg==noerr
+	If errormsg=noerr
 		SetCall errormsg addtosecstresc(pcontent,pcomsize,libquotsz,libescapes,ptrnames,true)
-		If errormsg==noerr
+		If errormsg=noerr
 			Call stepcursors(pcontent,pcomsize)
 			Set implibsstarted true
 		EndIf
--- ocompiler-1.orig/src/files/actions/main/index/onearg.s
+++ ocompiler-1/src/files/actions/main/index/onearg.s
@@ -1,11 +1,11 @@
 
 
-if parses==(pass_init)
+if parses=(pass_init)
 	setcall errormsg argument_init(pcontent,pcomsize,subtype)
 else
 	call entryscope_verify_code()
 	SetCall errormsg xfile_add_char_if((Xfile_action))
-	if errormsg==(noerror)
+	if errormsg=(noerror)
 		SetCall errormsg argument(pcontent,pcomsize,(FORWARD),subtype)
 	endif
 endelse
--- ocompiler-1.orig/src/files/actions/main/index/primsec.s
+++ ocompiler-1/src/files/actions/main/index/primsec.s
@@ -5,7 +5,7 @@ if parses!=(pass_write)
 else
 	call entryscope_verify_code()
 	SetCall errormsg xfile_add_char_if((Xfile_action2))
-	if errormsg==(noerror)
+	if errormsg=(noerror)
 		SetCall errormsg twoargs(pcontent,pcomsize,subtype,null)
 	endif
 endelse
--- ocompiler-1.orig/src/files/actions/main/index/warning.s
+++ ocompiler-1/src/files/actions/main/index/warning.s
@@ -2,11 +2,11 @@
 Data warningsboolptr%ptrwarningsbool
 sd warning_bool
 setcall warning_bool stratmem(pcontent,pcomsize,"ON")
-if warning_bool==(TRUE)
+if warning_bool=(TRUE)
 	set warningsboolptr# (TRUE)
 else
 	setcall warning_bool stratmem(pcontent,pcomsize,"OFF")
-	if warning_bool==(TRUE)
+	if warning_bool=(TRUE)
 		set warningsboolptr# (FALSE)
 	else
 		set errormsg "Expecting 'on' or 'off' command"
--- ocompiler-1.orig/src/files/actions/pathout.s
+++ ocompiler-1/src/files/actions/pathout.s
@@ -20,7 +20,7 @@ Sub cursorpath unit
 While minpath!=cursorpath
 	Char teststr#1
 	Set teststr cursorpath#
-	If teststr==dot
+	If teststr=dot
 		Set pointofpathout cursorpath
 		Set cursorpath minpath
 	EndIf
@@ -32,12 +32,12 @@ EndWhile
 Data extension#1
 Set extension null
 
-If fileformat==pe_exec
+If fileformat=pe_exec
 	Char exe=".exe"
 	Str pexe^exe
 	Set extension pexe
 Else
-	If object==true
+	If object=true
 		Char obj=".o"
 		Str pobj^obj
 		Set extension pobj
--- ocompiler-1.orig/src/files/actions/setdefdir.s
+++ ocompiler-1/src/files/actions/setdefdir.s
@@ -30,7 +30,7 @@ if errormsg!=noerr
 endif
 
 SetCall safecurrentdirtopath memalloc(flag_max_path)
-If safecurrentdirtopath==null
+If safecurrentdirtopath=null
 	Call errexit()
 EndIf
 Call memtomem(safecurrentdirtopath,safedir,wordsize)
@@ -39,12 +39,12 @@ Set safecurrentdirloc safecurrentdirtopa
 Add safecurrentdirloc wordsize
 Call memtomem(safecurrentdirloc,filenameloc,movesize)
 
-if logbool==true
+if logbool=true
 	setcall errormsg openfile_write_add_extension(safecurrentdirtopath,".log",ptrlogfile)
-	if errormsg==noerr
+	if errormsg=noerr
 		sd log_main_folder
 		setcall log_main_folder getcwd((NULL),0)
-		if log_main_folder==(NULL)
+		if log_main_folder=(NULL)
 			char getcwd_first="first getcwd error"
 			set errormsg #getcwd_first
 		else
@@ -53,7 +53,7 @@ if logbool==true
 		endelse
 	endif
 endif
-if xbool==true
+if xbool=true
 	setcall errormsg openfile_mode_add_extension(safecurrentdirtopath,".x",#xfile,(_open_readwrite))
 endif
 if errormsg!=noerr
--- ocompiler-1.orig/src/files/actions/terminations.s
+++ ocompiler-1/src/files/actions/terminations.s
@@ -7,8 +7,8 @@ If errormsg!=noerr
 EndIf
 
 #close the last LIBRARY
-If fileformat==pe_exec
-	If implibsstarted==true
+If fileformat=pe_exec
+	If implibsstarted=true
 		SetCall errormsg closelib()
 		If errormsg!=noerr
 			Call msgerrexit(errormsg)
@@ -20,7 +20,7 @@ EndIf
 sd err_bool
 setCall err_bool warnings(#errormsg,el_or_e)
 If errormsg!=noerr
-	if err_bool==(TRUE)
+	if err_bool=(TRUE)
 		Call msgerrexit(errormsg)
 	endif
 	call errexit()
--- ocompiler-1.orig/src/files/actions/write.s
+++ ocompiler-1/src/files/actions/write.s
@@ -15,19 +15,19 @@ Data writeres#1
 Data writefalse=writeno
 
 SetCall writeres writefile(fileout,fileheaders,sizefileheaders)
-If writeres==writefalse
+If writeres=writefalse
 	Call errexit()
 EndIf
-If fileformat==elf_unix
-	If object==false
+If fileformat=elf_unix
+	If object=false
 		SetCall writeres writefile(fileout,elf_progdeffileheaders,elf_progdeffileheaders_size)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 		Add sizefileheaders elf_progdeffileheaders_size
-		If implibsstarted==true
+		If implibsstarted=true
 			SetCall writeres writefile(fileout,importfileheaders,sizeimportfileheaders)
-			If writeres==writefalse
+			If writeres=writefalse
 				Call errexit()
 			EndIf
 			Add sizefileheaders sizeimportfileheaders
@@ -43,19 +43,19 @@ If fileformat==elf_unix
 			If errormsg!=noerr;Call msgerrexit(errormsg);EndIf
 			#
 			SetCall writeres writefile(fileout,extra,extraReg)
-			If writeres==writefalse;Call errexit();EndIf
+			If writeres=writefalse;Call errexit();EndIf
 			Add sizefileheaders extraReg
 			#extra used nomore
 		Else
 			SetCall errormsg elfaddsecn()
 			If errormsg!=noerr;Call msgerrexit(errormsg);EndIf
 			SetCall writeres writefile(fileout,miscbag,miscbagReg)
-			If writeres==writefalse;Call errexit();EndIf
+			If writeres=writefalse;Call errexit();EndIf
 			Add sizefileheaders miscbagReg
 		EndElse
 	Else
 		SetCall writeres writefile(fileout,miscbag,miscbagReg)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 		Add sizefileheaders miscbagReg
@@ -65,92 +65,92 @@ If fileformat==elf_unix
 EndIf
 
 SetCall writeres padsec(fileout,sizefileheaders,startofdata)
-If writeres==writefalse
+If writeres=writefalse
 	Call errexit()
 EndIf
 
 Data writesecalignment#1
 Set writesecalignment page_sectionalignment
-If fileformat==elf_unix
+If fileformat=elf_unix
 	Set writesecalignment one
 EndIf
 
 #data section
 SetCall writeres paddedwrite(fileout,datasec,datasecReg,writesecalignment)
-If writeres==writefalse
+If writeres=writefalse
 	Call errexit()
 EndIf
 
 #code section
 SetCall writeres paddedwrite(fileout,codesec,codesecReg,writesecalignment)
-If writeres==writefalse
+If writeres=writefalse
 	Call errexit()
 EndIf
 
-If object==true
+If object=true
 	#debug
 	if debugsecReg!=0
 		#has_debug is Yes
 		SetCall writeres writefile(fileout,debugsec,debugsecReg)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 	endif
 
 	#symtab
 	SetCall writeres writefile(fileout,table,tableReg)
-	If writeres==writefalse
+	If writeres=writefalse
 		Call errexit()
 	EndIf
 
 	#relocs
 	SetCall writeres writefile(fileout,addresses,addressesReg)
-	If writeres==writefalse
+	If writeres=writefalse
 		Call errexit()
 	EndIf
 	SetCall writeres writefile(fileout,extra,extraReg)
-	If writeres==writefalse
+	If writeres=writefalse
 		Call errexit()
 	EndIf
 
 	#strtab
 	SetCall writeres writefile(fileout,names,namesReg)
-	If writeres==writefalse
+	If writeres=writefalse
 		Call errexit()
 	EndIf
-ElseIf implibsstarted==true
+ElseIf implibsstarted=true
 	#idata section
-	If fileformat==pe_exec
+	If fileformat=pe_exec
 		#table
 		SetCall writeres paddedwrite(fileout,table,tableReg,tableMax)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 		#addresses
 		SetCall writeres paddedwrite(fileout,addresses,addressesReg,addressesMax)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 		#names
 		SetCall writeres paddedwrite(fileout,names,namesReg,namesMax)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 	Else
 		#interpreter
 		SetCall writeres writefile(fileout,ptrinterpreter,interpretersize)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 
 		#dynamic
 		SetCall writeres writefile(fileout,table,tableReg)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 		Data ptrelf_dyn%elf_dynfix_start
 		SetCall writeres writefile(fileout,ptrelf_dyn,elf_dynfix_size)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 
@@ -158,40 +158,40 @@ ElseIf implibsstarted==true
 		##hashfix
 		Data ptrelf_hash%elf_hash_start
 		SetCall writeres writefile(fileout,ptrelf_hash,elf_hash_minsize)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 		##hashvar
 		Data elf_loop_write#1
 		Set elf_loop_write miscbag
 		SetCall writeres writefile(fileout,elf_loop_write,hash_var_size)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 		Add elf_loop_write hash_var_size
 
 		##symtab
 		SetCall writeres writefile(fileout,addresses,addressesReg)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 
 		##strtab
 		SetCall writeres writefile(fileout,names,namesReg)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 
 		##rel
 		SetCall writeres writefile(fileout,elf_loop_write,rel_var_size)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 		Add elf_loop_write rel_var_size
 
 		##calls
 		SetCall writeres writefile(fileout,elf_loop_write,elf_rel_entries_size)
-		If writeres==writefalse
+		If writeres=writefalse
 			Call errexit()
 		EndIf
 	EndElse
--- ocompiler-1.orig/src/files/functions/64/align.s
+++ ocompiler-1/src/files/functions/64/align.s
@@ -30,8 +30,8 @@ function stack_align(sd nr)
 	if final_nr!=0
 		and final_nr 1
 		sd type;setcall type align_type()
-		if type==(even_align)
-			if final_nr==0
+		if type=(even_align)
+			if final_nr=0
 				return (noerror)
 			endif
 		elseif   final_nr!=0
@@ -53,8 +53,8 @@ function pref_call_align(sd nr)
 	if type!=(call_align_no)
 		sd conv;setcall conv convdata((convdata_total))
 		if nr<=conv
-			if conv==(lin_convention)
-				if type==(call_align_yes_all)
+			if conv=(lin_convention)
+				if type=(call_align_yes_all)
 					return 2 #to align at no args
 				endif
 			else
@@ -86,7 +86,7 @@ function align_ante(sd arguments)
 		setcall pointer align_ptype()
 		sd test=1;and test arguments
 		sd test2=0xffFF
-		if test==0
+		if test=0
 		#even, put on low word
 			inc pointer#
 			and test2 pointer#
@@ -167,7 +167,7 @@ function align_entryscope()
 		char bt={twobytesinstruction_byte1,bt_instruction,bt_reg_imm8|ebxregnumber,3}
 		#j(c|nc);sub rbx,8
 		char jump#1;char *=4;char *={REX_Operand_64,0x83,RegReg*tomod|(5*toregopcode)|ebxregnumber,8}
-		if type==(even_align)
+		if type=(even_align)
 			#there are more even calls to align
 			#Jump short if not carry
 			set jump (jnc_instruction)
--- ocompiler-1.orig/src/files/functions/64/bit.s
+++ ocompiler-1/src/files/functions/64/bit.s
@@ -33,11 +33,11 @@ function is_for_64_is_impX_or_fnX_set(sd
 	sd b
 	setcall b is_for_64()
 	#importX and functionX used to have a test with is_for_64 outside of this, but at log need to know the type
-	if b==(TRUE)
+	if b=(TRUE)
 		add ptrdata (maskoffset)
 		sd val;set val ptrdata#;and val (x86_64bit)
 		sd p_b
-		if val==(x86_64bit)
+		if val=(x86_64bit)
 			setcall p_b is_for_64_is_impX_or_fnX_p_get()
 			set p_b# (TRUE)
 		else
@@ -53,7 +53,7 @@ endfunction
 function is_for_64_is_impX_or_fnX_set_force(sd subtype)
 	sd b
 	setcall b is_for_64()
-	if b==(TRUE)
+	if b=(TRUE)
 		setcall subtype callx_flag(subtype)
 		if subtype!=0
 			sd p_b
@@ -89,7 +89,7 @@ endfunction
 #er
 function rex_w_if64()
 	sd b;setcall b is_for_64()
-	if b==(FALSE)
+	if b=(FALSE)
 		return (noerror)
 	endif
 	sd err
@@ -102,8 +102,8 @@ function is_big(sd dataarg,sd sufix)
 	sd b;setcall b bigbits(dataarg)
 	if b!=0
 		setcall b pointbit(dataarg)
-		if b==0
-			if sufix==(sufix_true)
+		if b=0
+			if sufix=(sufix_true)
 				# sd# is not big
 				return (FALSE)
 			endif
@@ -117,7 +117,7 @@ endfunction
 function bigbits(sd data)
 	sd test
 	setcall test stackbit(data)
-	if test==0
+	if test=0
 		setcall test datapointbit(data)
 	endif
 	return test
@@ -148,14 +148,14 @@ endfunction
 
 function stack64_enlarge(sd val)
 	sd b;setcall b is_for_64()
-	if b==(TRUE)
+	if b=(TRUE)
 		mult val 2
 	endif
 	return val
 endfunction
 function stack64_base(sv data)
 	sd is_arg;setcall is_arg stackrelativebit(data)
-	if is_arg==0
+	if is_arg=0
 		return 0
 	endif
 	sd val;setcall val stack64_enlarge((stackinitpush+dwsz))  #ebp/ebx+return
@@ -172,10 +172,10 @@ function val64_p_get()
 endfunction
 
 function convdata(sd type,sd dest,sd fnargs)
-	if type==(convdata_total)
+	if type=(convdata_total)
 		data nr_of_args#1
 		return nr_of_args   ##ms_convention or lin
-	elseif type==(convdata_call)
+	elseif type=(convdata_call)
 		#rdi
 		char hex_1={REX_Operand_64,moveatprocthemem,ediregnumber*toregopcode|espregnumber,0x24,0}
 		#rsi
@@ -188,7 +188,7 @@ function convdata(sd type,sd dest,sd fna
 		char hex_5={REX_R8_15,moveatprocthemem,0x44,0x24};char c5o#1
 		#r9,rsp+
 		char hex_6={REX_R8_15,moveatprocthemem,0x4C,0x24};char c6o#1
-		if nr_of_args==(lin_convention)
+		if nr_of_args=(lin_convention)
 			set dest# #hex_1
 			incst dest;set dest# #hex_2
 			incst dest
@@ -198,7 +198,7 @@ function convdata(sd type,sd dest,sd fna
 		incst dest;set dest# #hex_5
 		incst dest;set dest# #hex_6
 		ret
-	elseif type==(convdata_fn)
+	elseif type=(convdata_fn)
 		const functionxlin_start=!
 		#pop a
 		char functionxlin_code=0x58
@@ -233,31 +233,31 @@ function convdata(sd type,sd dest,sd fna
 		#mov [rsp+(20h/30h)],r9
 		char *={REX_R8_15,moveatmemtheproc,0x4C,0x24};char f6o#1
 
-		if nr_of_args==(ms_convention)
-			if fnargs==0
+		if nr_of_args=(ms_convention)
+			if fnargs=0
 				set dest# 0
-			elseif fnargs==1
+			elseif fnargs=1
 				set dest# (conv_fn_a1)
-			elseif fnargs==2
+			elseif fnargs=2
 				set dest# (conv_fn_a2)
-			elseif fnargs==3
+			elseif fnargs=3
 				set dest# (conv_fn_a3)
 			else
 				set dest# (!-functionx_start)
 			endelse
 			return #functionx_code
 		endif
-		if fnargs==0
+		if fnargs=0
 			set dest# (functionxlin_shadow)
-		elseif fnargs==1
+		elseif fnargs=1
 			set dest# (conv_fn_b1)
-		elseif fnargs==2
+		elseif fnargs=2
 			set dest# (conv_fn_b2)
-		elseif fnargs==3
+		elseif fnargs=3
 			set dest# (conv_fn_b3)
-		elseif fnargs==4
+		elseif fnargs=4
 			set dest# (conv_fn_b4)
-		elseif fnargs==5
+		elseif fnargs=5
 			set dest# (conv_fn_b5)
 		else
 			set dest# (!-functionxlin_start)
@@ -265,7 +265,7 @@ function convdata(sd type,sd dest,sd fna
 		return #functionxlin_code
 	endelseif
 	set nr_of_args dest
-	if nr_of_args==(ms_convention)
+	if nr_of_args=(ms_convention)
 		set c3 0x0C;set c3o 0
 		set c4 0x54;set c4o 8
 		set c5o 16;set c6o 24
@@ -292,7 +292,7 @@ function function_call_64fm(sd nr_of_arg
 				incst hex_n;SetCall err addtosec(hex_n#,5,code);If err!=(noerror);Return err;EndIf
 				if nr_of_args>3
 					incst hex_n;SetCall err addtosec(hex_n#,5,code);If err!=(noerror);Return err;EndIf
-					if conv==(lin_convention)
+					if conv=(lin_convention)
 						if nr_of_args>4
 							incst hex_n;SetCall err addtosec(hex_n#,5,code);If err!=(noerror);Return err;EndIf
 							if nr_of_args>5
@@ -312,8 +312,8 @@ function function_call_64f(sd hex_n,sd c
 	set nr_of_args nr_of_args#
 	#
 	setcall err function_call_64fm(nr_of_args,hex_n,conv,code)
-	If err==(noerror)
-		if conv==(ms_convention)
+	If err=(noerror)
+		if conv=(ms_convention)
 			if nr_of_args<conv
 				#shadow space
 				#sub esp,x;default 4 args stack space convention
@@ -339,7 +339,7 @@ function function_call_64(sd is_callex)
 	sd hex_1;sd hex_2;sd hex_3;sd hex_4;sd hex_5;sd hex_6
 	call convdata((convdata_call),#hex_1)
 	#
-	if is_callex==(FALSE)
+	if is_callex=(FALSE)
 		setcall err function_call_64f(#hex_1,conv,code)
 		Return err
 	endif
@@ -383,7 +383,7 @@ function function_call_64(sd is_callex)
 	set j_off 25
 	SetCall err addtosec(#cmp_je,8,code);If err!=(noerror);Return err;EndIf
 	SetCall err addtosec(#callex_conv,25,code);If err!=(noerror);Return err;EndIf
-	if conv==(lin_convention)
+	if conv=(lin_convention)
 		SetCall err addtosec(hex_6,5,code);If err!=(noerror);Return err;EndIf
 		SetCall err addtosec(hex_5,5,code);If err!=(noerror);Return err;EndIf
 	endif
@@ -395,7 +395,7 @@ function function_call_64(sd is_callex)
 	xor rspwithoffset# (disp8mod)
 	#
 	#shadow space
-	if conv==(ms_convention)
+	if conv=(ms_convention)
 		#neg al
 		char callex_shadow={0xf6,3*toregopcode|regregmod}
 		#add al conv-1
--- ocompiler-1.orig/src/files/functions/64/reloc.s
+++ ocompiler-1/src/files/functions/64/reloc.s
@@ -3,7 +3,7 @@
 function reloc64_init()
 	sd a%p_pref_reloc_64
 	sd b%p_elf64_r_info_type
-	if a#==(TRUE)
+	if a#=(TRUE)
 		set b# (R_X86_64_64)
 	endif
 	#blank is at inits
@@ -11,7 +11,7 @@ endfunction
 
 function reloc64_offset(sd offset)
 	sd a%p_elf64_r_info_type
-	if a#==(R_X86_64_64)
+	if a#=(R_X86_64_64)
 		add offset 1
 	endif
 	return offset
@@ -19,7 +19,7 @@ endfunction
 #er
 function reloc64_ante()
 	sd a%p_elf64_r_info_type
-	if a#==(R_X86_64_64)
+	if a#=(R_X86_64_64)
 		sd err
 		call rex_w(#err)
 		return err
@@ -29,7 +29,7 @@ endfunction
 const reloc64_add=dwsz
 function reloc64_mid()
 	sd a%p_elf64_r_info_type
-	if a#==(R_X86_64_64)
+	if a#=(R_X86_64_64)
 		return (reloc64_add)
 	endif
 	return 0
@@ -37,7 +37,7 @@ endfunction
 #er
 function reloc64_post_base_extension(sd struct,sd fill)
 	sd a%p_elf64_r_info_type
-	if a#==(R_X86_64_64)
+	if a#=(R_X86_64_64)
 		sd err
 		#extension is for example -1 at sd=const, mostly are 0
 		SetCall err addtosec(#fill,(reloc64_add),struct)
--- ocompiler-1.orig/src/files/functions/actions/argstwo.s
+++ ocompiler-1/src/files/functions/actions/argstwo.s
@@ -45,11 +45,11 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 
 	sd subtype_test
 
-	if allowdata==(allow_later_sec)
+	if allowdata=(allow_later_sec)
 		#pass_init or pass_calls
 		set subtype_test subtype;and subtype_test (x_call_flag)
-		if subtype_test==0
-			if parses==(pass_init)
+		if subtype_test=0
+			if parses=(pass_init)
 				setcall errnr getarg(ptrcontent,ptrsize,ptrsize#,(allow_later),(FORWARD)) #there are 4 more arguments but are not used
 				return errnr
 			else
@@ -87,11 +87,11 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 	Set primcalltype false
 
 	sd big;sd rem
-	If ptrcondition==false
+	If ptrcondition=false
 		#imm second arg can be, at conditions was already called
 		call setimm()
 
-		if subtype==(cCALLEX_primsec)
+		if subtype=(cCALLEX_primsec)
 		#the text for callexx is elsewhere
 			Set opprim atprocthemem
 			#Set regprep ecxreg
@@ -105,14 +105,14 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 				and subtype ~primsec_flags
 			endif
 			sd xlog
-			if subtype==(cSET)
+			if subtype=(cSET)
 				Set opprim atmemtheproc
 				set xlog (Xfile_action2_set)
-			ElseIf subtype==(cADD)
+			ElseIf subtype=(cADD)
 				Char addprim={0x01}
 				Set opprim addprim
 				set xlog (Xfile_action2_add)
-			ElseIf subtype==(cSUB)
+			ElseIf subtype=(cSUB)
 				Char subprim={0x29}
 				Set opprim subprim
 				set xlog (Xfile_action2_sub)
@@ -121,14 +121,14 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 				#Set regprep ecxreg
 				Set regopcode ecxreg
 				Set divmul true
-				if lowprim==(FALSE);setcall big is_big(dataargprim,sufixprim)
+				if lowprim=(FALSE);setcall big is_big(dataargprim,sufixprim)
 				else;set big (FALSE);endelse
-				if subtype==(cREM)
+				if subtype=(cREM)
 					set rem (TRUE)
 					set xlog (Xfile_action2_rem)
 				else
 					set rem (FALSE)
-					if subtype==(cMULT)
+					if subtype=(cMULT)
 						set xlog (Xfile_action2_mult)
 					else
 						set xlog (Xfile_action2_div)
@@ -137,11 +137,11 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 			Else
 			#If subtype<=(cXOR)
 				Set sameimportant false
-				If subtype==(cAND)
+				If subtype=(cAND)
 					Char andprim={0x21}
 					Set opprim andprim
 					set xlog (Xfile_action2_and)
-				ElseIf subtype==(cOR)
+				ElseIf subtype=(cOR)
 					Char orprim={0x09}
 					Set opprim orprim
 					set xlog (Xfile_action2_or)
@@ -168,9 +168,6 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 		Data one=1
 		Add condition one
 
-		Data conditionmodrm#1
-		Set conditionmodrm condition#
-
 		Char compare=0x39
 		Set opprim compare
 
@@ -178,10 +175,18 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 		char compimminitial={0x39}
 		char compimmop#1
 		set compimmop compimminitial
+
+		Data conditionmodrm#1
+		Set conditionmodrm condition#
+
+		setcall errnr xfile_add_char_if(conditionmodrm)
+		if errnr!=(noerror)
+			return errnr
+		endif
 	EndElse
 
-	If primcalltype==false
-		if ptrcondition==false
+	If primcalltype=false
+		if ptrcondition=false
 			if subtype!=(cCALLEX_primsec)
 				SetCall errnr arg(ptrcontent,ptrsize,ptrdataargsec,ptrlowsec,ptrsufixsec,true,(allow_yes))
 			else
@@ -195,7 +200,7 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 		EndIf
 	Else
 		setcall errnr xfile_add_char_if((Xfile_arg_call))
-		if errnr==(noerror)
+		if errnr=(noerror)
 			SetCall errnr parsefunction(ptrcontent,ptrsize,callfn,subtype_test) #there is 1 more argument but is not used
 			If errnr!=noerr
 				Return errnr
@@ -211,8 +216,8 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 	#Set intchar noreg
 	Set opsec atprocthemem
 
-	If ptrcondition==false
-		If lowprim==true
+	If ptrcondition=false
+		If lowprim=true
 			Dec opprim
 			if subtype!=(cCALLEX_primsec)
 				#at callex they can be different
@@ -222,9 +227,9 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 				#it is not possible to push from ff...al and scalar push using full rcx*8 at normal (therefor same for ff...cl)
 				return "Second argument at CALLEX must not be one byte."
 			endelse
-		ElseIf lowsec==true
+		ElseIf lowsec=true
 			#Dec opsec
-			If sameimportant==true
+			If sameimportant=true
 				#Set intchar regprep
 				set is_prepare (TRUE)
 			Else
@@ -234,14 +239,14 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 		EndElseIf
 	Else
 		sd store_big;set store_big (FALSE)
-		If lowprim==lowsec
-			If lowprim==true
+		If lowprim=lowsec
+			If lowprim=true
 				Dec opprim
 				Dec opsec
 			else
 			#this code with the rex promotes, if this near comp later,undefined dataargsec(1==1)will go wrong in is_big, viol
 				setcall imm getisimm()
-				if imm==false
+				if imm=false
 				#it is 1==big/medium
 					setcall store_big is_big(dataargsec,sufixsec)
 				endif
@@ -250,7 +255,7 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 			#Dec opsec
 			#Set intchar eaxreg
 			set is_prepare (TRUE)
-			If lowprim==true
+			If lowprim=true
 				#case compare low vs high, then: get low on all eax compare with high but op from mem vs proc becomes proc vs mem
 				Add opprim two
 				add compimmop two
@@ -270,9 +275,9 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 
 	Data codeptr%%ptr_codesec
 
-	If primcalltype==false
+	If primcalltype=false
 		setcall imm getisimm()
-		if imm==true
+		if imm=true
 			#char immtake=0xB8
 			#set opsec immtake
 			#if divmul==(TRUE)
@@ -286,7 +291,7 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 				SetCall errnr write_imm_sign(dataargsec,regopcode)
 			endelse
 		else
-			if p_prefix#==(FALSE)
+			if p_prefix#=(FALSE)
 				sd comp_at_bigs
 				setcall comp_at_bigs comp_sec(lowsec,dataargprim,sufixprim,dataargsec,sufixsec,sameimportant,is_prepare)
 				setcall errnr writeop_promotes(dataargsec,opsec,sufixsec,regopcode,lowsec,comp_at_bigs)
@@ -301,12 +306,12 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 		If errnr!=noerr
 			Return errnr
 		EndIf
-	Elseif divmul==(TRUE)
+	Elseif divmul=(TRUE)
 		#only at multcall and divcall
 		char transferreturntoecx={0x89,0xc1}
 		str ptrcall^transferreturntoecx
 		data calltransfersize=2
-		if big==(TRUE)
+		if big=(TRUE)
 			call rex_w(#errnr)
 			If errnr!=noerr;Return errnr;EndIf
 		endif
@@ -322,7 +327,7 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 
 	#setcall imm getfirst_isimm() can be this but needing to deactivate imm slot
 	setcall imm getisimm()
-	if imm==true
+	if imm=true
 		#first argument imm are comparations
 		#first value is imm, or second value is imm (switched)
 		SetCall errnr write_imm_sign(dataargprim,(ecxregnumber)) #0xb8+
@@ -333,14 +338,14 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 		Return errnr
 	EndIf
 
-	If divmul==true
+	If divmul=true
 		Data regreg=RegReg
 
 		Char regopcodemult={5}
 		#If you don't care about the upper half, you can use either mul or imul
 		Char regopcodeex#1
 
-		If subtype==(cMULT)
+		If subtype=(cMULT)
 			Set regopcodeex regopcodemult
 		Else
 			setcall errnr div_prepare(lowprim,big,#regopcodeex)
@@ -357,7 +362,7 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 		Set opcodeex opcodexini
 		Set storeex atmemtheproc
 
-		If lowprim==true
+		If lowprim=true
 			Dec opcodeex
 			Dec storeex
 		EndIf
@@ -365,7 +370,7 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 		SetCall modrmex formmodrm(regreg,regopcodeex,ecxreg)
 		Set regopcodeex modrmex
 
-		if big==(TRUE)
+		if big=(TRUE)
 			call rex_w(#errnr)
 			If errnr!=noerr;Return errnr;EndIf
 		endif
@@ -374,24 +379,24 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 			Return errnr
 		EndIf
 
-		if lowprim==(TRUE)
+		if lowprim=(TRUE)
 		# str# ss# char
 		#rdx is ready
-			if rem==(FALSE)
+			if rem=(FALSE)
 				setcall storeexrm formmodrm((mod_0),eaxreg,(edxregnumber))
 			else
 				setcall storeexrm formmodrm((mod_0),(ahregnumber),(edxregnumber))
 			endelse
 			setcall errnr addtosec(#storeex,2,codeptr)
 		else
-			if rem==(FALSE)
+			if rem=(FALSE)
 				SetCall errnr writeop(dataargprim,storeex,sufixprim,eaxreg,lowprim)
 			else
 				SetCall errnr writeoperation(dataargprim,storeex,sufixprim,(edxregnumber),ecxreg,lowprim)
 			endelse
 		endelse
 	ElseIf ptrcondition!=false
-		if imm==true
+		if imm=true
 			#first imm true only at comparations
 			#continue to write the imm comparation(first is imm, second doesnt care)ex: 1(constant)==1(constant)->cmp ecx,eax (eax,ecx can be if switch)
 			char immcompdata#1
@@ -399,7 +404,7 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 			char *immcompdatamodrm=0xc1
 			str immcomp^immcompdata
 			data immcompsz=2
-			if store_big==(TRUE)
+			if store_big=(TRUE)
 				call rex_w(#errnr)
 				If errnr!=noerr;Return errnr;EndIf
 			endif
@@ -428,21 +433,21 @@ EndFunction
 #-1 normal, 0 unpromote, 1 sign extend, 2 zero extend
 function comp_sec(sd lowsec,sd dataargprim,sd sufixprim,sd dataargsec,sd sufixsec,sd sameimportant,sd is_prepare)
 	sd prim
-	if lowsec==(FALSE)
+	if lowsec=(FALSE)
 		setcall prim is_big_imm(dataargprim,sufixprim)
 		sd sec;setcall sec is_big(dataargsec,sufixsec)
 		if prim!=sec
-			if sec==(TRUE)
+			if sec=(TRUE)
 				#first is low/medium, don't promote the big second
 				return 0
-			elseif sameimportant==(TRUE)
+			elseif sameimportant=(TRUE)
 				#first is big, second is medium, keep sign for second
 				return 1
 			endelseif
 		endif
-	elseif is_prepare==(TRUE)
+	elseif is_prepare=(TRUE)
 		setcall prim is_big_imm(dataargprim,sufixprim)
-		if prim==(TRUE)
+		if prim=(TRUE)
 			#zero extend all r64
 			sd p;setcall p val64_p_get()
 			set p# (val64_willbe)
@@ -456,7 +461,7 @@ endfunction
 function is_big_imm(sd data,sd sufix)
 	sd immprim
 	setcall immprim getfirst_isimm()
-	if immprim==(FALSE)
+	if immprim=(FALSE)
 		sd b
 		setcall b is_big(data,sufix)
 		return b
@@ -467,8 +472,8 @@ endfunction
 function writeoper(sd takeindex,sd location,sd sufix)
 	sd err
 	setcall err writetake_offset(takeindex,location)
-	If err==(noerror)
-		if sufix==(sufix_true)
+	If err=(noerror)
+		if sufix=(sufix_true)
 			sd t;setcall t sufix64(location)
 			setcall err sufix_take(takeindex,t)
 		endif
@@ -478,8 +483,8 @@ endfunction
 
 function writeop_prim(sd dataargprim,sd opprim,sd sufixprim,sd lowprim,sd sameimportant,sd lowsec)
 	sd err
-	if sameimportant==(FALSE)
-		if lowsec==(TRUE)
+	if sameimportant=(FALSE)
+		if lowsec=(TRUE)
 			#this is and/or... at sd low not needing to write rex
 			setcall err writeoper((edxregnumber),dataargprim,sufixprim)
 			if err!=(noerror);return err;endif
@@ -494,17 +499,17 @@ endfunction
 #err
 function writeop_promotes(sd dataarg,sd op,sd sufix,sd regopcode,sd low,sd comp_at_bigs)
 	sd err
-	if comp_at_bigs==-1
+	if comp_at_bigs=-1
 		SetCall err writeop(dataarg,op,sufix,regopcode,low)
 	else #0-2
 		setcall err writeoper((edxregnumber),dataarg,sufix) #no val64 recordings
-		if err==(noerror)
-			if comp_at_bigs==1 #these are all 64
+		if err=(noerror)
+			if comp_at_bigs=1 #these are all 64
 				# sd    data    must take signextended data at 64
 				set op (moveatprocthemem_sign)
 				sd p;setcall p val64_p_get()
 				set p# (val64_willbe)
-			elseif comp_at_bigs==2
+			elseif comp_at_bigs=2
 				#2 for zero extend; these are all low
 				set op 0xb6
 			endelseif
@@ -564,14 +569,14 @@ function div_prepare(sd low,sd big,ss p_
 	vData codeptr%%ptr_codesec
 	Char regopcodeidiv={7}
 	sd errnr
-	if big==(TRUE)
+	if big=(TRUE)
 	#bt rax,63;jc,;mov 0,edx;jmp,;mov -1,rdx
 	#In x64, any operation on a 32-bit register clears the top 32 bits of the corresponding 64-bit register too, so there's no need to use mov 0,rax (and xor rax, rax)
 		const div_prepare_high=!
 		char high={REX_Operand_64,twobytesinstruction_byte1,bt_instruction,bt_atdiv,63,jnc_instruction,9,REX_Operand_64,mov_imm_to_rm,regregmod|edxregnumber,-1,-1,-1,-1,jmp_rel8,5,atedximm,0,0,0,0}
 		SetCall errnr addtosec(#high,(!-div_prepare_high),codeptr)
 		set p_regopcode# regopcodeidiv
-	elseif low==(FALSE)
+	elseif low=(FALSE)
 	#bt eax,31;jc,;mov 0,edx;jmp,;mov -1,edx
 		const div_prepare_mediu=!
 		char mediu={twobytesinstruction_byte1,bt_instruction,bt_atdiv,31,jnc_instruction,7,atedximm,-1,-1,-1,-1,jmp_rel8,5,atedximm,0,0,0,0}
--- ocompiler-1.orig/src/files/functions/actions/dataparse.s
+++ ocompiler-1/src/files/functions/actions/dataparse.s
@@ -7,10 +7,10 @@ Function entryvarsfns(data content,data
 	SetCall pointer strinvars_ignoreref(content,size,notype)
 	Data noerr=noerror
 	Data zero=0
-	If pointer==zero
+	If pointer=zero
 		Data fns%%ptr_functions
 		SetCall pointer vars_ignoreref(content,size,fns)
-		If pointer==zero
+		If pointer=zero
 			Return noerr
 		EndIf
 	EndIf
@@ -43,7 +43,7 @@ function get_dataSize()
 	vdata ptrdataSize%ptrdataSize
 	sd reg;set reg ptrdataSize#
 	vdata ptr_nobits_virtual%ptr_nobits_virtual
-	if ptr_nobits_virtual#==(Yes)
+	if ptr_nobits_virtual#=(Yes)
 		#this is here because this function is called from fndecargs and from simple declare add reference
 		vdata ptr_nobitsDataStart%ptr_nobitsDataStart
 		sub reg ptr_nobitsDataStart#
@@ -83,8 +83,8 @@ Function addvarreference(sv ptrcontent,s
 		data stack#1
 		data ptrS^stack
 		call stackfilter(typenumber,ptrS)
-		if stack==false
-			if is_expand==(TRUE)
+		if stack=false
+			if is_expand=(TRUE)
 				setcall value get_img_vdata_dataSize()
 
 				#commented was before expandbit at class scopes
@@ -96,7 +96,7 @@ Function addvarreference(sv ptrcontent,s
 				setcall value get_img_vdata_dataReg()
 			endelse
 		else
-			if stackoffset==zero
+			if stackoffset=zero
 				#stack free declared
 				setcall value getramp_ebxrel()
 				#data ebx_relative=ebxregnumber*tostack_relative
@@ -109,8 +109,8 @@ Function addvarreference(sv ptrcontent,s
 			endelse
 			or mask (stackbit)
 			sd vbool
-			if typenumber==(stackvaluenumber);set vbool (TRUE);else;setcall vbool sd_as_sv((sd_as_sv_bool),typenumber);endelse
-			if vbool==(TRUE)
+			if typenumber=(stackvaluenumber);set vbool (TRUE);else;setcall vbool sd_as_sv((sd_as_sv_bool),typenumber);endelse
+			if vbool=(TRUE)
 				or mask (pointbit)
 			endif
 		endelse
@@ -137,7 +137,7 @@ function addvarreferenceorunref(sv ptrco
 	data noerr=noerror
 
 	Data zero=0
-	If valsize==zero
+	If valsize=zero
 		Char _namecverr="Name for variable/constant expected."
 		vStr namecverr^_namecverr
 		Return namecverr
@@ -149,19 +149,19 @@ function addvarreferenceorunref(sv ptrco
 	Set firstchar content#
 
 	If firstchar!=(unrefsign)
-		if firstchar==(throwlesssign)   #throwless if on a throwing area
-			If typenumber==(constantsnumber)
+		if firstchar=(throwlesssign)   #throwless if on a throwing area
+			If typenumber=(constantsnumber)
 				Return "Unexpected throwless sign ('^') at constant declaration."
 			EndIf
 			dec valsize
-			If valsize==zero
+			If valsize=zero
 				Return "Name for variable expected."
 			endif
 			or mask (aftercallthrowlessbit)
 			call stepcursors(ptrcontent,ptrsize)
 		elseIf typenumber!=(constantsnumber)
 			sd global_err_pB;setcall global_err_pB global_err_pBool()
-			if global_err_pB#==(FALSE)
+			if global_err_pB#=(FALSE)
 				or mask (aftercallthrowlessbit)
 			endif
 		endelseif
@@ -170,7 +170,7 @@ function addvarreferenceorunref(sv ptrco
 			Return err
 		EndIf
 	Else
-		If typenumber==(constantsnumber)
+		If typenumber=(constantsnumber)
 			Char unrefconstant="Unexpected unreference sign ('*') at constant declaration."
 			vStr ptrunrefconstant^unrefconstant
 			Return ptrunrefconstant
@@ -197,7 +197,7 @@ function getsign(ss content,sd size,ss a
 	SetCall valsize valinmem_pipes(content,size,reservesign,ptrsz)
 	If valsize!=size
 		Data constnr=constantsnumber
-		If typenumber==constnr
+		If typenumber=constnr
 			Char constreserveerr="Unexpected reserve sign ('#') at constant declaration."
 			Str ptrconstreserveerr^constreserveerr
 			Return ptrconstreserveerr
@@ -212,12 +212,12 @@ function getsign(ss content,sd size,ss a
 	If valsize!=size
 		Char ptrrelchar="Incorrect relocation sign ('%') used at CHAR/CONST declaration."
 		Str ptrptrrelchar^ptrrelchar
-		If typenumber==charnr
+		If typenumber=charnr
 			#stackfilter2   grep5
-			if stack==(FALSE)
+			if stack=(FALSE)
 				Return ptrptrrelchar
 			endif
-		ElseIf typenumber==constnr
+		ElseIf typenumber=constnr
 			Return ptrptrrelchar
 		EndElseIf
 		Set assigntype# equalsign
@@ -225,10 +225,10 @@ function getsign(ss content,sd size,ss a
 		#this was moved here because of xfile, to know datax relocation
 		call advancecursors(#content,#size,valsize)
 		call stepcursors(#content,#size)
-		if size==0
+		if size=0
 			return "Size 0 when testing for datax relocation."
 		endif
-		if content#==relsign
+		if content#=relsign
 			set ptrdataxrel# (TRUE)
 		else
 			set ptrdataxrel# (FALSE)
@@ -239,21 +239,21 @@ function getsign(ss content,sd size,ss a
 	Char pointersign=pointersigndeclare
 	SetCall valsize valinmem(content,size,pointersign)
 	If valsize!=size
-		If typenumber==charnr
+		If typenumber=charnr
 			#grep    stackfilter2 4
-			if stack==(FALSE)
+			if stack=(FALSE)
 				Char ptrchar="Incorrect pointer sign ('^') used at CHAR declaration."
 				Str ptrptrchar^ptrchar
 				Return ptrptrchar
 			endif
 		EndIf
 
-		if valsize==0
+		if valsize=0
 			#throwless ^name^
 			#If typenumber==constnr error is elsewhere also for another signs
 			inc content;dec size
 			SetCall valsize valinmem(content,size,pointersign)
-			If valsize==size
+			If valsize=size
 				return "Throwless without a sign."   #at another sign there is this check at addvar...
 			endif
 			inc valsize ##put throwless at size for later recons
@@ -267,7 +267,7 @@ function getsign(ss content,sd size,ss a
 		return noerr
 	endif
 
-	if stack==true
+	if stack=true
 		char nosign=nosign
 		Set assigntype# nosign
 		return noerr
--- ocompiler-1.orig/src/files/functions/actions/declare.s
+++ ocompiler-1/src/files/functions/actions/declare.s
@@ -23,46 +23,46 @@ function declare(sv pcontent,sd pcomsize
 	#endif
 
 	sd xfile_decltype
-	if declare_typenumber==(vintegersnumber)
+	if declare_typenumber=(vintegersnumber)
 		set is_stack (FALSE);set typenumber (integersnumber)
-		if bool_64==(TRUE);set mask (datapointbit)
-			if parses==(pass_init)
+		if bool_64=(TRUE);set mask (datapointbit)
+			if parses=(pass_init)
 				set unitsize (qwsz)
 			else
 				set xfile_decltype (Xfile_decltype_longInt)
 			endelse
 		else;set mask 0
-			if parses==(pass_init)
+			if parses=(pass_init)
 				set unitsize (dwsz)
 			else
 				set xfile_decltype (Xfile_decltype_longInt)
 			endelse
 		endelse
-	elseif declare_typenumber==(vstringsnumber)
+	elseif declare_typenumber=(vstringsnumber)
 		set is_stack (FALSE);set typenumber (stringsnumber)
-		if bool_64==(TRUE);set mask (datapointbit)
-			if parses==(pass_init)
+		if bool_64=(TRUE);set mask (datapointbit)
+			if parses=(pass_init)
 				set unitsize (qwsz)
 			else
 				set xfile_decltype (Xfile_decltype_longByte)
 			endelse
 		else;set mask 0
-			if parses==(pass_init)
+			if parses=(pass_init)
 				set unitsize (dwsz)
 			else
 				set xfile_decltype (Xfile_decltype_longByte)
 			endelse
 		endelse
-	elseif declare_typenumber==(valuesnumber)
+	elseif declare_typenumber=(valuesnumber)
 		set is_stack (FALSE);set typenumber (integersnumber)
-		if bool_64==(TRUE);set mask (valueslongmask)
-			if parses==(pass_init)
+		if bool_64=(TRUE);set mask (valueslongmask)
+			if parses=(pass_init)
 				set unitsize (qwsz)
 			else
 				set xfile_decltype (Xfile_decltype_long)
 			endelse
 		else;set mask 0
-			if parses==(pass_init)
+			if parses=(pass_init)
 				set unitsize (dwsz)
 			else
 				set xfile_decltype (Xfile_decltype_long)
@@ -70,9 +70,9 @@ function declare(sv pcontent,sd pcomsize
 		endelse
 	else
 		setcall typenumber stackfilter(declare_typenumber,#is_stack)
-		if parses==(pass_init)
-			if is_stack==(TRUE)
-				if typenumber==(stringsnumber)
+		if parses=(pass_init)
+			if is_stack=(TRUE)
+				if typenumber=(stringsnumber)
 					set unitsize 0
 				else
 					call advancecursors(pcontent,pcomsize,pcomsize#)
@@ -88,25 +88,25 @@ function declare(sv pcontent,sd pcomsize
 				endelse
 			endelse
 		else
-			if is_stack==(TRUE)
+			if is_stack=(TRUE)
 				#must be at the start
 				call entryscope_verify_code()
 
 				#xfile part
-				if typenumber==(valuesinnernumber)
+				if typenumber=(valuesinnernumber)
 					set xfile_decltype (Xfile_decltype_long)
-				elseif typenumber==(integersnumber)
+				elseif typenumber=(integersnumber)
 					set xfile_decltype (Xfile_decltype_longInt)
 				else #(stringsnumber)
 					set xfile_decltype (Xfile_decltype_longByte)
 				endelse
 			else
 				#xfile part
-				if typenumber==(constantsnumber)
+				if typenumber=(constantsnumber)
 					set xfile_decltype (Xfile_decltype_const)
-				elseif typenumber==(charnumber)
+				elseif typenumber=(charnumber)
 					set xfile_decltype (Xfile_decltype_byte)
-				elseif typenumber==(integersnumber)
+				elseif typenumber=(integersnumber)
 					set xfile_decltype (Xfile_decltype_int)
 				else #(stringsnumber)
 					set xfile_decltype (Xfile_decltype_intByte)
@@ -119,12 +119,12 @@ function declare(sv pcontent,sd pcomsize
 	sd err
 	sd relocbool=FALSE;sd dataxrel
 	setcall err getsign(pcontent#,pcomsize#,#sign,#valsize,typenumber,is_stack,#relocbool,#dataxrel)
-	if err==(noerror)
-		if parses==(pass_init)
-			if typenumber==(constantsnumber)
+	if err=(noerror)
+		if parses=(pass_init)
+			if typenumber=(constantsnumber)
 				setcall err addtolog_withchar_ex_atunused(pcontent#,valsize,(log_declare))
-				if err==(noerror)
-					if sign==(pointersigndeclare)
+				if err=(noerror)
+					if sign=(pointersigndeclare)
 						call advancecursors(pcontent,pcomsize,pcomsize#)
 						return (noerror)
 					endif
@@ -133,8 +133,8 @@ function declare(sv pcontent,sd pcomsize
 				endif
 			else
 				setcall err vars_log_prepare(pcontent#,valsize)
-				if err==(noerror)
-					if unitsize==0
+				if err=(noerror)
+					if unitsize=0
 					#ss?
 						if sign!=(assignsign)
 							call advancecursors(pcontent,pcomsize,pcomsize#)
@@ -143,12 +143,12 @@ function declare(sv pcontent,sd pcomsize
 						#ss =% ""/x/{}
 					else
 					#search for data%  with R_X86_64_64
-						if relocbool==(TRUE)
-							if mask==0
+						if relocbool=(TRUE)
+							if mask=0
 							#data str
 							#strs are without ""
 								vdata is_64_and_pref_is_rx866464%p_elf64_r_info_type
-								if is_64_and_pref_is_rx866464#==(R_X86_64_64)
+								if is_64_and_pref_is_rx866464#=(R_X86_64_64)
 									set unitsize (qwsz)
 								endif
 							endif
@@ -156,7 +156,7 @@ function declare(sv pcontent,sd pcomsize
 					endelse
 					setcall err dataassign(pcontent,pcomsize,sign,valsize,typenumber,#unitsize,mask,relocbool,dataxrel,is_stack) #there is 1 more argument but is not used
 					#                                                                               since %%|
-					if is_expand==(FALSE)
+					if is_expand=(FALSE)
 						sd pdataReg%%ptr_dataReg
 						add pdataReg# unitsize
 					else
@@ -167,16 +167,16 @@ function declare(sv pcontent,sd pcomsize
 			endelse
 		else
 			setcall err xfile_add_declare_if(xfile_decltype,is_stack,is_expand,pcontent#,valsize,sign,relocbool,dataxrel)
-			if err==(noerror)
-				if typenumber==(constantsnumber)
+			if err=(noerror)
+				if typenumber=(constantsnumber)
 					if sign!=(pointersigndeclare)
 						setcall err xfile_add_char_if((Xfile_declmode_value))
-						if err==(noerror)
+						if err=(noerror)
 							call advancecursors(pcontent,pcomsize,pcomsize#)
 							return (noerror)
 						endif
 					endif
-				elseif is_expand==(TRUE)
+				elseif is_expand=(TRUE)
 					if sign!=(reservesign)
 						return "Virtual declarations can have only the reserve sign."
 					endif
--- ocompiler-1.orig/src/files/functions/actions/enumcomma.s
+++ ocompiler-1/src/files/functions/actions/enumcomma.s
@@ -9,17 +9,17 @@ function writevar(sd ptrvalue,sd unitsiz
 
 	sd for_64
 
-	if stack==false
+	if stack=false
 		data ptrdatasec%%ptr_datasec
-		if ptrobject#==1
-			If relocbool==true
+		if ptrobject#=1
+			If relocbool=true
 				#data
 				Data ptraddresses%%ptr_addresses
 				Data relocoff=0
 
 				SetCall err adddirectrel_base(ptraddresses,relocoff,relindex,ptrvalue#)
 				If err!=noerr;Return err;EndIf
-				if relindex==(codeind)
+				if relindex=(codeind)
 					#data^functionReloc
 					#this is at relocs not at data
 					setcall err unresReloc(ptraddresses)
@@ -33,7 +33,7 @@ function writevar(sd ptrvalue,sd unitsiz
 
 				#endif
 				SetCall err addtosec(ptrvalue,(dwsz),ptrdatasec)
-				If err==(noerror)
+				If err=(noerror)
 					setcall err reloc64_post_base(ptrdatasec)
 				EndIf
 				return err
@@ -49,15 +49,15 @@ function writevar(sd ptrvalue,sd unitsiz
 	endif
 
 	setcall for_64 is_for_64()
-	if ptrobject#==1
-		If relocbool==true
+	if ptrobject#=1
+		If relocbool=true
 			#code
 			sd stackoff
 			setcall stackoff reloc64_offset((rampadd_value_off))
 			data ptrextra%%ptr_extra
 			setcall err adddirectrel_base(ptrextra,stackoff,relindex,ptrvalue#)
 			If err!=noerr;Return err;EndIf
-			if relindex==(codeind)
+			if relindex=(codeind)
 				#s^fn
 				setcall err unresReloc(ptrextra)
 				If err!=noerr;Return err;EndIf
@@ -75,7 +75,7 @@ function writevar(sd ptrvalue,sd unitsiz
 		#s=consts
 		sd test=~0x7fFFffFF
 		and test ptrvalue#
-		if test==0
+		if test=0
 			setcall err addtocodefordata(ptrvalue#,for_64,0)
 		else
 			#keep sign, for comparations
@@ -107,8 +107,8 @@ Function enumcommas(sv ptrcontent,sd ptr
 	Set content ptrcontent#
 
 	Data fnnr=functionsnumber
-	If fndecandgroupOrpush==true
-		If typenumberOrparses==fnnr
+	If fndecandgroupOrpush=true
+		If typenumberOrparses=fnnr
 			Data stackoffset#1
 			Set stackoffset zero
 			Data ptrstackoffset^stackoffset
@@ -117,12 +117,12 @@ Function enumcommas(sv ptrcontent,sd ptr
 			Data dwSz=dwsz
 			Data unitsize#1   #ignored at stack
 			Data charnr=charnumber
-			if punitsizeOrparses==(NULL)
+			if punitsizeOrparses=(NULL)
 				#here is only at decgroup and hex, and pass_write
 				setcall err xfile_prepare_commas_if()
 				If err!=noerr;Return err;EndIf
 
-				If typenumberOrparses==charnr
+				If typenumberOrparses=charnr
 				#ignored at stack value   grep stackfilter2  1
 					Set unitsize bSz    ##used also at hex
 				Else
@@ -138,8 +138,8 @@ Function enumcommas(sv ptrcontent,sd ptr
 		Set storecontent content
 		Set sens backward
 	EndElse
-	While csv==csvloop
-		If fndecandgroupOrpush==true
+	While csv=csvloop
+		If fndecandgroupOrpush=true
 			SetCall argsize valinmemsens(content,sz,comma,sens)
 			#allow (x,    y,   z) spaces
 			sd sizeaux
@@ -150,7 +150,7 @@ Function enumcommas(sv ptrcontent,sd ptr
 			set argumentsize argsize
 			sub argumentsize sizeaux
 			#
-			If typenumberOrparses==fnnr
+			If typenumberOrparses=fnnr
 				if punitsizeOrparses!=(pass_write0)
 					#pass_init/pass_write
 					SetCall err fndecargs(ptrcontent,ptrsize,argumentsize,ptrstackoffset,punitsizeOrparses)
@@ -162,14 +162,14 @@ Function enumcommas(sv ptrcontent,sd ptr
 					call advancecursors(ptrcontent,ptrsize,argumentsize)
 				endelse
 			Else
-				if punitsizeOrparses==(NULL)
+				if punitsizeOrparses=(NULL)
 					Data value#1
 					Data ptrvalue^value
 					SetCall err parseoperations(ptrcontent,ptrsize,argumentsize,ptrvalue,(FALSE))
 					If err!=noerr
 						Return err
 					EndIf
-					if hexOrunitsize==(not_hexenum)
+					if hexOrunitsize=(not_hexenum)
 						setcall err writevar(ptrvalue,unitsize,relocindx,stack,zero,long_mask,relocbool)
 						If err!=noerr
 							Return err
@@ -189,7 +189,7 @@ Function enumcommas(sv ptrcontent,sd ptr
 			EndElse
 		Else
 			#push
-			if typenumberOrparses==(pass_calls) #for regs at call   and shadow space
+			if typenumberOrparses=(pass_calls) #for regs at call   and shadow space
 				call nr_of_args_64need_count()
 			endif
 
@@ -197,14 +197,14 @@ Function enumcommas(sv ptrcontent,sd ptr
 				set argsize content
 				dec argsize
 				char d_quot=asciidoublequote
-				if argsize#==d_quot
+				if argsize#=d_quot
 					#look later at escapes, here only at the margins
 					#here the string ".." is in a good condition when quotes_forward was called at fn(...)
 					sd last;set last content
 					sub last sz
 					dec argsize
 					while argsize!=last
-						if argsize#==d_quot
+						if argsize#=d_quot
 							dec argsize
 							if argsize#!=(asciibs)
 								inc argsize
@@ -229,12 +229,12 @@ Function enumcommas(sv ptrcontent,sd ptr
 			sub ptrcontent# argsize
 			sub ptrsize# argsize
 			Data ptrargsize^argsize
-			if typenumberOrparses==(pass_init)
+			if typenumberOrparses=(pass_init)
 				setcall err getarg(ptrcontent,ptrargsize,argsize,(allow_later),sens) #there are 4 more arguments but are not used
 				If err!=noerr
 					Return err
 				EndIf
-			elseif typenumberOrparses==(pass_write)
+			elseif typenumberOrparses=(pass_write)
 				SetCall err argument(ptrcontent,ptrargsize,backward) #there is 1 more argument but is not used
 				If err!=noerr
 					Return err
@@ -245,7 +245,7 @@ Function enumcommas(sv ptrcontent,sd ptr
 		If sz!=zero
 			Dec sz
 			add ptrcontent# sens
-			if sens==(FORWARD)
+			if sens=(FORWARD)
 				sub ptrsize# sens
 			else
 				add ptrsize# sens
@@ -255,7 +255,7 @@ Function enumcommas(sv ptrcontent,sd ptr
 			Set csv zero
 		EndElse
 	EndWhile
-	If fndecandgroupOrpush==false
+	If fndecandgroupOrpush=false
 		Set ptrcontent# storecontent
 	EndIf
 	Return noerr
--- ocompiler-1.orig/src/files/functions/actions/fn.s
+++ ocompiler-1/src/files/functions/actions/fn.s
@@ -13,7 +13,7 @@ Function unresolvedcallsfn(data struct,d
 	Data true=TRUE
 	Data ptrobject%ptrobject
 
-	If ptrobject#==true
+	If ptrobject#=true
 		Data ptrextra%%ptr_extra
 		SetCall err addrel_base(offset,valuedata,atend,ptrextra)
 	Else
@@ -34,16 +34,16 @@ EndFunction
 function fnimp_exists(sd content,sd size)
 	sd fns%%ptr_functions
 	sd d;setcall d vars_ignoreref(content,size,fns)
-	if d==0
+	if d=0
 		return (noerror)
 	endif
 	return "Function/Import name is already defined."
 endfunction
 #xf
 function func_xfile(sd subtype)
-	if subtype==(cFUNCTIONX)
+	if subtype=(cFUNCTIONX)
 		return (Xfile_function_extern)
-	elseif subtype==(cENTRY)
+	elseif subtype=(cENTRY)
 		return (Xfile_function_entry)
 	endelseif
 	return (Xfile_function_traw) #or Xfile_function_not_x
@@ -68,12 +68,12 @@ Function parsefunction(data ptrcontent,d
 	Set size ptrsize#
 
 	SetCall sz valinmem(content,size,(asciiparenthesisstart))
-	If sz==zero
+	If sz=zero
 		Char funnameexp="Function name expected."
 		Str fnerr^funnameexp
 		Return fnerr
 	EndIf
-	If sz==size
+	If sz=size
 		Char startfnexp="Open parenthesis sign ('(') expected."
 		Str starterr^startfnexp
 		Return starterr
@@ -82,11 +82,11 @@ Function parsefunction(data ptrcontent,d
 	vdata p_parses%ptr_parses
 	sd parses;set parses p_parses#
 
-	If is_declare==true
+	If is_declare=true
 		Data fnnr=functionsnumber
 		Data value#1
 		Data ptrvalue^value
-		if parses==(pass_init)
+		if parses=(pass_init)
 			setcall err fnimp_exists(content,sz) #it is at first pass when only fns and imports are
 			if err!=(noerror)
 				return err
@@ -96,7 +96,7 @@ Function parsefunction(data ptrcontent,d
 
 			Data mask#1
 			#Data ptrobjfnmask%ptrobjfnmask
-			if el_or_e==(TRUE)
+			if el_or_e=(TRUE)
 				Set mask (referencebit)
 			else
 				set mask 0
@@ -107,7 +107,7 @@ Function parsefunction(data ptrcontent,d
 				or mask (x86_64bit)
 			endif
 			sd err_pb;setcall err_pb global_err_pBool()
-			if err_pb#==(FALSE)
+			if err_pb#=(FALSE)
 				or mask (aftercallthrowlessbit)
 			endif
 
@@ -122,7 +122,7 @@ Function parsefunction(data ptrcontent,d
 			#
 			#return noerr
 		else
-			if el_or_e==(FALSE)
+			if el_or_e=(FALSE)
 				call scopes_store_class()
 			endif
 
@@ -134,7 +134,7 @@ Function parsefunction(data ptrcontent,d
 			#add the function name to the code section if the option is set
 			sd fn_text
 			setcall fn_text fn_text_info()
-			if fn_text#==1
+			if fn_text#=1
 				sd fn_name
 				set fn_name pointer
 				add fn_name (nameoffset)
@@ -152,7 +152,7 @@ Function parsefunction(data ptrcontent,d
 
 			#resolve the previous calls at this value
 			Data ptrobject%ptrobject
-			If ptrobject#==true
+			If ptrobject#=true
 				Data STT_FUNC=STT_FUNC
 				Data codeind=codeind
 				Data ptrtable%%ptr_table
@@ -167,7 +167,7 @@ Function parsefunction(data ptrcontent,d
 				EndIf
 			EndIf
 
-			if subtype==(cFUNCTION)
+			if subtype=(cFUNCTION)
 				call scope64_set((FALSE))
 				setcall err xfile_add_fndef_if(content,sz,(Xfile_function_tintern),(Xfile_function_not_x)) #,arg
 			else
@@ -194,9 +194,9 @@ Function parsefunction(data ptrcontent,d
 		endelse
 	Else
 		Data ptrdata#1
-		if parses==(pass_init)
+		if parses=(pass_init)
 			call advancecursors(ptrcontent,ptrsize,sz)
-		elseif parses==(pass_calls)
+		elseif parses=(pass_calls)
 			SetCall ptrdata vars_ignoreref(content,sz,fns)
 			if ptrdata!=0
 				call is_for_64_is_impX_or_fnX_set(ptrdata,subtype)
@@ -221,8 +221,8 @@ Function parsefunction(data ptrcontent,d
 		return err
 	endif
 
-	If is_declare==true
-		if parses==(pass_write)
+	If is_declare=true
+		if parses=(pass_write)
 			sd nr_of_args_tested=0
 			if sz!=zero
 				sv c;sd s;set c ptrcontent#;set s ptrsize#
@@ -234,7 +234,7 @@ Function parsefunction(data ptrcontent,d
 			EndIf
 
 			sd b;setcall b scope64_get()
-			if b==(TRUE)
+			if b=(TRUE)
 				if varargs!=0
 					sd nr_of_args
 					setcall nr_of_args convdata((convdata_total))
@@ -253,11 +253,11 @@ Function parsefunction(data ptrcontent,d
 				return err
 			endif
 		EndIf
-		if parses==(pass_write)
+		if parses=(pass_write)
 			call entryscope()
 		endif
 	Else
-		if parses==(pass_init)
+		if parses=(pass_init)
 			if sz!=zero
 				SetCall err enumcommas(ptrcontent,ptrsize,sz,is_declare,parses) #there are 6 more arguments but are not used
 				if err!=noerr
@@ -267,14 +267,14 @@ Function parsefunction(data ptrcontent,d
 		else
 			sd p
 			sd pbool;setcall pbool is_for_64_is_impX_or_fnX_p_get()
-			if parses==(pass_calls)
-				if pbool#==(FALSE)
+			if parses=(pass_calls)
+				if pbool#=(FALSE)
 					call advancecursors(ptrcontent,ptrsize,sz)
 				else
 					if sz!=zero
 						setcall p nr_of_args_64need_p_get();set p# 0
 						SetCall err enumcommas(ptrcontent,ptrsize,sz,is_declare,parses) #there are 6 more arguments but are not used
-						if err==noerr
+						if err=noerr
 							setcall err align_ante(p#)
 						endif
 					else
@@ -288,10 +288,10 @@ Function parsefunction(data ptrcontent,d
 			else
 				#pass_write
 
-				if pbool#==(FALSE)
+				if pbool#=(FALSE)
 					if sz!=zero
 						setcall err xfile_add_commas_interncall_if(ptrcontent#,ptrsize#,sz)
-						if err==(noerror)
+						if err=(noerror)
 							SetCall err enumcommas(ptrcontent,ptrsize,sz,is_declare,parses) #there are 6 more arguments but are not used
 							if err!=noerr;return err;endif
 						else
@@ -304,11 +304,11 @@ Function parsefunction(data ptrcontent,d
 						set content ptrcontent#
 						set size ptrsize#
 						SetCall err enumcommas(#content,#size,sz,is_declare,(pass_calls)) #there are 6 more arguments but are not used
-						if err==noerr
+						if err=noerr
 							setcall err stack_align(p#)
-							if err==noerr
+							if err=noerr
 								setcall err xfile_add_int_if(p#)
-								if err==noerr
+								if err=noerr
 									SetCall err enumcommas(ptrcontent,ptrsize,sz,is_declare,parses) #there are 6 more arguments but are not used
 								else
 									return err
@@ -344,13 +344,13 @@ function prepare_function_call(sd pconte
 	Data fns%%ptr_functions
 
 	SetCall p_data# vars(pcontent#,sz,fns)
-	If p_data#==0
+	If p_data#=0
 		setcall p_data# vars_number(pcontent#,sz,(integersnumber))
-		If p_data#==0
+		If p_data#=0
 			setcall p_data# vars_number(pcontent#,sz,(stackdatanumber))
-			If p_data#==0
+			If p_data#=0
 				setcall p_data# vars_number(pcontent#,sz,(stackvaluenumber))
-				If p_data#==0
+				If p_data#=0
 					Char unfndeferr="Undefined function/data call."
 					Str ptrunfndef^unfndeferr
 					Return ptrunfndef
@@ -367,7 +367,7 @@ function prepare_function_call(sd pconte
 
 	sd err
 	setcall err xfile_add_call_if(pcontent#,sz,subtype)
-	if err==(noerror)   #here is coming from calls and callex
+	if err=(noerror)   #here is coming from calls and callex
 		Call advancecursors(pcontent,psize,sz)
 
 		#move over the stack arguments, ebx is also shorting the first stack variable (mov rbx,rdx)
@@ -390,7 +390,7 @@ function write_function_call(sd ptrdata,
 	Data code%%ptr_codesec
 
 	sd pb;setcall pb is_for_64_is_impX_or_fnX_p_get()
-	if pb#==(TRUE)
+	if pb#=(TRUE)
 		setcall err function_call_64(is_callex)
 		If err!=(noerror);Return err;EndIf
 		set pb# (FALSE) #reset the flag
@@ -409,13 +409,13 @@ function write_function_call(sd ptrdata,
 	And idatamask idatafn
 
 	sd is_valuedata_call;set is_valuedata_call boolindirect
-	If ptrobject#==(FALSE)
-		If idatamask==idatafn
+	If ptrobject#=(FALSE)
+		If idatamask=idatafn
 			Set boolindirect (TRUE)
 		EndIf
 	EndIf
 
-	If boolindirect==(FALSE)
+	If boolindirect=(FALSE)
 		Char directcall#1
 		Data directcalloff#1
 
@@ -443,7 +443,7 @@ function write_function_call(sd ptrdata,
 		EndElse
 	Else
 		#this at object is call data() but the reloc is outside of this function
-		if idatamask==idatafn
+		if idatamask=idatafn
 			data ptrvirtualimportsoffset%ptrvirtualimportsoffset
 			SetCall err unresolvedcallsfn(code,1,ptrvirtualimportsoffset) #,ptrdata#
 			If err!=(noerror);Return err;EndIf
@@ -462,18 +462,18 @@ function write_function_call(sd ptrdata,
 	#afterbit throwless is at fns imps if before aftercall; at values is throwless after aftercall if sign set
 	sd tless=aftercallthrowlessbit
 	and tless mask
-	if tless==0
-		if is_valuedata_call==(FALSE)
+	if tless=0
+		if is_valuedata_call=(FALSE)
 			sd global_err_pB;setcall global_err_pB global_err_pBool()
-			if global_err_pB#==(FALSE)
+			if global_err_pB#=(FALSE)
 				set tless -1    #don't want to throw before aftercall
 			endif
 		endif
 	endif
-	if tless==0
+	if tless=0
 		sd global_err_ptr;setcall global_err_ptr global_err_p()
 		Data ptrextra%%ptr_extra
-		If ptrobject#==(FALSE)
+		If ptrobject#=(FALSE)
 		#absolute
 			const global_err_ex_start=!
 			#mov ecx,imm32
@@ -505,7 +505,7 @@ function write_function_call(sd ptrdata,
 		#
 		ss ret_end_p
 		sd is_linux_term;setcall is_linux_term is_linux_end()
-		if is_linux_term==(TRUE)
+		if is_linux_term=(TRUE)
 			#int 0x80, sys_exit, eax 1,ebx the return number
 			const g_err_sys_start=!
 			char g_err_sys={0x8b,ebxregnumber*toregopcode|0xc0|eaxregnumber}
@@ -540,7 +540,7 @@ endfunction
 #bool
 function is_linux_end()
 	sd ptrfnavailable%ptrfnavailable
-	if ptrfnavailable#==0  #one is default, two from multiple entry start detectors and from entry tags
+	if ptrfnavailable#=0  #one is default, two from multiple entry start detectors and from entry tags
 	#here innerfunction is also practical, but that is more for data offsets
 		sd p_exit_end%p_exit_end
 		return p_exit_end#
@@ -564,7 +564,7 @@ function aftercall_manipulate(sd acall_v
 	vData code%%ptr_codesec
 	sd global_err_ptr;setcall global_err_ptr global_err_p()
 
-	If ptrobject#==(FALSE)
+	If ptrobject#=(FALSE)
 	#absolute
 		#mov [disp32],imm8 /0
 		char a=0xc6;char *=disp32regnumber;data b#1;char c#1
--- ocompiler-1.orig/src/files/functions/actions/fndecargs.s
+++ ocompiler-1/src/files/functions/actions/fndecargs.s
@@ -1,7 +1,7 @@
 
 
 Function fndecargs(sv ptrcontent,sd ptrsize,sd sz,sd ptr_stackoffset,sd parses)
-	If sz==0
+	If sz=0
 		Char szexp="Variable declaration expected."
 		Str szexpptr^szexp
 		Return szexpptr
@@ -44,38 +44,38 @@ Function fndecargs(sv ptrcontent,sd ptrs
 	sd xfile_decltype
 	if vartype>=(vnumbers)
 		sub vartype (vnumbers)
-		if vartype==(valuesinnernumber)
+		if vartype=(valuesinnernumber)
 			set vartype (integersnumber)
-			if b==(TRUE)
+			if b=(TRUE)
 				set long_mask (valueslongmask)
 				set datasize (qwsz)
 			endif
 			set xfile_decltype (Xfile_decltype_long) #can also be an ifif
 		else
-			if b==(TRUE)
+			if b=(TRUE)
 				set long_mask (datapointbit)
 				set datasize (qwsz)
 			endif
-			if vartype==(integersnumber)
+			if vartype=(integersnumber)
 				set xfile_decltype (Xfile_decltype_longInt)
 			else
 			#was vstringsnumber
 				set xfile_decltype (Xfile_decltype_longByte)
 			endelse
 		endelse
-	elseif vartype==(charnumber)
+	elseif vartype=(charnumber)
 		set datasize (bsz)
 		set xfile_decltype (Xfile_decltype_byte)
-	elseif is_stack==(TRUE)
-		if vartype==(stackdatanumber)
+	elseif is_stack=(TRUE)
+		if vartype=(stackdatanumber)
 			set xfile_decltype (Xfile_decltype_longInt)
-		elseif vartype==(stackstringnumber)
+		elseif vartype=(stackstringnumber)
 			set xfile_decltype (Xfile_decltype_longByte)
 		else
 		#stackvaluenumber
 			set xfile_decltype (Xfile_decltype_long)
 		endelse
-	elseif vartype==(integersnumber)
+	elseif vartype=(integersnumber)
 		set xfile_decltype (Xfile_decltype_int)
 	else
 	#stringsnumber
@@ -84,9 +84,9 @@ Function fndecargs(sv ptrcontent,sd ptrs
 
 	vdata ptrdataSize%ptrdataSize
 
-	if parses==(pass_init)
-		if is_stack==(FALSE)
-			if is_expand==(FALSE)
+	if parses=(pass_init)
+		if is_stack=(FALSE)
+			if is_expand=(FALSE)
 				vdata ptrdataReg%%ptr_dataReg
 				add ptrdataReg# datasize
 			else
@@ -126,16 +126,16 @@ Function fndecargs(sv ptrcontent,sd ptrs
 		Return err
 	EndIf
 
-	if is_stack==(TRUE)
+	if is_stack=(TRUE)
 		return noerr
 	endif
 
 	sd sectionind=dataind
-	if is_expand==(TRUE)
+	if is_expand=(TRUE)
 		setcall memoff get_img_vdata_dataSize()
 		add ptrdataSize# datasize
 		sd ptr_nobits_virtual%ptr_nobits_virtual
-		if ptr_nobits_virtual#==(Yes)
+		if ptr_nobits_virtual#=(Yes)
 			set sectionind (dtnbind)
 		endif
 	else
@@ -155,7 +155,7 @@ Function fndecargs(sv ptrcontent,sd ptrs
 	Set stacktransfer1 stackt1ini
 	Set stacktransfer2 stackt2ini
 
-	If datasize==(bsz)
+	If datasize=(bsz)
 	#char
 		Dec stacktransfer1
 		Dec stacktransfer2
@@ -166,7 +166,7 @@ Function fndecargs(sv ptrcontent,sd ptrs
 	endelseif
 
 	data p_is_object%ptrobject
-	if p_is_object#==(TRUE)
+	if p_is_object#=(TRUE)
 		Const fndecargs_offend^memoff
 		Const fndecargs_offstart^stacktransfer1
 		Data ptrextra%%ptr_extra
@@ -190,7 +190,7 @@ Function fndecargs(sv ptrcontent,sd ptrs
 	endif
 	SetCall err addtosec(#stacktransfer2,(bsz+dwsz),_codesec);If err!=noerr;Return err;EndIf
 
-	if b==(TRUE)
+	if b=(TRUE)
 		#at 64 code:
 		#A3 XX.XX.XX.XX_XX.XX.XX.XX
 		sd z=i386_obj_default_reloc_rah
--- ocompiler-1.orig/src/files/functions/add/add.s
+++ ocompiler-1/src/files/functions/add/add.s
@@ -15,13 +15,13 @@ EndFunction
 
 #bool
 function is_variable_char_not_numeric(sd in_byte)
-	if in_byte==(asciiaround)
+	if in_byte=(asciiaround)
 		return (TRUE)
 	elseif in_byte<(asciiA)
 		return (FALSE)
 	elseif in_byte<=(asciiZ)
 		return (TRUE)
-	elseif in_byte==(asciiunderscore)
+	elseif in_byte=(asciiunderscore)
 		return (TRUE)
 	elseif in_byte<(asciia)
 		return (FALSE)
@@ -51,7 +51,7 @@ Function addaref(data value,data ptrcont
 	While content!=end
 		Set byte content#
 		SetCall bool is_variable_char(byte)
-		If bool==false
+		If bool=false
 			Return _err
 		EndIf
 		Inc content
@@ -59,7 +59,7 @@ Function addaref(data value,data ptrcont
 
 	#set the referenced bit if warnings are off
 	Data warningsboolptr%ptrwarningsbool
-	if warningsboolptr#==(FALSE)
+	if warningsboolptr#=(FALSE)
 		or mask (referencebit)
 	endif
 
--- ocompiler-1.orig/src/files/functions/add/addstresc.s
+++ ocompiler-1/src/files/functions/add/addstresc.s
@@ -25,7 +25,7 @@ Function addtosecstresc_base(sd pcontent
 	Set sizeEsc sz
 	sd end;set end sizeEsc
 	Sub sizeEsc escapes
-	if write_to_xfile==(TRUE)
+	if write_to_xfile=(TRUE)
 		sd xfilesz;set xfilesz sizeEsc
 	endif
 	Inc sizeEsc
@@ -52,7 +52,7 @@ Function addtosecstresc_base(sd pcontent
 	Data ptrdestloc^destloc
 	Call getcont(pdest,ptrdestloc)
 	Add destloc destReg
-	if write_to_xfile==(TRUE)
+	if write_to_xfile=(TRUE)
 		sd xfileloc;set xfileloc destloc
 	endif
 
@@ -70,7 +70,7 @@ Function addtosecstresc_base(sd pcontent
 		Set destloc# zero
 	EndIf
 
-	if write_to_xfile==(TRUE)
+	if write_to_xfile=(TRUE)
 		setcall errnr xfile_add_string_if(xfileloc,xfilesz)
 		return errnr
 	endif
--- ocompiler-1.orig/src/files/functions/add/addtomem.s
+++ ocompiler-1/src/files/functions/add/addtomem.s
@@ -45,20 +45,20 @@ Function addtosec(str content,data size,
 		Data true=TRUE
 		Data sectionexpand#1
 		Set sectionexpand false
-		If ptrfileformat#==elf_unix
+		If ptrfileformat#=elf_unix
 			Set sectionexpand true
 		Else
-			If dst==datasec
+			If dst=datasec
 				Set sectionexpand true
-			ElseIf dst==codesec
+			ElseIf dst=codesec
 				Set sectionexpand true
-			ElseIf dst==debugsec
+			ElseIf dst=debugsec
 			#this is only because there is no blocking at writefile_errversion_debug for speed reasons
 			#this is also called before format is defined
 				Set sectionexpand true
 			EndElseIf
 		EndElse
-		If sectionexpand==false
+		If sectionexpand=false
 			Char _memerr="Memory space error."
 			Str memerr^_memerr
 			Return memerr
--- ocompiler-1.orig/src/files/functions/argument/arg.s
+++ ocompiler-1/src/files/functions/argument/arg.s
@@ -24,7 +24,7 @@ function arg_size(ss content,sd sizetove
 	Else
 		Set p_argsize# szargtab
 	EndElse
-	if p_argsize#==0
+	if p_argsize#=0
 		return "Expecting argument name."
 	endif
 	return (noerror)
@@ -41,10 +41,10 @@ function extend_arg_size(ss content,sd s
 				set marker content
 				call spaces(#content,#sizetoverify)
 				if sizetoverify!=0
-					if content#==(pointerascii)
+					if content#=(pointerascii)
 						call stepcursors(#content,#sizetoverify)
 						if sizetoverify!=0
-							if content#==(pointerascii)
+							if content#=(pointerascii)
 								#this " ##" is the only line end comment after sufix and allowing spaces
 								set main.xfile_sharp_comment (nonzero)   #and notify for xfile
 								ret
@@ -65,7 +65,7 @@ function extend_sufix_test(ss content,sd
 	while p_size#!=0
 		dec content
 		sd b;setcall b is_whitespace(content#)
-		if b==(FALSE)
+		if b=(FALSE)
 			ret
 		endif
 		dec p_size#
@@ -80,7 +80,7 @@ Function getarg(sv ptrcontent,sd ptrsize
 
 	char d_q=getarg_str
 
-	if argsize==0
+	if argsize=0
 		return "Argument name expected."
 	endif
 
@@ -91,7 +91,7 @@ Function getarg(sv ptrcontent,sd ptrsize
 	set size ptrsize#
 
 	sd prefix
-	if content#==d_q
+	if content#=d_q
 		sd q_size
 		sd escapes
 		SetCall errnr quotinmem(#content,#size,#q_size,#escapes)
@@ -99,7 +99,7 @@ Function getarg(sv ptrcontent,sd ptrsize
 			return errnr
 		endif
 		if allowdata!=(allow_yes)
-			if allowdata==(allow_later)
+			if allowdata=(allow_later)
 				vdata ptrdataReg%%ptr_dataReg
 				sub q_size escapes
 				add ptrdataReg# q_size
@@ -143,18 +143,18 @@ Function getarg(sv ptrcontent,sd ptrsize
 		if allowdata!=(allow_later_sec)
 			sd bool
 			setcall bool is_constant_related_ascii(content#)
-			if bool==(TRUE)
+			if bool=(TRUE)
 				#verify if imm is ok
 				sd canhaveimm
 				setcall canhaveimm getimm()
-				if canhaveimm==false
+				if canhaveimm=false
 					str immnothere="Unexpected numbers/constants, expecting a variable."
 					return immnothere
 				endif
 				setcall errnr xfile_add_char_if((Xfile_arg_number))
-				if errnr==(noerror)
+				if errnr=(noerror)
 					#extend to parenthesis if found
-					if content#==(asciiparenthesisstart)
+					if content#=(asciiparenthesisstart)
 						call stepcursors(ptrcontent,ptrsize)
 						setcall errnr parenthesis_size(ptrcontent#,ptrsize#,#argsize)
 						if errnr!=(noerror)
@@ -165,7 +165,7 @@ Function getarg(sv ptrcontent,sd ptrsize
 							return errnr
 						endif
 						call stepcursors(ptrcontent,ptrsize)
-						if sens==(BACKWARD)
+						if sens=(BACKWARD)
 							add argsize 2 #the recognised parenthesis
 						endif
 					else
@@ -180,7 +180,7 @@ Function getarg(sv ptrcontent,sd ptrsize
 				#sufix is not used at imm value
 				set ptrlow# false
 
-				if sens==(FORWARD)
+				if sens=(FORWARD)
 					return (noerror)
 				else
 					sd back=-1
@@ -189,23 +189,23 @@ Function getarg(sv ptrcontent,sd ptrsize
 				endelse
 			else
 				sd imm;setcall imm getimm()
-				if imm==(TRUE) #if is FALSE, this is the only option for xfile. also allow(string) is no
+				if imm=(TRUE) #if is FALSE, this is the only option for xfile. also allow(string) is no
 				#then, this is a test at allow yes; also at allow no for conditions
 					setcall errnr xfile_add_char_if((Xfile_arg_varfn))
 					if errnr!=(noerror)
 						return errnr
 					endif
 				endif
-				if allowdata==(allow_yes)
+				if allowdata=(allow_yes)
 					#at last/only argument it is better to allow space before sufix to not regret later
 					#"##" will be a comment and "#" a sufix
 					call extend_arg_size(content,size,#argsize)
 				endif
 				sd argsize_filter
 				sd container_sz
-				if content#==(pointerascii)
+				if content#=(pointerascii)
 					setcall errnr xfile_add_char_if((Xfile_arg_varfn_prefix_yes))
-					if errnr==(noerror)
+					if errnr=(noerror)
 						#prefix
 						setcall prefix prefix_bool()
 						set prefix# 1
@@ -219,7 +219,7 @@ Function getarg(sv ptrcontent,sd ptrsize
 							setcall errnr getarg_colon(content,argsize_filter,container_sz,ptrdata,ptrlow,ptrsufix)
 						else
 							setcall errnr xfile_add_char_if((Xfile_arg_varfn_colon_no))
-							if errnr==(noerror)
+							if errnr=(noerror)
 								setcall errnr getarg_testdot(content,argsize_filter,ptrdata,ptrlow,ptrsufix)
 							else
 								return errnr
@@ -233,7 +233,7 @@ Function getarg(sv ptrcontent,sd ptrsize
 					endelse
 				else
 					setcall errnr xfile_add_char_if((Xfile_arg_varfn_prefix_no))
-					if errnr==(noerror)
+					if errnr=(noerror)
 						data ptrobject%ptrobject
 						data ptrfunctions%%ptr_functions
 
@@ -246,7 +246,7 @@ Function getarg(sv ptrcontent,sd ptrsize
 							endif
 						else
 							setcall errnr xfile_add_char_if((Xfile_arg_varfn_colon_no))
-							if errnr==(noerror)
+							if errnr=(noerror)
 								setcall container_sz valinmem(content,argsize,(asciidot))
 								if container_sz!=argsize
 									setcall errnr getarg_dot(content,argsize,container_sz,ptrdata,ptrlow,ptrsufix)
@@ -256,15 +256,15 @@ Function getarg(sv ptrcontent,sd ptrsize
 								else
 									SetCall errnr varsufix(content,argsize,ptrdata,ptrlow,ptrsufix)
 									if errnr!=(noerror)
-										if ptrobject#==1
+										if ptrobject#=1
 											sd undvar_err
 											setcall undvar_err undefinedvariable()
-											if errnr==undvar_err
+											if errnr=undvar_err
 												#verify for function
 												setcall ptrdata# vars(content,argsize,ptrfunctions)
 												if ptrdata#!=(NULL)
 													setcall errnr xfile_add_string_if(content,argsize)
-													if errnr==(noerror)
+													if errnr=(noerror)
 														set ptrlow# (FALSE)
 														set ptrsufix# (sufix_false)
 														sd var
@@ -299,7 +299,7 @@ Function getarg(sv ptrcontent,sd ptrsize
 			endelse
 		endif
 	endelseif
-	If sens==(FORWARD)
+	If sens=(FORWARD)
 		Call advancecursors(ptrcontent,ptrsize,argsize)
 		Return noerr
 	endIf
@@ -311,7 +311,7 @@ EndFunction
 function getarg_dot_any(sd content,sd argsize,sd container_sz,sd ptrdata,sd ptrlow,sd ptrsufix)
 	sd errnr
 	setcall errnr xfile_add_char_if((Xfile_arg_varfn_dot_yes))
-	if errnr==(noerror)
+	if errnr=(noerror)
 		sd scope
 		setcall errnr get_scope(#content,#argsize,container_sz,#scope)
 		if errnr!=(noerror)
@@ -329,7 +329,7 @@ function getarg_dot(sd content,sd argsiz
 		return errnr
 	endif
 	sd test;setcall test stackbit(ptrdata#)
-	if test==0
+	if test=0
 		return (noerror)
 	endif
 	setcall errnr there_is_nothing_there()
@@ -415,7 +415,7 @@ endfunction
 function getarg_colon(sd content,sd argsize,sd container_sz,sv ptrdata,sd ptrlow,sd ptrsufix)
 	sd err
 	setcall err xfile_add_char_if((Xfile_arg_varfn_colon_yes))
-	if err==(noerror)
+	if err=(noerror)
 		#first test if has runtime pointer
 		sd pointer_size=0
 		if container_sz!=0
@@ -423,7 +423,7 @@ function getarg_colon(sd content,sd args
 			ss cursor=-1
 			add cursor content
 			add cursor container_sz
-			if cursor#==(pointerascii)
+			if cursor#=(pointerascii)
 				dec container_sz
 				inc pointer_size
 			endif
@@ -435,13 +435,13 @@ function getarg_colon(sd content,sd args
 		sub argsize container_sz
 		if part_sz!=container_sz
 			setcall err xfile_add_char_if((Xfile_arg_varfn_dot_yes))
-			if err==(noerror)
+			if err=(noerror)
 				setcall err get_scope(#content,#container_sz,part_sz,#scope)
 				if err!=(noerror)
 					return err
 				endif
 				sd nr;setcall data searchinvars_scope(content,container_sz,#nr,scope)
-				if data==(NULL)
+				if data=(NULL)
 					setcall err undefinedvariable()
 					return err
 				endif
@@ -455,9 +455,9 @@ function getarg_colon(sd content,sd args
 			endelse
 		else
 			setcall err xfile_add_char_if((Xfile_arg_varfn_dot_no))
-			if err==(noerror)
+			if err=(noerror)
 				setcall data searchinvars(content,container_sz,(NULL),(NULL),1)
-				if data==(NULL)
+				if data=(NULL)
 					setcall err undefinedvariable()
 					return err
 				endif
@@ -489,7 +489,7 @@ function getarg_colon(sd content,sd args
 		setcall container_sz valinmem(content,argsize,(asciidot))
 		if container_sz!=argsize
 			setcall err xfile_add_char_if((Xfile_arg_varfn_dot_yes))
-			if err==(noerror)
+			if err=(noerror)
 				setcall err getarg_base(content,argsize,container_sz,ptrdata,ptrlow,ptrsufix,#subtract_base)
 				if err!=(noerror)
 					return err
@@ -503,9 +503,9 @@ function getarg_colon(sd content,sd args
 				return err
 			endif
 			setcall test stackbit(ptrdata#)
-			if test==0
+			if test=0
 				sd ptrinnerfunction%globalinnerfunction
-				if ptrinnerfunction#==(TRUE)
+				if ptrinnerfunction#=(TRUE)
 					sd ptrfunctionTagIndex%ptrfunctionTagIndex
 					setcall scope scopes_get_scope(ptrfunctionTagIndex#)
 					setcall subtract_base scopes_get_class_data(scope,ptrdata#)
@@ -582,7 +582,7 @@ function getarg_base(sd content,sd argsi
 	endif
 	sd test
 	setcall test stackbit(ptrdata#)
-	if test==0
+	if test=0
 		sd entrybags%%ptr_scopes
 		if scope!=entrybags
 			#stored class info
@@ -604,7 +604,7 @@ endfunction
 function get_scope(sv pcontent,sd psize,sd sz,sv pscope)
 	sd pos
 	sd err;setcall err get_scope_pos(pcontent#,sz,#pos)
-	if err==(noerror)
+	if err=(noerror)
 		inc sz
 		call advancecursors(pcontent,psize,sz)
 		setcall pscope# scopes_get_scope(pos)
@@ -631,22 +631,22 @@ endfunction
 
 function is_constant_related_ascii(sd in_byte)
 # ! data cursor
-	if in_byte==(asciiexclamationmark)
+	if in_byte=(asciiexclamationmark)
 		return (TRUE)
-	elseif in_byte==(asciiparenthesisstart)
+	elseif in_byte=(asciiparenthesisstart)
 		return (TRUE)
 #negative number
-	elseif in_byte==(asciiminus)
+	elseif in_byte=(asciiminus)
 		return (TRUE)
 	elseif in_byte<(asciizero)
 		return (FALSE)
 	elseif in_byte<=(asciinine)
 		return (TRUE)
 # : size of integer
-	elseif in_byte==(asciicolon)
+	elseif in_byte=(asciicolon)
 		return (TRUE)
 # not,~
-	elseif in_byte==(asciiequiv)
+	elseif in_byte=(asciiequiv)
 		return (TRUE)
 	endelseif
 	return (FALSE)
@@ -666,7 +666,7 @@ EndFunction
 Function argfilters(sd ptrcondition,sv ptrcontent,sd ptrsize,sd ptrdata,sd ptrlow,sd ptrsufix,sd allowdata)
 	sd err
 	setcall err argfilters_helper(ptrcondition,ptrcontent,ptrsize,ptrdata,ptrlow,ptrsufix,allowdata)
-	if err==(noerror)
+	if err=(noerror)
 		#this is only at first arg
 		call spaces(ptrcontent,ptrsize)
 	endif
@@ -678,7 +678,7 @@ function argfilters_helper(sd ptrconditi
 	Data err#1
 	Data forward=FORWARD
 
-	If ptrcondition==null
+	If ptrcondition=null
 		call unsetimm()
 		SetCall err arg(ptrcontent,ptrsize,ptrdata,ptrlow,ptrsufix,forward,allowdata)
 		Return err
@@ -692,16 +692,16 @@ function argfilters_helper(sd ptrconditi
 	Data argsz#1
 
 	#and same rule like getcommand like elseif then else
-	Char firstcomp="==";Data *jne=0x85
-	Char *="!=";        Data *je=0x84
-	Char *="<=^";       Data *ja=0x87
-	Char *=">=^";       Data *jb=0x82
-	Char *="<=";        Data *jg=0x8F
-	Char *=">=";        Data *jl=0x8C
-	Char *="<^";        Data *jae=0x83   #wanted cast before but will problem with arg cast that was after to continue at sufix
-	Char *=">^";        Data *jbe=0x86
-	Char *="<";         Data *jge=0x8D
-	Char *=">";         Data *jle=0x8E
+	Char firstcomp="!=";Data *je=Xfile_cond_notequal
+	Char *="<=^";       Data *ja=Xfile_cond_lessequalunsign
+	Char *=">=^";       Data *jb=Xfile_cond_greatequalunsign
+	Char *="<=";        Data *jg=Xfile_cond_lessequal
+	Char *=">=";        Data *jl=Xfile_cond_greatequal
+	Char *="<^";        Data *jae=Xfile_cond_lessunsign   #wanted cast before but will problem with arg cast that was after to continue at suffix
+	Char *=">^";        Data *jbe=Xfile_cond_greatunsign
+	Char *="=";         Data *jne=Xfile_cond_equal
+	Char *="<";         Data *jge=Xfile_cond_less
+	Char *=">";         Data *jle=Xfile_cond_great
 	Char term={0}
 
 	Data ptr#1
--- ocompiler-1.orig/src/files/functions/argument/argument.s
+++ ocompiler-1/src/files/functions/argument/argument.s
@@ -2,9 +2,9 @@
 #sz
 function getreturn(data ptrptrcontinuation)
 	sd b;setcall b scope64_get()
-	if b==(TRUE)
+	if b=(TRUE)
 		sd conv;setcall conv convdata((convdata_total))
-		if conv==(lin_convention)
+		if conv=(lin_convention)
 			char lin64_return={0xc9,0x5b}
 			#pop c;add rsp,8*conv;push c
 			char *={0x59,REX_Operand_64,0x83,regregmod|espregnumber,lin_convention*qwsz,0x51}
@@ -46,7 +46,7 @@ function argument_return(sd termswitch,s
 	Set pop# (moveatprocthemem)
 	Set pregprepare_bool# (TRUE)
 
-	if termswitch==(TRUE)
+	if termswitch=(TRUE)
 		data ebxregnumber=ebxregnumber
 		set pregopcode# ebxregnumber
 		sd err
@@ -80,11 +80,11 @@ Function argument(data ptrcontent,data p
 	Set regprepare_bool false
 	Set sizeofcontinuation zero
 
-	If forwardORcallsens==forward
+	If forwardORcallsens=forward
 		call unsetimm() #set is at returns/and at push
 
 		sd xlog
-		If subtype==(cRETURN)
+		If subtype=(cRETURN)
 			sd termswitch
 			setcall termswitch is_linux_end() #exit from linux term
 			setcall err argument_return(termswitch,#op,#regprepare_bool,#ptrcontinuation,#sizeofcontinuation,#regopcode)
@@ -92,12 +92,12 @@ Function argument(data ptrcontent,data p
 				Return err
 			EndIf
 			set xlog (Xfile_action_areturn)
-		ElseIf subtype==(cINC)
+		ElseIf subtype=(cINC)
 			Char inc={0xFF}
 			Set op inc
 			set regopcode 0
 			set xlog (Xfile_action_inc)
-		ElseIf subtype==(cDEC)
+		ElseIf subtype=(cDEC)
 			Char dec={0xFF}
 			Char decregopcode={1}
 			Set op dec
@@ -105,7 +105,7 @@ Function argument(data ptrcontent,data p
 			set xlog (Xfile_action_dec)
 		ElseIf subtype<=(cDECST)
 			set op (0x83)
-			if subtype==(cINCST)
+			if subtype=(cINCST)
 				set regopcode 0
 				set xlog (Xfile_action_incst)
 			else
@@ -114,15 +114,15 @@ Function argument(data ptrcontent,data p
 			endelse
 			char incs_sz#1
 			sd b;setcall b is_for_64()
-			if b==(FALSE);set incs_sz (dwsz)
+			if b=(FALSE);set incs_sz (dwsz)
 			else;set incs_sz (qwsz);endelse
 			set ptrcontinuation #incs_sz
 			set sizeofcontinuation (bsz)
-		ElseIf subtype==(cNEG)
+		ElseIf subtype=(cNEG)
 			set op (0xf7)
 			set regopcode 3
 			set xlog (Xfile_action_neg)
-		ElseIf subtype==(cNOT)
+		ElseIf subtype=(cNOT)
 			Char not={0xF7}
 			Char notregopcode={Notregopcode}
 			Set op not
@@ -130,10 +130,10 @@ Function argument(data ptrcontent,data p
 			set xlog (Xfile_action_not)
 		ElseIf subtype<=(cSAR)
 			set op (0xD1)
-			If subtype==(cSHL)
+			If subtype=(cSHL)
 				set regopcode 4
 				set xlog (Xfile_action_shl)
-			ElseIf subtype==(cSHR)
+			ElseIf subtype=(cSHR)
 				set regopcode 5
 				set xlog (Xfile_action_shr)
 			Else
@@ -170,7 +170,7 @@ Function argument(data ptrcontent,data p
 
 	sd imm
 	setcall imm getisimm()
-	if imm==false
+	if imm=false
 		#Data noreg=noregnumber
 		#Data eaxreg=eaxregnumber
 		#Data intchar#1
@@ -199,9 +199,9 @@ Function argument(data ptrcontent,data p
 			Set ptrcontinuation ptrpushcontinuation
 			set sizeofcontinuation pushcontinuationsize
 			#EndElse
-		ElseIf lowbyte==true
+		ElseIf lowbyte=true
 		#imm don't use one byte at the moment
-			if regprepare_bool==false
+			if regprepare_bool=false
 				Dec op
 			endif
 		#Else;Set intchar regopcode
@@ -232,15 +232,15 @@ endfunction
 
 #same as comp_sec
 function comp_one(sd low,sd dataarg,sd sufix,sd op)
-	if op==(moveatprocthemem)
+	if op=(moveatprocthemem)
 		sd p
-		if low==(FALSE)
+		if low=(FALSE)
 			setcall p prefix_bool() #can't touch functions
-			if p#==0
+			if p#=0
 				sd big;setcall big is_big(dataarg,sufix)
-				if big==(FALSE)
+				if big=(FALSE)
 					sd for64;setcall for64 is_for_64()
-					if for64==(TRUE)
+					if for64=(TRUE)
 						#is medium but with sign
 						return 1
 					endif
@@ -248,7 +248,7 @@ function comp_one(sd low,sd dataarg,sd s
 			endif
 		else
 			sd b;setcall b is_for_64()
-			if b==(TRUE)
+			if b=(TRUE)
 			#return all r64; take all; is from the time when was set that data, waiting outside, can have a char extended with zeros
 				setcall p val64_p_get()
 				set p# (val64_willbe)
--- ocompiler-1.orig/src/files/functions/argument/comwrite.s
+++ ocompiler-1/src/files/functions/argument/comwrite.s
@@ -58,7 +58,7 @@ endfunction
 #er
 function datatake_reloc(sd takeindex,sd take_loc)
 	data p_is_object%ptrobject
-	if p_is_object#==(TRUE)
+	if p_is_object#=(TRUE)
 		sd relocoff
 		setcall relocoff reloc64_offset(1)
 		sd errnr
@@ -83,7 +83,7 @@ function adddirectrel_base_inplace(sd re
 	Data ptrextra%%ptr_extra
 	sd errnr
 	SetCall errnr adddirectrel_base(ptrextra,relocoff,sectionind,p_take_loc#)
-	If errnr==(noerror)
+	If errnr=(noerror)
 		call inplace_reloc(p_take_loc)
 	EndIf
 	Return errnr
@@ -94,15 +94,15 @@ function writetake(sd takeindex,sd entry
 	sd take_loc;set take_loc entry#
 	sd stack
 	setcall stack stackbit(entry)
-	if stack==0
+	if stack=0
 		data p_is_object%ptrobject
-		if p_is_object#==(TRUE)
+		if p_is_object#=(TRUE)
 			Data ptrextra%%ptr_extra
 			data relocoff#1
 			setcall relocoff reloc64_offset(1)
 			sd var
 			setcall var function_in_code()
-			if var#==0
+			if var#=0
 				sd sectionind
 				sd expand;setcall expand expandbit_wrap(entry)
 				if expand!=0
@@ -129,7 +129,7 @@ function writetake(sd takeindex,sd entry
 				If errnr!=(noerror)
 					Return errnr
 				EndIf
-				if impbit==0
+				if impbit=0
 					setcall errnr unresReloc(ptrextra)
 					If errnr!=(noerror);Return errnr;EndIf
 					setcall errnr inplace_reloc_unres(#take_loc,relocoff)
@@ -160,7 +160,7 @@ endfunction
 #er
 function writetake_offset(sd takeindex,sd entry)
 	sd er;setcall er writetake(takeindex,entry)
-	if er==(noerror)
+	if er=(noerror)
 		sd test;setcall test suffixbit(entry)
 		if test!=0
 			char op#1
@@ -173,16 +173,16 @@ function writetake_offset(sd takeindex,s
 				return "The displacement for this value is not implemented at the moment."
 			endif
 			setcall er rex_w_if64()
-			if er==(noerror)
+			if er=(noerror)
 				#need to take further
 				char take=moveatprocthemem
 				char tmodrm#1
 				setcall tmodrm formmodrm((mod_0),takeindex,takeindex)
 				value ptrcodesec%%ptr_codesec
 				SetCall er addtosec(#take,2,ptrcodesec)
-				if er==(noerror)
+				if er=(noerror)
 					setcall er rex_w_if64()
-					if er==(noerror)
+					if er=(noerror)
 						setcall modrm formmodrm((RegReg),0,takeindex)
 						sd sz
 						if disp32<0x80
@@ -215,18 +215,18 @@ Function writeoperation_take(sd p_errnr,
 	sd v_64
 	sd prefix
 	setcall v_64 sufix64(location)
-	If sufix==(sufix_true)
+	If sufix=(sufix_true)
 		sd take64;set take64 v_64
-		if v_64==(val64_willbe)
-			if is_low==(TRUE)
+		if v_64=(val64_willbe)
+			if is_low=(TRUE)
 			#not ss, rex.w op r/m8 is ok but is useless
 				set v_64 (val64_no)
 			else
 				sd pbit;setcall pbit pointbit(location)
-				if pbit==0
+				if pbit=0
 					#not needed at sd#
 					setcall prefix prefix_bool()
-					if prefix#==0
+					if prefix#=0
 					#but keep at prefix, this is a #a# case,the logic is fragile
 						set v_64 (val64_no)
 					endif
@@ -236,7 +236,7 @@ Function writeoperation_take(sd p_errnr,
 		setcall p_errnr# sufix_take(takeindex,take64)
 	Else
 		sd for_64;setcall for_64 is_for_64()
-		if for_64==(TRUE)
+		if for_64=(TRUE)
 			setcall prefix prefix_bool()
 			if prefix#!=0
 			#set here (example: return #data), this can be thinked to be wrote at writeoperation_op
@@ -250,7 +250,7 @@ EndFunction
 #er
 function sufix_take(sd takeindex,sd take64)
 	sd err
-	if take64==(val64_willbe)
+	if take64=(val64_willbe)
 		call rex_w(#err)
 		if err!=(noerror)
 			return err;endif
@@ -288,7 +288,7 @@ Function writeoperation_op(sd operationo
 	Data sz2=bsz+bsz
 
 	sd v64;setcall v64 val64_p_get()
-	if v64#==(val64_willbe)
+	if v64#=(val64_willbe)
 		call rex_w(#errnr);if errnr!=(noerror);return errnr;endif
 		set v64# (val64_no)
 	endif
@@ -296,7 +296,7 @@ Function writeoperation_op(sd operationo
 	sd mod=mod_0
 
 	#if is like was xor prepare,prepare
-	If is_prepare==(TRUE)
+	If is_prepare=(TRUE)
 	# !=(noregnumber)
 		#Char comprepare1={0x33}
 		#Char comprepare2#1
@@ -354,7 +354,7 @@ EndFunction
 function writeopera(sd location,sd operationopcode,sd regopcode,sd takeindex)
 	sd err
 	setcall err writetake(takeindex,location)
-	if err==(noerror)
+	if err=(noerror)
 		setcall err writeoperation_op(operationopcode,(FALSE),regopcode,takeindex)
 	endif
 	return err
--- ocompiler-1.orig/src/files/functions/argument/imm.s
+++ ocompiler-1/src/files/functions/argument/imm.s
@@ -53,7 +53,7 @@ function switchimm()
 	data ptr%ptr_isimm
 	data true=1
 	#first was false was low at comparations low vs high
-	if ptr#==true
+	if ptr#=true
 		data first%ptr_first_isimm
 		set first# true
 		data false=0
@@ -81,10 +81,10 @@ function write_imm_sign(sd dataarg,sd re
 	vData codeptr%%ptr_codesec
 	sd err
 	setcall err rex_w_if64()
-	if err==(noerror)
+	if err=(noerror)
 		char movs_imm=mov_imm_to_rm
 		SetCall err addtosec(#movs_imm,1,codeptr)
-		if err==(noerror)
+		if err=(noerror)
 			sd op
 			SetCall op formmodrm((RegReg),0,regopcode)
 			setcall err write_imm(dataarg,op)
@@ -95,9 +95,9 @@ endfunction
 #err
 function write_imm_trunc(sd value,sd reg,sd low,sd data,sd sufix)
 	sd err
-	if low==(FALSE)
+	if low=(FALSE)
 		sd bool;setcall bool is_big_imm(data,sufix)
-		if bool==(FALSE)
+		if bool=(FALSE)
 			#mediu
 			add reg (ateaximm)
 			setcall err write_imm(value,reg)
--- ocompiler-1.orig/src/files/functions/commands/cond.s
+++ ocompiler-1/src/files/functions/commands/cond.s
@@ -40,12 +40,15 @@ Function condbegin(data ptrcontent,data
 	Data err#1
 	Data noerr=noerror
 
-	SetCall err twoargs(ptrcontent,ptrsize,(not_a_subtype),ptrcond)
-	If err!=noerr
-		Return err
-	EndIf
+	setcall err xfile_add_char_if(condnumber)
+	if err=(noerror)
+		SetCall err twoargs(ptrcontent,ptrsize,(not_a_subtype),ptrcond)
+		If err!=noerr
+			Return err
+		EndIf
 
-	SetCall err condbeginwrite(condnumber)
+		SetCall err condbeginwrite(condnumber)
+	endif
 	Return err
 EndFunction
 
@@ -91,7 +94,7 @@ Function condend(data number)
 	Data ptrptrcReg^ptrcReg
 
 	Call getptrcontReg(condloop,ptrptrcReg)
-	If ptrcReg#==0
+	If ptrcReg#=0
 		Char uncloseerr="Unexpected condition/loop close command."
 		Str _uncloseerr^uncloseerr
 		Return _uncloseerr
@@ -105,7 +108,7 @@ Function condend(data number)
 	Data ptrstructure^structure
 
 	Call getcontReg(codesec,ptrcodeoff)
-	If number==whilenr
+	If number=whilenr
 		Add codeoffset (backjumpsize)
 	EndIf
 	Call getcont(condloop,ptrstructure)
@@ -113,8 +116,8 @@ Function condend(data number)
 	sd reg;set reg structure
 
 	sd err;setcall err condendtest(#structure,number,codeoffset)
-	if err==(noerror)
-		If number==whilenr
+	if err=(noerror)
+		If number=whilenr
 			setcall err jumpback(codeoffset,structure)
 			If err!=(noerror)
 				Return err
@@ -137,15 +140,15 @@ function condendtest(sv p_conds,sd numbe
 	#for breaks inside conditions
 	sd last;set last conds
 
-	while 1==1
+	while 1=1
 		Data lastcondition#1
 
 		sub conds (dwsz)
 		Set lastcondition conds#
 		sub conds (dwsz)
 
-		if lastcondition==(breaknumber)
-			if number==(whilenumber)
+		if lastcondition=(breaknumber)
+			if number=(whilenumber)
 				call condendwrite(conds,codeoffset)
 			endif
 		elseIf lastcondition!=number
@@ -164,7 +167,7 @@ function condendtest(sv p_conds,sd numbe
 					sd cursor;set cursor conds
 					sub cursor (dwsz)
 					sd size
-					if cursor#==(ifinscribe)
+					if cursor#=(ifinscribe)
 						set size (2*dwsz)
 					else
 						set size (dwsz)
@@ -217,51 +220,54 @@ Function conditionscondend(data close1,d
 	Data err#1
 	Data noerr=noerror
 
-	Data loop#1
-	Data loopini=1
-	Data loopstop=0
-	Set loop loopini
-
-	Data number#1
-	Set number close1
-
-	Data ifnr=ifnumber
-	Data elsenr=elsenumber
-	Data structure%%ptr_conditionsloops
-	Data dsz=dwsz
-
-	While loop==loopini
-		SetCall err condend(number)
-		If err!=noerr
-			Return err
-		EndIf
-		sd c
-		If number==ifnr
-			If close2==elsenr
-				Set number elsenr
+	setcall err xfile_add_char_if((Xfile_condend))
+	if err=(noerror)
+		Data loop#1
+		Data loopini=1
+		Data loopstop=0
+		Set loop loopini
+
+		Data number#1
+		Set number close1
+
+		Data ifnr=ifnumber
+		Data elsenr=elsenumber
+		Data structure%%ptr_conditionsloops
+		Data dsz=dwsz
+
+		While loop=loopini
+			SetCall err condend(number)
+			If err!=noerr
+				Return err
+			EndIf
+			sd c
+			If number=ifnr
+				If close2=elsenr
+					Set number elsenr
+					setcall c prevcond()
+					if c=(ifinscribe)
+						call Message("Warning: ENDELSEIF not matching IF")
+					endif
+				Else
+					Set loop loopstop
+				EndElse
+			EndIf
+			If number=elsenr
 				setcall c prevcond()
-				if c==(ifinscribe)
-					call Message("Warning: ENDELSEIF not matching IF")
+				if c=(ifinscribe)
+					Set loop loopstop
 				endif
-			Else
-				Set loop loopstop
-			EndElse
-		EndIf
-		If number==elsenr
-			setcall c prevcond()
-			if c==(ifinscribe)
-				Set loop loopstop
-			endif
-		EndIf
-	EndWhile
+			EndIf
+		EndWhile
 
-	Data ptrReg#1
-	Data ptrptrReg^ptrReg
-	Call getptrcontReg(structure,ptrptrReg)
-	Data Reg#1
-	Set Reg ptrReg#
-	Sub Reg dsz
-	Set ptrReg# Reg
+		Data ptrReg#1
+		Data ptrptrReg^ptrReg
+		Call getptrcontReg(structure,ptrptrReg)
+		Data Reg#1
+		Set Reg ptrReg#
+		Sub Reg dsz
+		Set ptrReg# Reg
+	endif
 	Return err
 EndFunction
 function prevcond()
@@ -286,8 +292,12 @@ Function closeifopenelse()
 	If err!=noerr
 		Return err
 	EndIf
-	Data elsenr=elsenumber
-	SetCall err condbeginwrite(elsenr)
+
+	setcall err xfile_add_char_if((Xfile_else))
+	if err=(noerror)
+		Data elsenr=elsenumber
+		SetCall err condbeginwrite(elsenr)
+	endif
 	Return err
 EndFunction
 
@@ -306,7 +316,7 @@ function continue()
 			set type structure#
 			if type!=(ifinscribe)
 				sub structure (dwsz)
-				if type==(whilenumber)
+				if type=(whilenumber)
 					vdata ptrcodesec%%ptr_codesec
 					sd codeoffset
 					call getcontReg(ptrcodesec,#codeoffset)
@@ -335,10 +345,10 @@ function break()
 			set type structure#
 			if type!=(ifinscribe)
 				sub structure (dwsz)
-				if type==(whilenumber)
+				if type=(whilenumber)
 					sd err
 					SetCall err condjump(0)
-					if err==(noerror)
+					if err=(noerror)
 						SetCall err condbeginwrite((breaknumber))
 					endif
 					Return err
--- ocompiler-1.orig/src/files/functions/commands/ret.s
+++ ocompiler-1/src/files/functions/commands/ret.s
@@ -6,9 +6,9 @@ function writeret()
 	sd continuation
 	sd continuationsize
 	setcall termswitch is_linux_end()
-	if termswitch==(TRUE)
+	if termswitch=(TRUE)
 		setcall err getexit(#continuation,#continuationsize)
-		if err==(noerror)
+		if err=(noerror)
 			Data ptrcodesec%%ptr_codesec
 			setcall err addtosec(continuation,continuationsize,ptrcodesec)
 		endif
--- ocompiler-1.orig/src/files/functions/commons/base.s
+++ ocompiler-1/src/files/functions/commons/base.s
@@ -65,7 +65,7 @@ Function getstructcont(data typenumber)
 	Data true=TRUE
 	Data scopeindependent=afterscopes
 
-	If fnbool==true
+	If fnbool=true
 		If typenumber<scopeindependent
 			Data nrofvars=numberofvars
 			Add typenumber nrofvars
@@ -159,7 +159,7 @@ function addtolog_withchar_handle(ss con
 	#this compare only at first chdir is extra
 		sd err
 		setcall err writefile_errversion(handle,#type,1)
-		if err==(noerror)
+		if err=(noerror)
 			setcall err addtolog_handle(content,size,handle)
 		endif
 		return err
@@ -187,7 +187,7 @@ function addtolog_array_withchar(sv arra
 	if ptrfilehandle#!=-1
 		sd err
 		setcall err writefile_errversion(ptrfilehandle#,#type,1)
-		if err==(noerror)
+		if err=(noerror)
 			while array#!=(NULL)
 				sd val;set val array#
 				incst array
@@ -204,11 +204,11 @@ endfunction
 #err
 function addtolog_withchar_parses(ss content,sd type,sd both)
 	sd err
-	if both==(FALSE)
+	if both=(FALSE)
 		sd ptrparses%ptr_parses
-		if ptrparses#==(pass_init)
+		if ptrparses#=(pass_init)
 			setcall err addtolog_withchar(content,type)
-		elseif ptrparses#==(pass_write)
+		elseif ptrparses#=(pass_write)
 			setcall err addtodebug_withchar(content,type)
 		else
 		#skip pass_calls
@@ -217,7 +217,7 @@ function addtolog_withchar_parses(ss con
 		return err
 	endif
 	setcall err addtolog_withchar(content,type)
-	if err==(noerror)
+	if err=(noerror)
 		setcall err addtodebug_withchar(content,type)
 	endif
 	return err
@@ -225,7 +225,7 @@ endfunction
 #err
 function addtolog_withchar_ex_atunused(ss content,sd size,sd type)
 	data ptrobject%ptrobject
-	if ptrobject#==(TRUE)
+	if ptrobject#=(TRUE)
 		sd err
 		setcall err addtolog_withchar_ex(content,size,type)
 		return err
@@ -235,7 +235,7 @@ endfunction
 #err
 function addtolog_withchar_ex_atunused_handle(ss content,sd size,sd type,sd filehandle)
 	data ptrobject%ptrobject
-	if ptrobject#==(TRUE)
+	if ptrobject#=(TRUE)
 		sd err
 		setcall err addtolog_withchar_handle(content,size,type,filehandle)
 		return err
@@ -258,7 +258,7 @@ function restore_cursors_onok(sd ptrcont
 	sd err
 	data noerr=noerror
 	setcall err forward(ptrcontent,ptrsize,data1,data2)
-	if err==noerr
+	if err=noerr
 		set ptrcontent# c
 		set ptrsize# s
 	endif
--- ocompiler-1.orig/src/files/functions/commons/comfn.s
+++ ocompiler-1/src/files/functions/commons/comfn.s
@@ -7,7 +7,7 @@ Function memrealloc(data ptrpointer,data
 	Set oldpointer ptrpointer#
 	SetCall newpointer realloc(oldpointer,size)
 	Data null=NULL
-	If newpointer==null
+	If newpointer=null
 		Char newmem="Memory allocation error."
 		Data pnewmem^newmem
 		Return pnewmem
@@ -44,7 +44,7 @@ Function memalloc(data pathsize)
 	SetCall errmsg memoryalloc(pathsize,memptr)
 	Data null=NULL
 	Data noerr=noerror
-	If errmsg==noerr
+	If errmsg=noerr
 		Return mem
 	Else
 		Call Message(errmsg)
@@ -58,7 +58,7 @@ Function memcalloc(data pathsize)
 	Data path=0
 	Data null=NULL
 	SetCall path memalloc(pathsize)
-	If path==null
+	If path=null
 		Return null
 	EndIf
 	Call memset(path,null,pathsize)
@@ -119,7 +119,7 @@ Function printbuf(sd format,sd message,s
 	Str buf#1
 	SetCall buf memalloc(bufsize)
 	Data null=NULL
-	If buf==null
+	If buf=null
 		Return null
 	EndIf
 	call sprintf(buf,format,message,s1,n1,n2)
@@ -132,7 +132,7 @@ function errorDefOut(str str1,str str2)
 	data ptrallocerrormsg%ptrallocerrormsg
 	SetCall ptrallocerrormsg# printbuf(format,str1,str2,0)
 	data null=NULL
-	If ptrallocerrormsg#==null
+	If ptrallocerrormsg#=null
 		return str1
 	EndIf
 	return ptrallocerrormsg#
@@ -146,7 +146,7 @@ Function openfile(data pfile,str path,da
 		set permission (pmode_mode);endif
 	Data openfalse=openno
 	SetCall pfile# open(path,oflag,permission)
-	If pfile#==openfalse
+	If pfile#=openfalse
 		str errorreturn#1
 		Str fileOpenErr="Cannot open a file:"
 		setcall errorreturn errorDefOut(fileOpenErr,path)
@@ -165,7 +165,7 @@ endfunction
 function openfile_mode_add_extension(ss path,ss extension,sd popen,sd mod)
 	sd er
 	setcall er maxpathverif(path,extension)
-	if er==(noerror)
+	if er=(noerror)
 		ss c;set c path
 		addcall c strlen(path)
 		ss b;setcall b strlen(extension)
@@ -210,7 +210,7 @@ Function requiredpad(data value,data pad
 	Sub value integers
 
 	Data zero=0
-	If value==zero
+	If value=zero
 		return zero
 	EndIf
 	Sub pad value
@@ -223,7 +223,7 @@ Function padwrite(data hfile,data size)
 	Data null=NULL
 	Data writefalse=writeno
 	SetCall padmem memcalloc(size)
-	If padmem==null
+	If padmem=null
 		return writefalse
 	EndIf
 	Data writeres#1
@@ -238,7 +238,7 @@ Function paddedwrite(data hfile,str buf,
 	Data padvalue#1
 	Set padvalue pad
 	Div padvalue padvalue
-	If padvalue==pad
+	If padvalue=pad
 		Set padvalue zero
 	Else
 		Set padvalue pad
@@ -247,12 +247,12 @@ Function paddedwrite(data hfile,str buf,
 	If ln!=zero
 		Data writefalse=writeno
 		SetCall writeres writefile(hfile,buf,ln)
-		If writeres==writefalse
+		If writeres=writefalse
 			Return writefalse
 		EndIf
 
 		SetCall padvalue requiredpad(ln,pad)
-		If padvalue==zero
+		If padvalue=zero
 			Return writeres
 		EndIf
 	EndIf
@@ -275,10 +275,10 @@ Function filepathdelims(char chr)
 	Char slash=asciislash
 	Data true=TRUE
 	Data false=FALSE
-	If chr==bslash
+	If chr=bslash
 		Return true
 	EndIf
-	If chr==slash
+	If chr=slash
 		Return true
 	EndIf
 	Return false
@@ -296,7 +296,7 @@ Function endoffolders(ss path)
         dec cursor
         sd bool
         setcall bool filepathdelims(cursor#)
-        if bool==(TRUE)
+        if bool=(TRUE)
 			inc cursor
             return cursor
         endif
@@ -313,7 +313,7 @@ function changedir(ss path)
 	data chdirresult#1
 
 	setcall testsamefolder strlen(path)
-	if testsamefolder==null
+	if testsamefolder=null
 		return chdirok
 	endif
 	SetCall chdirresult chdir(path)
@@ -323,7 +323,7 @@ endfunction
 #lseek
 function seekfile(sd file,sd n,sd whence,sv perr)
 	sd p;setcall p lseek(file,n,whence)
-	if p==-1    #see the other lseek
+	if p=-1    #see the other lseek
 		set perr# "lseek error"
 	endif
 	return p
@@ -365,7 +365,7 @@ Function file_get_content_ofs(str path,d
 		add size offset       ##this is only with MAX_PATH more on a int file size
 		#setcall err addfull(offset,#size)
 		SetCall err memoryalloc(size,ptrmem)
-		If err==noerr
+		If err=noerr
 			value mem#1
 			Set mem ptrmem#
 
--- ocompiler-1.orig/src/files/functions/commons/getcommand.s
+++ ocompiler-1/src/files/functions/commons/getcommand.s
@@ -430,7 +430,7 @@ const primsec_flags=x_call_flag|x_callx_
 #declare coresp
 function commandSubtypeDeclare_to_typenumber(sd subtype,sd p_is_expand)
 #these numbers will be used at getstruct directly
-	if subtype==(cCONST)
+	if subtype=(cCONST)
 		return (constantsnumber)
 	endif
 	div subtype (com_size)
@@ -478,41 +478,41 @@ Function getcommand(data pcontent,data p
 		sd extbooldata=FALSE
 		sv extbool^extbooldata
 
-		If command==(cPRIMSEC)
+		If command=(cPRIMSEC)
 			Set extstr call
-		elseif command==(cCALL)
+		elseif command=(cCALL)
 		vstr call_ret_str="RET"
 			set extstr call_ret_str
-		Elseif command==(cSTARTFUNCTION)
+		Elseif command=(cSTARTFUNCTION)
 			sd x;setcall x func_xfile(ptrsubtype#)
 			if x!=(Xfile_function_not_x)
 				Set extstr "X" #varargs
 			endif
-		elseif command==(cCALLEX)
+		elseif command=(cCALLEX)
 			set extstr call_ret_str
 		endElseif
 
 		SetCall result stringsatmemspc(pcontent,psize,offset,spacebool,extstr,extbool)
-		If extbooldata==true
+		If extbooldata=true
 		#here firstAndSecond part was recognized
-			If command==(cPRIMSEC)
+			If command=(cPRIMSEC)
 				#or first byte at subcommand to recognize the xcall at two args
 				or ptrsubtype# (x_call_flag)
-				if result==(FALSE)
+				if result=(FALSE)
 				#here there was not a space
 					setcall result stratmemspc(pcontent,psize,"X",spacebool)
-					if result==(TRUE)
+					if result=(TRUE)
 						or ptrsubtype# (x_callx_flag)
 					else
 						break
 					endelse
 				endif
 			Else
-				if result==(FALSE)
+				if result=(FALSE)
 				#here there was not a space
 					break
 				endif
-				If command==(cSTARTFUNCTION)
+				If command=(cSTARTFUNCTION)
 				#functionx/entry [x] , varargs
 					#allow the command at 64, there is a check inside parsefunc, and for xfile better to know
 					#sd for64;setcall for64 is_for_64()
@@ -525,7 +525,7 @@ Function getcommand(data pcontent,data p
 				endelse
 			endElse
 			return command
-		elseIf result==true
+		elseIf result=true
 			Return command
 		endelseIf
 		Add pointercommands dsz
--- ocompiler-1.orig/src/files/functions/commons/strcommons.s
+++ ocompiler-1/src/files/functions/commons/strcommons.s
@@ -37,7 +37,7 @@ Function strinmem(str content,data size,
 	Data b#1
 	While sz>=nrsz
 		SetCall b memcmp(cnt,match,nrsz)
-		If b==zero
+		If b=zero
 			Set nrsz sz
 			Inc nrsz
 		EndIf
@@ -46,7 +46,7 @@ Function strinmem(str content,data size,
 			Dec sz
 		EndIf
 	EndWhile
-	If b==zero
+	If b=zero
 		Sub cnt content
 		return cnt
 	EndIf
@@ -103,7 +103,7 @@ EndFunction
 function mem_spaces(ss content,ss last)
 	while content!=last
 		sd bool;setcall bool is_whitespace(content#)
-		if bool==(FALSE)
+		if bool=(FALSE)
 			return content
 		endif
 		inc content
@@ -117,13 +117,13 @@ function find_whitespaceORcomment(ss con
 	ss start;set start content
 	while content!=end
 		char b#1;set b content#
-		if b==(commentascii)
+		if b=(commentascii)
 			sub content start
 			return content
 		endif
 		sd bool
 		setcall bool is_whitespace(b)
-		if bool==(TRUE)
+		if bool=(TRUE)
 			sub content start
 			return content
 		endif
@@ -134,10 +134,10 @@ function find_whitespaceORcomment(ss con
 endfunction
 #bool
 function is_whitespace(char c)
-	if c==(asciispace)
+	if c=(asciispace)
 		return (TRUE)
 	endif
-	if c==(asciitab)
+	if c=(asciitab)
 		return (TRUE)
 	endif
 	return (FALSE)
@@ -147,9 +147,9 @@ const warn_hidden_whitespaces_times_p^wa
 #err
 function warn_hidden_whitespaces(sd inc)
 	sd p%p_hidden_pref
-	if p#==(TRUE)
+	if p#=(TRUE)
 		data warn_hidden_whitespaces_times_p%warn_hidden_whitespaces_times_p
-		if warn_hidden_whitespaces_times_p#==0
+		if warn_hidden_whitespaces_times_p#=0
 		#show once
 			sd goodwrongstring
 			setcall goodwrongstring errorDefOut("Hidden whitespaces at :",inc)
@@ -157,7 +157,7 @@ function warn_hidden_whitespaces(sd inc)
 			inc warn_hidden_whitespaces_times_p#
 		endif
 		sd w%p_w_as_e
-		if w#==(TRUE)
+		if w#=(TRUE)
 			return ""
 		endif
 	endif
@@ -165,7 +165,7 @@ function warn_hidden_whitespaces(sd inc)
 endfunction
 #err
 function warn_hidden_whitespaces_after(sd inc,sd dot_comma_end)
-	if dot_comma_end==0
+	if dot_comma_end=0
 		sd er;setcall er warn_hidden_whitespaces(inc)
 		return er
 	endif
@@ -177,7 +177,7 @@ Function spaces_helper(ss cursor,sd size
 	while cursor!=end
 		sd b
 		setcall b is_whitespace(cursor#)
-		if b==(TRUE)
+		if b=(TRUE)
 			inc cursor
 		else
 			return cursor
@@ -189,7 +189,7 @@ endfunction
 Function spaces(sd pcontent,sd psize)
 	sd start;set start pcontent#
 	setcall pcontent# spaces_helper(pcontent#,psize#)
-	if pcontent#==start
+	if pcontent#=start
 		return (FALSE)
 	endif
 	sub start pcontent#
@@ -210,22 +210,22 @@ Function stringsatmemspc(data pcontent,d
 	Set content pcontent#
 	Set size psize#
 	SetCall bool stratmem(tocontent,tosize,match)
-	If bool==zero
+	If bool=zero
 		Return zero
 	EndIf
 
 	If extstr!=zero
 		SetCall extbool# stratmem(tocontent,tosize,extstr)
-		if extbool#==(TRUE)
+		if extbool#=(TRUE)
 			#to work around ...callx, and ok in other cases
 			Set pcontent# content
 			Set psize# size
 		endif
 	EndIf
 
-	If spacereq==nonzero
+	If spacereq=nonzero
 		SetCall bool spaces(tocontent,tosize)
-		IF bool==zero
+		IF bool=zero
 			Return zero
 		EndIf
 	EndIf
@@ -257,7 +257,7 @@ Function quotescaped(Data pcontent,Data
 	EndIf
 	Set size psize#
 	Dec size
-	If size==zero
+	If size=zero
 		Return byte
 	EndIf
 
@@ -270,11 +270,11 @@ Function quotescaped(Data pcontent,Data
 		Return byte   ##quotation/null/another are relevant here
 	EndIf
 
-	if byte==(asciin)
+	if byte=(asciin)
 		return (asciireturn)
-	elseif byte==(asciir)
+	elseif byte=(asciir)
 		return (asciicarriage)
-	elseif byte==(asciit)
+	elseif byte=(asciit)
 		return (asciitab)
 	endelseif
 	return byte
@@ -289,7 +289,7 @@ Function quotientinmem(data ptrcontent,d
 	Data nonzero=1
 
 	SetCall intnr stratmem(ptrcontent,ptrsize,pquotation)
-	If intnr==zero
+	If intnr=zero
 		Return zero
 	EndIf
 
@@ -309,16 +309,16 @@ Function quotientinmem(data ptrcontent,d
 	While length!=zero
 		Set escbefore pescapes#
 		SetCall byte quotescaped(ptrdata,ptrlength,pescapes)
-		If byte==quotation
+		If byte=quotation
 			Set escafter pescapes#
-			If escbefore==escafter
+			If escbefore=escafter
 				Str datastart#1
 				Set datastart ptrcontent#
 				Sub data datastart
 				Set pquotsz# data
 				Return nonzero
 			EndIf
-		ElseIf byte==bnull
+		ElseIf byte=bnull
 			Return zero
 		EndElseIf
 		Inc data
@@ -332,7 +332,7 @@ Function quotinmem(data ptrcontent,data
 	Data bool#1
 	SetCall bool quotientinmem(ptrcontent,ptrsize,pquotsz,pescapes)
 	Data false=FALSE
-	If bool==false
+	If bool=false
 		Char strerr="Expecting string delimited by quotations and with the backslash the escape character."
 		Str ptrstrerr^strerr
 		Return ptrstrerr
@@ -364,38 +364,38 @@ function quotes_forward(sd p_content,ss
 	str unend="end string (\") expected"
 	sd escapes=0
 	inc content
-	if content==last
+	if content=last
 		return unend
 	endif
 	sd newlines=0
 	while content#!=delim
 		char escape_c=asciibs
-		while content#==escape_c
-			if escapes==0
+		while content#=escape_c
+			if escapes=0
 				set escapes 1
 			else
 				set escapes 0
 			endelse
 			inc content
-			if content==last
+			if content=last
 				return unend
 			endif
 		endwhile
 		char newline=asciireturn
-		if content#==newline
+		if content#=newline
 			if p_newlines!=0
 				inc newlines
 				set p_lastlinestart# content
 				inc p_lastlinestart#
 			endif
 		endif
-		if escapes==1
+		if escapes=1
 			inc content
 			set escapes 0
 		elseif content#!=delim
 			inc content
 		endelseif
-		if content==last
+		if content=last
 			return unend
 		endif
 	endwhile
--- ocompiler-1.orig/src/files/functions/commons/valinmem.s
+++ ocompiler-1/src/files/functions/commons/valinmem.s
@@ -9,11 +9,11 @@ Function valinmemsens(str content,data s
 	Char byte#1
 	Data zero=0
 
-	If size==zero
+	If size=zero
 		Return size
 	EndIf
 	Data backward=BACKWARD
-	If sens==backward
+	If sens=backward
 		Dec content
 	EndIf
 	Set byte content#
@@ -24,7 +24,7 @@ Function valinmemsens(str content,data s
 			Dec content
 		EndElse
 		Dec size
-		If size==zero
+		If size=zero
 			Set byte delim
 		Else
 			Set byte content#
--- ocompiler-1.orig/src/files/functions/commons/vars.s
+++ ocompiler-1/src/files/functions/commons/vars.s
@@ -3,10 +3,10 @@
 #same or zero
 function warn_or_log(sd type,sd return_value,ss symbolname,sd log_option,sd p_err,sd size)
 	data ptrobject%ptrobject
-	if ptrobject#==(TRUE)
-		if log_option==(log_warn)
+	if ptrobject#=(TRUE)
+		if log_option=(log_warn)
 			setcall p_err# addtolog_withchar_ex(symbolname,size,type) #is not calling atunused version, that will return noerror at object false
-			if p_err#==(noerror)
+			if p_err#=(noerror)
 				return 0
 			endif
 		endif
@@ -16,12 +16,12 @@ endfunction
 #same function, except the array
 function warn_or_log_vars(sd return_value,ss symbolname,sd p_err,sd size)
 	data ptrobject%ptrobject
-	if ptrobject#==(TRUE)
+	if ptrobject#=(TRUE)
 		data p_o_w%%p_offset_warn
-		if p_o_w#==(log_warn)
+		if p_o_w#=(log_warn)
 			sd vals;setcall vals vars_log((get),symbolname,size)
 			setcall p_err# addtolog_array_withchar(vals,(log_variable))
-			if p_err#==(noerror)
+			if p_err#=(noerror)
 				return 0
 			endif
 		endif
@@ -36,7 +36,7 @@ function vars_log(sd type,sd val,sd sz)
 	value *^dot;data *=1
 	value c#1;data cs#1
 	value *=NULL
-	if type==(set)
+	if type=(set)
 		set a val
 		set as sz
 	else
@@ -51,7 +51,7 @@ endfunction
 #err
 function vars_log_prepare(ss content,sd size)
 	data ptrobject%ptrobject
-	if ptrobject#==(TRUE)
+	if ptrobject#=(TRUE)
 		sd vals;setcall vals vars_log((get),content,size)
 		sd err
 		setcall err addtolog_array_withchar(vals,(log_offset))
@@ -95,18 +95,18 @@ function vars_core_ref_scope(ss content,
 			Set checkvalue pmask#
 			And checkvalue ReferenceBit
 			data ptrconstants%%ptr_constants;sd cb
-			If checkvalue==zero
+			If checkvalue=zero
 				data returnvalue#1
 				set returnvalue entrypoint
 				#
 				data ptrfunctions%%ptr_functions
-				if ptrfunctions==ptrstructure
+				if ptrfunctions=ptrstructure
 					Set checkvalue pmask#
 					sd against_idata=idatabitfunction
 					and against_idata checkvalue
-					if against_idata==0
+					if against_idata=0
 						and checkvalue (x86_64bit)
-						if checkvalue==0
+						if checkvalue=0
 							data ptrcodeFnObj%ptrcodeFnObj
 							setcall returnvalue warn_or_log((log_function),returnvalue,container,ptrcodeFnObj#,warningssearch,varsize)
 						else
@@ -114,7 +114,7 @@ function vars_core_ref_scope(ss content,
 							set returnvalue 0
 						endelse
 					endif
-				elseif ptrconstants==ptrstructure
+				elseif ptrconstants=ptrstructure
 					setcall cb constants_bool((const_warn_get))
 					setcall returnvalue warn_or_log((log_constant),returnvalue,container,cb,warningssearch,varsize)
 				else
@@ -127,12 +127,12 @@ function vars_core_ref_scope(ss content,
 			#elseIf ptrconstants==ptrstructure 0x72
 		Else
 			SetCall varsize strlen(container)
-			If varsize==size
+			If varsize=size
 				Data cmpret#1
 				SetCall cmpret memcmp(container,content,size)
-				If cmpret==zero
+				If cmpret=zero
 					#if set the reference is true
-					if setref==1
+					if setref=1
 						#go back from string to mask
 						#Sub container dwlen
 
@@ -150,7 +150,7 @@ function vars_core_ref_scope(ss content,
 				#are mixed with imports
 				sd against=idatabitfunction
 				and against pmask#
-				if against==0
+				if against=0
 					inc position_pointer#
 				endif
 			endif
@@ -207,7 +207,7 @@ Function searchinvars(str content,data s
 		SetCall ptrcontainer getstructcont(i)
 		SetCall data vars_core_ref(content,size,ptrcontainer,warningssearch,setref)
 		If data!=null
-			If warningssearch==null
+			If warningssearch=null
 				If ptrtype!=null
 					Set ptrtype# i
 				EndIf
@@ -280,7 +280,7 @@ const cast_string=Xfile_suffix_cast_stri
 Function varsufix(ss content,sd size,sd ptrdata,sd ptrlow,sd ptrsufix)
 	sd err
 	setcall err xfile_add_char_if((Xfile_arg_varfn_dot_no))
-	if err==(noerror)
+	if err=(noerror)
 		setcall err varsufix_ex(content,size,ptrdata,ptrlow,ptrsufix,(NULL))
 	endif
 	return err
@@ -301,31 +301,31 @@ function varsufix_ex(ss content,sd size,
 	Data null=NULL
 	Data data#1
 
-	if scope==(NULL)
+	if scope=(NULL)
 		SetCall data strinvars(content,size,ptrtype)
 	else
 		setcall data searchinvars_scope(content,size,ptrtype,scope)
 	endelse
-	If data==null
+	If data=null
 		SetCall err undefinedvariable()
 		Return err
 	EndIf
 
 	setcall err xfile_add_varsufix_if(content,size,ptrsufix#,cast)
-	if err==(noerror)
+	if err=(noerror)
 		Set ptrdata# data
 
 		Data charnumber=charnumber
 		sd prefix
 		setcall prefix prefix_bool()
 
-		If type==charnumber
-			If ptrsufix#==(sufix_true)
+		If type=charnumber
+			If ptrsufix#=(sufix_true)
 				Char ptrsfxerr="CHAR statement cannot have the pointer sufix."
 				Str _ptrsfxerr^ptrsfxerr
 				Return _ptrsfxerr
 			EndIf
-			if prefix#==0
+			if prefix#=0
 				Set ptrlow# true
 			else
 				#need all char address at prefix
@@ -335,12 +335,12 @@ function varsufix_ex(ss content,sd size,
 			sd is_str
 			setcall is_str cast_resolve(type,cast,ptrdata)
 
-			If is_str==false
+			If is_str=false
 				Set ptrlow# false
 			Else
 			#str ss
-				If ptrsufix#==(sufix_true)
-					if prefix#==0
+				If ptrsufix#=(sufix_true)
+					if prefix#=0
 						Set ptrlow# true
 					else
 						Set ptrlow# false
@@ -359,7 +359,7 @@ function sufix_test(ss content,sd p_size
 	add content p_size#
 	dec content
 	if content#!=(pointerascii)
-		if content#==(castascii)
+		if content#=(castascii)
 			setcall p_cast# cast_test(content,p_size)
 			return (sufix_true)
 		endif
@@ -382,15 +382,15 @@ function cast_test(ss content,sd p_size)
 		if c>=(a_from_az)
 			sub c (AZ_to_az)
 		endif
-		if c==(cast_value)
-		elseif c==(cast_data)
-		elseif c==(cast_string)
+		if c=(cast_value)
+		elseif c=(cast_data)
+		elseif c=(cast_string)
 		else
 			set c (no_cast)
 		endelse
 		if c!=(no_cast)
 			dec content
-			if content#==(pointerascii)
+			if content#=(pointerascii)
 				sub p_size# 3
 				call extend_sufix_test(content,p_size)
 				return c
@@ -403,7 +403,7 @@ endfunction
 function tempdatapair(ss p_trick,sv ptrdata,sd data2)
 	xor p_trick# 1
 	sd test=1;and test p_trick#
-	if test==0
+	if test=0
 		set p_trick data2
 		#add p_trick (location_and_mask)
 	else
@@ -418,12 +418,12 @@ endfunction
 
 #bool is_string
 function cast_resolve(sd number,sd cast,sv ptrdata)
-	if cast==(no_cast)
+	if cast=(no_cast)
 		Data stringsnumber=stringsnumber
 		Data stackstringnumber=stackstringnumber
-		if number==stringsnumber
+		if number=stringsnumber
 			return (TRUE)
-		elseif number==stackstringnumber
+		elseif number=stackstringnumber
 			return (TRUE)
 		endelseif
 		return (FALSE)
@@ -441,7 +441,7 @@ function cast_resolve(sd number,sd cast,
 		sd data;set data ptrdata#
 		add data (maskoffset)
 
-		if cast==(cast_data)
+		if cast=(cast_data)
 			and data# (~pointbit)
 		else
 		#cast==(cast_value)
--- ocompiler-1.orig/src/files/functions/dataassign.s
+++ ocompiler-1/src/files/functions/dataassign.s
@@ -21,8 +21,8 @@ Function dataassign(sd ptrcontent,sd ptr
 	#for size of var
 	sd reg;sd ptr_reserve
 
-	if punitsize==(NULL)
-		if typenumber==constantsnr
+	if punitsize=(NULL)
+		if typenumber=constantsnr
 			#this can't go after dataparse, addvarref will increase the offset
 			Call getcontReg(constantsstruct,ptroffset_const)
 			SetCall err addvarreferenceorunref(ptrcontent,ptrsize,valsize,typenumber,long_mask) #there are 2 more argument but are not used
@@ -30,7 +30,7 @@ Function dataassign(sd ptrcontent,sd ptr
 			If err!=noerr;Return err;EndIf
 		else
 			sd immovable_struct_cont
-			if stack==(TRUE)
+			if stack=(TRUE)
 				sd sectiontypenumber=totalmemvariables
 				add sectiontypenumber typenumber
 				#
@@ -53,7 +53,7 @@ Function dataassign(sd ptrcontent,sd ptr
 			add ptr_reserve (maskoffset_reserve)
 			call i_to_s(1,ptr_reserve) #why not set # 1? anyone can modify in peace and not set this part if not required. is this a plan? don't care
 
-			if sign==nosign
+			if sign=nosign
 				#stack variable declared without assignation, only increment stack variables
 				call addramp(#err)
 				Return err
@@ -67,7 +67,7 @@ Function dataassign(sd ptrcontent,sd ptr
 
 	Data size#1
 	Set size ptrsize#
-	If size==0
+	If size=0
 		#not at unitsize: constants,stacks
 		Char rightsideerr="Right side of the assignment expected."
 		Str ptrrightsideerr^rightsideerr
@@ -103,11 +103,11 @@ Function dataassign(sd ptrcontent,sd ptr
 	set skipNumberValue false
 	set importbittest -1
 
-	If sign==(assignsign)
+	If sign=(assignsign)
 		Set content ptrcontent#
 		#if byte==(relsign)
-		if relocbool==true
-			if dataxrel==true
+		if relocbool=true
+			if dataxrel=true
 				Call stepcursors(ptrcontent,ptrsize)
 				Call stepcursors(#content,#size)
 				#this was moved from here because of xfile, to know datax relocation
@@ -120,7 +120,7 @@ Function dataassign(sd ptrcontent,sd ptr
 				#	return "Unexpected relocation sign."
 				#endif
 				vdata ptr_nobits_virtual%ptr_nobits_virtual
-				if ptr_nobits_virtual#==(Yes)
+				if ptr_nobits_virtual#=(Yes)
 					set relocindx (dtnbind)
 				endif
 				#Set byte content#
@@ -131,10 +131,10 @@ Function dataassign(sd ptrcontent,sd ptr
 		Char groupstart="{"
 		If byte!=groupstart
 			char stringstart=asciidoublequote
-			If byte==stringstart
+			If byte=stringstart
 			#"text"
-				If typenumber==charnr
-					if stack==false
+				If typenumber=charnr
+					if stack=false
 					#else is at stack value   grep stackfilter2   2
 						set stringtodata true
 						set skipNumberValue true
@@ -142,11 +142,11 @@ Function dataassign(sd ptrcontent,sd ptr
 							set punitsize# 1    #was 1 from bsz is 1 from null end
 						endif
 					endif
-				ElseIf typenumber==stringsnr
+				ElseIf typenumber=stringsnr
 					set stringtodata true
-					if punitsize==(NULL)
+					if punitsize=(NULL)
 						setcall value get_img_vdata_dataReg()
-						if stack==false
+						if stack=false
 							if long_mask!=0
 								add value (qwsz)
 							else
@@ -154,7 +154,7 @@ Function dataassign(sd ptrcontent,sd ptr
 								addcall value reloc64_mid()
 							endelse
 						endif
-						if relocbool==true
+						if relocbool=true
 							str badrelocstr="Relocation sign and string surrounded by quotations is not allowed."
 							return badrelocstr
 						endif
@@ -162,20 +162,20 @@ Function dataassign(sd ptrcontent,sd ptr
 					else
 						#let relocationsign, mess with dataReg, possible error will be catched at pass_write
 						inc punitsize#   #null end
-						if stack==false
-							if long_mask==0
+						if stack=false
+							if long_mask=0
 								#for ^ and rel64 write is somewhere else
 								addcall punitsize# reloc64_mid()
 							endif
 						endif
 					endelse
 				EndElseIf
-				if stringtodata==false
+				if stringtodata=false
 					char bytesatintegers="The string assignment (\"\") can be used at CHAR, STR or SS."
 					str bytesatints^bytesatintegers
 					return bytesatints
 				endif
-				if punitsize==(NULL)
+				if punitsize=(NULL)
 					setcall err xfile_add_char_if((Xfile_declmode_string))
 					If err!=noerr;Return err;EndIf
 				endif
@@ -194,8 +194,8 @@ Function dataassign(sd ptrcontent,sd ptr
 				if err!=noerr
 					return err
 				endif
-				If typenumber==charnr
-					if stack==false
+				If typenumber=charnr
+					if stack=false
 					#else is at stack value   grep stackfilter2   3
 						set valuewritesize (bsz)
 					endif
@@ -204,7 +204,7 @@ Function dataassign(sd ptrcontent,sd ptr
 		Else
 		#{} group
 			if punitsize!=(NULL)
-				if stack==true
+				if stack=true
 				#ss =% {}      is 0
 					call advancecursors(ptrcontent,ptrsize,size)
 					return (noerror)
@@ -213,7 +213,7 @@ Function dataassign(sd ptrcontent,sd ptr
 				setcall err xfile_add_char_if((Xfile_declmode_group))
 				If err!=noerr;Return err;EndIf
 			endelse
-			If typenumber==constantsnr
+			If typenumber=constantsnr
 				Char constgroup="Group begin sign ('{') is not expected to declare a constant."
 				Str ptrconstgroup^constgroup
 				Return ptrconstgroup
@@ -224,12 +224,12 @@ Function dataassign(sd ptrcontent,sd ptr
 			Data sz#1
 			Char groupstop="}"
 			SetCall sz valinmem(content,size,groupstop)
-			If sz==size
+			If sz=size
 				Char groupend="Group end sign ('}') expected."
 				Str ptrgroupend^groupend
 				Return ptrgroupend
 			EndIf
-			if punitsize==(NULL)
+			if punitsize=(NULL)
 				SetCall err enumcommas(ptrcontent,ptrsize,sz,true,typenumber,(NULL),(not_hexenum),stack,long_mask,relocbool,relocindx)
 				If err!=noerr;Return err;EndIf
 				setcall err xfile_add_commas_if()
@@ -242,15 +242,15 @@ Function dataassign(sd ptrcontent,sd ptr
 			Call stepcursors(ptrcontent,ptrsize)
 			Return noerr
 		EndElse
-	ElseIf sign==(reservesign)
+	ElseIf sign=(reservesign)
 		setcall err get_reserve_size(ptrcontent,ptrsize,size,ptrvalue,stack,typenumber,long_mask,ptr_reserve)
-		if err==(noerror)
+		if err=(noerror)
 			if punitsize!=(NULL)
 				set punitsize# value
 				return (noerror)
 			endif
-			if stack==false
-				if is_expand==(TRUE)
+			if stack=false
+				if is_expand=(TRUE)
 					vdata ptrdataSize%ptrdataSize
 					add ptrdataSize# value
 				else
@@ -270,7 +270,7 @@ Function dataassign(sd ptrcontent,sd ptr
 		Set content ptrcontent#
 		data doublepointer#1
 		set doublepointer zero
-		if content#==(pointersigndeclare)
+		if content#=(pointersigndeclare)
 			inc doublepointer
 			call stepcursors(ptrcontent,ptrsize)
 			Set content ptrcontent#
@@ -282,7 +282,7 @@ Function dataassign(sd ptrcontent,sd ptr
 		If pointer!=zero
 			data rightstackbit#1
 			setcall rightstackbit stackbit(pointer)
-			if rightstackbit==0
+			if rightstackbit=0
 				Set value pointer#
 
 				#data^datax or sd^datax
@@ -293,7 +293,7 @@ Function dataassign(sd ptrcontent,sd ptr
 				endif
 			else
 				set relocbool false
-				if stack==false
+				if stack=false
 					If typenumber!=constantsnr
 					#data^stack
 						setcall err writetake((eaxregnumber),pointer)
@@ -323,12 +323,12 @@ Function dataassign(sd ptrcontent,sd ptr
 				endelse
 			endelse
 		Else
-			If typenumber==constantsnr
+			If typenumber=constantsnr
 				SetCall err undefinedvariable()
 				Return err
 			EndIf
 			SetCall pointer vars(content,size,ptrfunctions)
-			If pointer==zero
+			If pointer=zero
 				setcall err undefinedvar_fn()
 				return err
 			EndIf
@@ -337,14 +337,14 @@ Function dataassign(sd ptrcontent,sd ptr
 			setcall value get_function_value(importbittest,pointer)
 
 			Data ptrobject%ptrobject
-			If ptrobject#==false
+			If ptrobject#=false
 				data addatend#1
 				data ptrvirtualimportsoffset%ptrvirtualimportsoffset
 				data ptrvirtuallocalsoffset%ptrvirtuallocalsoffset
-				If importbittest==false
+				If importbittest=false
 					set addatend ptrvirtuallocalsoffset
 				else
-					if doublepointer==zero
+					if doublepointer=zero
 						str doubleexp="Double pointer (^^) expected in this case: executable format and imported function."
 						return doubleexp
 					endif
@@ -354,7 +354,7 @@ Function dataassign(sd ptrcontent,sd ptr
 
 				sd section
 				sd section_offset
-				if stack==false
+				if stack=false
 					set section ptrdatasec
 					set section_offset zero
 				else
@@ -378,16 +378,16 @@ Function dataassign(sd ptrcontent,sd ptr
 		if err!=noerr;return err;endif
 		Call advancecursors(ptrcontent,ptrsize,size)
 	EndElse
-	if skipNumberValue==false
+	if skipNumberValue=false
 		If typenumber!=constantsnr
 			#it can be data% but with R_X86_64_64 at prefs and that will force 8 bytes
-			if punitsize==(NULL)
+			if punitsize=(NULL)
 				#init -1, 0 is local function in the right
-				if importbittest==0
+				if importbittest=0
 					sd p_inplace_reloc_pref%p_inplace_reloc_pref
 					#at addend 0 at data/code must not pe resolved
 					if p_inplace_reloc_pref#!=(zero_reloc)
-						if stack==false
+						if stack=false
 							setcall err unresLc(0,ptrdatasec,0)
 						else
 							#it's only an imm to reg
@@ -413,12 +413,12 @@ Function dataassign(sd ptrcontent,sd ptr
 			Set container# value
 		EndElse
 	endif
-	if stringtodata==true
+	if stringtodata=true
 		sd escapes
 		SetCall err quotinmem(ptrcontent,ptrsize,ptrvalue,#escapes)
-		if punitsize==(NULL)
+		if punitsize=(NULL)
 			SetCall err addtosecstresc_xfile(ptrcontent,ptrsize,value,escapes,ptrdatasec,(FALSE))
-			if err==(noerror)
+			if err=(noerror)
 				Call stepcursors(ptrcontent,ptrsize)
 			endif
 			return err
@@ -448,7 +448,7 @@ function get_function_value(sd impbit,sd
 endfunction
 #relocindex
 function get_function_values(sd impbit,sd p_value,sd pointer)
-	If impbit==0
+	If impbit=0
 		#code
 		return (codeind)
 	endif
@@ -472,7 +472,7 @@ function get_reserve_size(sv ptrcontent,
 
 	sd value;set value ptrvalue#
 	vdata p_parses%ptr_parses
-	if p_parses==(pass_write)
+	if p_parses=(pass_write)
 	#ptr_reserve is undefined at another pass (and theoretically at constants)
 		if value<=(wmax)
 			call i_to_s(value,ptr_reserve)
@@ -481,12 +481,12 @@ function get_reserve_size(sv ptrcontent,
 		endelse
 	endif
 
-	if is_stack==(FALSE)
+	if is_stack=(FALSE)
 		If typenumber!=(charnumber)
 			SetCall err maxsectioncheck(value,ptrvalue)
-			If err==(noerror)
+			If err=(noerror)
 				SetCall err maxsectioncheck(ptrvalue#,ptrvalue)
-				If err==(noerror)
+				If err=(noerror)
 					if long_mask!=0
 						SetCall err maxsectioncheck(ptrvalue#,ptrvalue)
 					endif
@@ -495,12 +495,12 @@ function get_reserve_size(sv ptrcontent,
 		EndIf
 	else
 		SetCall err maxsectioncheck(value,ptrvalue)
-		If err==(noerror)
+		If err=(noerror)
 			SetCall err maxsectioncheck(ptrvalue#,ptrvalue)
-			If err==(noerror)
+			If err=(noerror)
 				#at format 64 can be a *2 at growramp
 				sd b;setcall b is_for_64()
-				if b==(TRUE)
+				if b=(TRUE)
 					SetCall err maxsectioncheck(ptrvalue#,ptrvalue)
 				endIf
 			endIf
@@ -513,13 +513,13 @@ endfunction
 function set_reserve(sd value)
 	vData ptrdatasec%%ptr_datasec
 	sd p_nul_res_pref%p_nul_res_pref
-	if p_nul_res_pref#==(TRUE)
+	if p_nul_res_pref#=(TRUE)
 		sd reg;call getcontReg(ptrdatasec,#reg)
 	endif
 	sd err
 	SetCall err addtosec(0,value,ptrdatasec)
-	If err==(noerror)
-		if p_nul_res_pref#==(TRUE)
+	If err=(noerror)
+		if p_nul_res_pref#=(TRUE)
 			sd cont;call getcont(ptrdatasec,#cont)
 			add cont reg
 			call memset(cont,0,value)
--- ocompiler-1.orig/src/files/functions/debug.s
+++ ocompiler-1/src/files/functions/debug.s
@@ -12,31 +12,31 @@ function debug_lines(sd reg,sd line,sd c
 		#set line
 		set aux prevLine;set prevLine line
 		set test (TRUE)
-	elseif content==last  #but last line with no new line must be verified
+	elseif content=last  #but last line with no new line must be verified
 		set aux prevLine;set prevLine line
 		set test (TRUE)
 	else
 		set test (FALSE)
 	endelse
-	if test==(TRUE)
+	if test=(TRUE)
 		if reg!=codeRegD
 			sv ptrdebug%%ptr_debug
 			char a=log_line
 			sd err
 			setcall err addtosec(#a,(bsz),ptrdebug)
-			if err==(noerror)
+			if err=(noerror)
 				charx buf#dw_char_0
 				sd len
 				inc aux
 				setcall len dwtomem(aux,#buf)
 				setcall err addtosec(#buf,len,ptrdebug)
-				if err==(noerror)
+				if err=(noerror)
 					char b=asciispace
 					setcall err addtosec(#b,(bsz),ptrdebug)
-					if err==(noerror)
+					if err=(noerror)
 						setcall len dwtomem(codeRegD,#buf)
 						setcall err addtosec(#buf,len,ptrdebug)
-						if err==(noerror)
+						if err=(noerror)
 							sd t;sd sz;setcall t log_term(#sz)
 							setcall err addtosec(t,sz,ptrdebug)
 							#set codeReg
@@ -54,16 +54,16 @@ endfunction
 #err
 function addtodebug_withchar(ss content,sd char)
 	sd ptr_has_debug%ptr_has_debug
-	if ptr_has_debug#==(Yes)
+	if ptr_has_debug#=(Yes)
 	#at exec formats will add for no one
 	#if blocking at exe , care to remove if dst==debugsec from addtosec
 		sv ptrdebug%%ptr_debug
 		sd err
 		setcall err addtosec(#char,(bsz),ptrdebug)
-		if err==(noerror)
+		if err=(noerror)
 			sd ln;setcall ln strlen(content)
 			setcall err addtosec(content,ln,ptrdebug)
-			if err==(noerror)
+			if err=(noerror)
 				sd t;sd sz;setcall t log_term(#sz)
 				setcall err addtosec(t,sz,ptrdebug)
 			endif
--- ocompiler-1.orig/src/files/functions/elf/elf.s
+++ ocompiler-1/src/files/functions/elf/elf.s
@@ -82,7 +82,7 @@ function elfaddsec_base(sd stringname,sd
 	Data err#1
 	#is false at inits, no worry about only at object
 	sd e64;setcall e64 is_for_64()
-	if e64==(TRUE)
+	if e64=(TRUE)
 		Set sh64_name stringname;Set sh64_type type;Set sh64_flags flags;set sh64_addr addr;Set sh64_offset fileoffset
 		set sh64_size bsize;Set sh64_link link;Set sh64_info info;Set sh64_addralign align;Set sh64_entsize entsize
 		setcall err addtosec(#sh64_name,(elf64_section_size),ptrbag)
@@ -122,7 +122,7 @@ Function elfaddstrsec(data stringofname,
 	sd regnr#1
 	sd ptrregnr^regnr
 	SetCall err addtonames(stringofname,ptrregnr)
-	If err==(noerror)
+	If err=(noerror)
 		setcall err elfaddsec(regnr,type,flags,fileoffset,seccont,link,info,align,entsize)
 	endif
 	return err
@@ -141,7 +141,7 @@ const elf_sym_st_info_tohibyte=16
 
 	sd err
 	sd x;setcall x is_for_64()
-	if x==(TRUE)
+	if x=(TRUE)
 		Data elf64_sym_st_name#1
 	#const elf64_sym_st_info_offset=dwsz
 		Char elf64_sym_st_info#1
@@ -197,7 +197,7 @@ Function elfaddstrszsym(data stringstrof
 	Data err#1
 	Data noerr=noerror
 	SetCall err addtonamessized(stringstroff,sz,ptrregnr)
-	If err==noerr
+	If err=noerr
 		SetCall err elfaddsym(regnr,value,size,type,bind,index,struct)
 	EndIf
 	Return err
@@ -246,7 +246,7 @@ Function addrel_base(sd offset,sd symbol
 
 	sd err
 	sd x;setcall x is_for_64()
-	if x==(TRUE)
+	if x=(TRUE)
 		Data elf64_r_offset#1;data *=0
 		data elf64_r_info_type#1
 	const p_elf64_r_info_type^elf64_r_info_type
@@ -297,7 +297,7 @@ Function adddirectrel_base(sd relsec,sd
 	Data ptrcodesec%%ptr_codesec
 	Data ptraddresses%%ptr_addresses
 	Data struct#1
-	If relsec==ptraddresses
+	If relsec=ptraddresses
 		Set struct ptrdatasec
 	Else
 		Set struct ptrcodesec
--- ocompiler-1.orig/src/files/functions/enumbags.s
+++ ocompiler-1/src/files/functions/enumbags.s
@@ -7,7 +7,7 @@ Function enumbags(data is_declare)
 	set cursor cursor#
 	add cursor pointer
 	While pointer!=cursor
-		If is_declare==(TRUE)
+		If is_declare=(TRUE)
 			sd err;setcall err enumbags_alloc(pointer)
 			If err!=(noerror)
 				Return err
--- ocompiler-1.orig/src/files/functions/global/funcs.s
+++ ocompiler-1/src/files/functions/global/funcs.s
@@ -29,7 +29,7 @@ function localResolve(sd unrLc,sd unrLcR
 
 		add unrLc 4
 
-		if unrLc#==1
+		if unrLc#=1
 			add offset 4
 			sub offset value
 			setcall offset neg(offset)
@@ -93,7 +93,7 @@ function unresReloc(sd section)
 	sd for_64
 	sd err
 	setcall for_64 is_for_64()
-	if for_64==(TRUE)
+	if for_64=(TRUE)
 		setcall err unresLc((-qwsz),section,0)
 	else
 		setcall err unresLc((-dwsz),section,0)
--- ocompiler-1.orig/src/files/functions/import.s
+++ ocompiler-1/src/files/functions/import.s
@@ -1,11 +1,11 @@
 
 function import_leading_underscore(sv pcontent,sd pcomsize,sd ptrimpquotsz)
 	sd p_underscore_pref%p_underscore_pref
-	if p_underscore_pref#==(TRUE)
+	if p_underscore_pref#=(TRUE)
 		ss content
 		set content pcontent#
 		#here it is inside quotes
-		if content#==(asciiunderscore)
+		if content#=(asciiunderscore)
 			call stepcursors(pcontent,pcomsize)
 			dec ptrimpquotsz#
 		endif
--- ocompiler-1.orig/src/files/functions/include.s
+++ ocompiler-1/src/files/functions/include.s
@@ -19,7 +19,7 @@ function offsetoffile_value()
 	set offsetoffl null
 	data ptrincludedir%ptrincludedir
 	data flag_max_path=flag_MAX_PATH
-	if ptrincludedir#==true
+	if ptrincludedir#=true
 		add offsetoffl flag_max_path
 	endif
 	return offsetoffl
@@ -48,10 +48,10 @@ Function include(ss path,sd both,sd subt
 
 	setcall offsetoffl offsetoffile_value()
 
-	if subtype==(cEINCLUDE)
+	if subtype=(cEINCLUDE)
 		vData warningsboolptr%ptrwarningsbool
 		set mask warningsboolptr#
-		if mask==(TRUE)
+		if mask=(TRUE)
 			set warningsboolptr# (FALSE)
 		endif
 	else
@@ -67,10 +67,10 @@ Function include(ss path,sd both,sd subt
 	SetCall folders endoffolders(path)
 
 	data ptrincludedir%ptrincludedir
-	if ptrincludedir#==(TRUE)
+	if ptrincludedir#=(TRUE)
 		data charpointer#1
 		setcall charpointer getcwd(pcontentoffl#,(flag_MAX_PATH))
-		if charpointer==(NULL)
+		if charpointer=(NULL)
 			str getcwderr="Getcdw error."
 			return getcwderr
 		endif
@@ -125,7 +125,7 @@ Function include(ss path,sd both,sd subt
 	Call memtomem(dest,folders,fnamesize)
 
 	Add dest fnamesize
-	If moresize==one
+	If moresize=one
 		Char morestr="~"
 		Set dest# morestr
 		Add dest one
@@ -166,11 +166,11 @@ function include_sec_skip(sv pcontent,sd
 	ss content;set content pcontent#
 	sd size;set size pcomsize#
 	call spaces(#content,#size)
-	if content#==(asciidoublequote)
+	if content#=(asciidoublequote)
 		sd err
 		sd s;sd dummy
 		SetCall err quotinmem(#content,#size,#s,#dummy)
-		if err==(noerror)
+		if err=(noerror)
 			add content s;sub size s
 			call stepcursors(#content,#size)
 			set pcontent# content;set pcomsize# size
--- ocompiler-1.orig/src/files/functions/index.s
+++ ocompiler-1/src/files/functions/index.s
@@ -7,11 +7,11 @@ function command_start(sv p_is_comment,s
 	set p_is_comment_multiline# 0
 	ss pointer;set pointer p_content#
 	if pointer!=last
-		if pointer#==(commentascii)
+		if pointer#=(commentascii)
 			set p_is_comment# 1
 			inc pointer
 			if pointer!=last
-				if pointer#==(asciiexclamationmark)
+				if pointer#=(asciiexclamationmark)
 					set p_is_comment_multiline# 1
 					inc pointer
 				endif
--- ocompiler-1.orig/src/files/functions/inits.s
+++ ocompiler-1/src/files/functions/inits.s
@@ -22,7 +22,7 @@ function comline_parse(sd argc,sv argv)
 			sd name
 			set name argv#
 			incst argv
-			if argv==argc
+			if argv=argc
 				return "missing value for command line argument"
 			endif
 			sd value
@@ -43,7 +43,7 @@ function comline_value(ss v,sd p)
 	if input!=0
 		if input>=(asciizero)
 			inc v
-			if v#==0
+			if v#=0
 				sub input (asciizero)
 				if input<=(last_call_align_input)
 					set p# input
@@ -68,10 +68,10 @@ function comline_pointer(ss a,sd p_p)
 		ss b;set b t#
 		sd b_len
 		setcall b_len strlen(b)
-		if a_len==b_len
+		if a_len=b_len
 			sd c
 			setcall c memcmp(a,b,a_len)
-			if c==0
+			if c=0
 				sub t (nr_of_prefs_jumper)  #this will subtract from strings and will be straight on the pointers
 				set p_p# t#
 				return (noerror)
--- ocompiler-1.orig/src/files/functions/override.s
+++ ocompiler-1/src/files/functions/override.s
@@ -4,13 +4,13 @@ function override_com(sd pcontent,sd psi
 	sd name
 	sd namesize
 	setcall namesize valinmem(pcontent#,psize#,(asciispace))
-	if namesize==0
+	if namesize=0
 		return "first argument is missing at override"
 	endif
 	set name pcontent#
 	call advancecursors(pcontent,psize,namesize)
 	call spaces(pcontent,psize)
-	if psize#==0
+	if psize#=0
 		return "second argument is missing at override"
 	endif
 	#work can be done do allow line comment here
@@ -22,7 +22,7 @@ function override_com(sd pcontent,sd psi
 	sd allocsize=1+1;add allocsize valuesize
 	add allocsize namesize
 	setcall err memoryalloc(allocsize,#mem)
-	if err==(noerror)
+	if err=(noerror)
 		ss p;set p mem
 		call memtomem(p,name,namesize);add p namesize
 		set p# 0;inc p
@@ -30,7 +30,7 @@ function override_com(sd pcontent,sd psi
 		call memtomem(p,pcontent#,valuesize);add p valuesize
 		set p# 0
 		setcall err prefs_set(mem,value)
-		if err==(noerror)
+		if err=(noerror)
 			call advancecursors(pcontent,psize,valuesize)
 		endif
 		call free(mem)
--- ocompiler-1.orig/src/files/functions/pref/preffuncs.s
+++ ocompiler-1/src/files/functions/pref/preffuncs.s
@@ -10,19 +10,19 @@ Function warnings(sd p_err,sd has_named_
 	Data warningsboolptr%ptrwarningsbool
 	Data warningsbool#1
 	Set warningsbool warningsboolptr#
-	If warningsbool==(TRUE)
+	If warningsbool=(TRUE)
 		sd fn_name
 		sd var
 		setcall var scopes_searchinvars(p_err,#fn_name)
-		If var==(NULL)
-			if has_named_entry==(FALSE)
+		If var=(NULL)
+			if has_named_entry=(FALSE)
 				call vars_log_reset()
 				SetCall var searchinvars((NULL),0,(NULL),p_err) #,setref unused
 				if var!=(NULL)
 					set fn_name "(entry)"
 				endif
 			endif
-			if var==(NULL)
+			if var=(NULL)
 				data ptrcodeFnObj%ptrcodeFnObj
 				if ptrcodeFnObj#!=(ignore_warn)
 					Data functionsptr%%ptr_functions
@@ -31,7 +31,7 @@ Function warnings(sd p_err,sd has_named_
 						set fn_name "(function)"
 					endif
 				endif
-				if var==(NULL)
+				if var=(NULL)
 					sd cb;setcall cb constants_bool((const_warn_get))
 					if cb!=(ignore_warn)
 						data constantsptr%%ptr_constants
@@ -44,7 +44,7 @@ Function warnings(sd p_err,sd has_named_
 			EndIf
 		EndIf
 		If var!=(NULL)
-			if p_err#==(noerror)
+			if p_err#=(noerror)
 				Char unrefformat="Unreferenced variable/function/constant: %s. Parent: %s."
 				Str ptrunrefformat^unrefformat
 
@@ -59,7 +59,7 @@ Function warnings(sd p_err,sd has_named_
 				EndIf
 				Call safeMessage(printbuffer)
 				sd w%p_w_as_e
-				if w#==(TRUE)
+				if w#=(TRUE)
 					set p_err# ""
 					return (FALSE)
 				endif
@@ -96,7 +96,7 @@ function parsepreferences(sd ptrcontent,
 				Sub backp# (asciizero)
 			endIf
 		else
-			if is_comment==(FALSE)
+			if is_comment=(FALSE)
 				call Message("Unrecognized preference")
 			endif
 		endelse
@@ -117,7 +117,7 @@ function parsepreferences_back(sd sizeba
 			ss e;set e s;add e i
 			sd b
 			setcall b parsepreferences_back_helper(content,e,s,sizeback,i,p_is_comment)
-			if b==(TRUE)
+			if b=(TRUE)
 				#and put this to last because it is not expected to get same preference more than one time
 				sv test;sv test2
 				set test2 strs_pointers;sub test2 (nr_of_prefs_jumper)
@@ -147,7 +147,7 @@ function parsepreferences_back(sd sizeba
 
 				set test# store
 				return return
-			elseif p_is_comment#==(TRUE)
+			elseif p_is_comment#=(TRUE)
 				#this is a recognized preference but it is commented, stop comparing characters
 				return (NULL)
 			endelseif
@@ -170,7 +170,7 @@ function parsepreferences_back_helper(ss
 		dec content
 		if content#!=(asciireturn)
 			if content#!=(asciicarriage)
-				if content#==(asciinumber)
+				if content#=(asciinumber)
 					set p_is_comment# (TRUE)
 				endif
 				return (FALSE)
@@ -289,12 +289,12 @@ function setpreferences(vstr scrpath)
 			Call safeMessage(err)
 		EndIf
 	endif
-	If err==noerr
+	If err=noerr
 		Data freepreferences#1
 		Set freepreferences preferencescontent
 
 		sd b=TRUE
-		while b==(TRUE)
+		while b=(TRUE)
 			setcall b parsepreferences(ptrpreferencescontent,ptrpreferencessize)
 		endwhile
 
@@ -305,7 +305,7 @@ EndFunction
 
 function constants_bool(sd direction)
 	data bool#1
-	if direction==(const_warn_get)
+	if direction=(const_warn_get)
 		return bool
 	endif
 	return #bool
@@ -313,7 +313,7 @@ endfunction
 
 function inplace_reloc(sd p_addend)
 	sd p_inplace_reloc_pref%p_inplace_reloc_pref
-	if p_inplace_reloc_pref#==(zero_reloc)
+	if p_inplace_reloc_pref#=(zero_reloc)
 		set p_addend# (i386_obj_default_reloc)
 	endif
 endfunction
--- ocompiler-1.orig/src/files/functions/pref/sdsv.s
+++ ocompiler-1/src/files/functions/pref/sdsv.s
@@ -1,9 +1,9 @@
 
 function sd_as_sv(sd direction,sd typenumber)
 	data bool#1
-	if direction==(sd_as_sv_bool)
-		if bool==(TRUE)
-			if typenumber==(stackdatanumber);return (TRUE);endif
+	if direction=(sd_as_sv_bool)
+		if bool=(TRUE)
+			if typenumber=(stackdatanumber);return (TRUE);endif
 		endif
 		return (FALSE)
 	endif
--- ocompiler-1.orig/src/files/functions/scopes.s
+++ ocompiler-1/src/files/functions/scopes.s
@@ -72,7 +72,7 @@ function scopes_alloc(sd has_named_entry
 	#if has_named_entry==(FALSE)
 	#	sub i :
 	#endif
-	if has_named_entry==(TRUE)
+	if has_named_entry=(TRUE)
 		inc i
 	endif
 	mult i :
@@ -85,7 +85,7 @@ function scopes_alloc(sd has_named_entry
 		set s# i
 		sv pointer;set pointer start
 		add pointer i
-		if has_named_entry==(TRUE)
+		if has_named_entry=(TRUE)
 			#entry tag is, and is last, entry. define global variable, use in function is practical
 			sub pointer :
 			sd scps%%ptr_scopes
@@ -95,7 +95,7 @@ function scopes_alloc(sd has_named_entry
 		while start!=pointer
 			sub pointer :
 			setcall pointer# memcalloc((sizeofscope+sizeofclassinfo)) #is calloc, needing reg 0, in case it is searched , and at freeings, and at size (grab future)
-			if pointer#==(NULL)
+			if pointer#=(NULL)
 				return (error)
 			endif
 		endwhile
@@ -167,7 +167,7 @@ function scopes_searchinvars(sd p_err,sv
 		sd ibit;setcall ibit importbit(fns)
 		add fns (nameoffset)
 		sd size;setcall size strlen(fns)
-		if ibit==0
+		if ibit=0
 			sd data
 			sd scope
 			setcall scope scopes_get_scope(i)
@@ -212,8 +212,8 @@ function get_scope_data_size(sd pos,sd i
 	sd size
 	sd scope;setcall scope scopes_get_scope(pos)
 	if scope!=entrybags
-		if ptrfunctionTagIndex#==pos
-			if ptrinnerfunction#==(TRUE)
+		if ptrfunctionTagIndex#=pos
+			if ptrinnerfunction#=(TRUE)
 				add scope (sizeofscope)
 				if is_expand!=0
 					add scope (classinfostartdatax)
@@ -234,7 +234,7 @@ function get_scope_data_size(sd pos,sd i
 		return scope# #calloc at bigger
 	endif
 	#entry
-	if ptrinnerfunction#==(TRUE)
+	if ptrinnerfunction#=(TRUE)
 		setcall scope scopes_get_scope(ptrfunctionTagIndex#)
 		add scope (sizeofscope)
 		if is_expand!=0
--- ocompiler-1.orig/src/files/functions/stack/stack.s
+++ ocompiler-1/src/files/functions/stack/stack.s
@@ -4,7 +4,7 @@
 function ramp_index(data mode,data container)
 	data reg#1
 	data set=0
-	if mode==set
+	if mode=set
 		data ptrreg^reg
 		#const ramppointer^reg
 		call getcontReg(container,ptrreg)
@@ -88,7 +88,7 @@ function entryscope()
 	setcall err addtosec(#scope3,(scope3_sz),container);if err!=(noerror);return err;endif
 	setcall err rex_w_if64();if err!=(noerror);return err;endif
 	setcall err addtosec(#scope4,(scope4_sz),container);if err!=(noerror);return err;endif
-	if err==(noerror)
+	if err=(noerror)
 		data set=0;call ramp_index(set,container)
 		setcall err align_entryscope()
 	endif
@@ -99,7 +99,7 @@ endfunction
 function entryscope_verify_code()
 	data ptrfnavailable%ptrfnavailable
 	data one=1
-	if ptrfnavailable#==one
+	if ptrfnavailable#=one
 		data ptrinnerfunction%globalinnerfunction
 		if ptrinnerfunction#!=(TRUE)
 			data two=2
@@ -120,13 +120,13 @@ function addtocode_decstack(sd for_64)
 	vdata ptrcodesec%%ptr_codesec
 
 	sd err
-	if for_64==(TRUE)
+	if for_64=(TRUE)
 		call rex_w(#err);if err!=(noerror);return err;endif
 	endif
 
 	setcall rampindex addramp(#err)
 	#is with sub now     neg rampindex
-	if err==(noerror)
+	if err=(noerror)
 		sd size
 		if rampindex<^0x80    #disp8 is signed
 			setcall modrm formmodrm((disp8),0,(ebxregnumber))
--- ocompiler-1.orig/src/files/functions/stack/stack_inits.s
+++ ocompiler-1/src/files/functions/stack/stack_inits.s
@@ -34,7 +34,7 @@ function expandbit(sd pointer)
 endfunction
 function expandbit_wrap(sd pointer)
 	vdata ptr_nobits_virtual%ptr_nobits_virtual
-	if ptr_nobits_virtual#==(Yes)
+	if ptr_nobits_virtual#=(Yes)
 		sd bit
 		setcall bit data_get_maskbit(pointer,(expandbit))
 		return bit
@@ -58,7 +58,7 @@ function stack_get_relative(sd location)
 	add mask (maskoffset)
 	set mask mask#
 	and mask (stackrelativebit)
-	if mask==0
+	if mask=0
 		return (ebxregnumber)
 	endif
 	return (ebpregnumber)
--- ocompiler-1.orig/src/files/functions/values/numbersandconstants.s
+++ ocompiler-1/src/files/functions/values/numbersandconstants.s
@@ -33,7 +33,7 @@ Function memtoint(str content,data size,
 		Char byte#1
 		Set byte content#
 		SetCall bool numeric(byte)
-		If bool==(FALSE)
+		If bool=(FALSE)
 			Return (FALSE)
 		EndIf
 		Sub byte (asciizero)
@@ -43,7 +43,7 @@ Function memtoint(str content,data size,
 		const bil_2=2*bil_1
 		const max_int=0x80*0x100*0x100*0x100
 		const max_int_bil_2_rest=max_int-bil_2
-		if multx==(bil_1)
+		if multx=(bil_1)
 			if size!=0
 				#(...)x xxx xxx xxx
 				while size!=0
@@ -56,12 +56,12 @@ Function memtoint(str content,data size,
 			if number>2
 				#3 xxx xxx xxx-9 xxx xxx xxx
 				return (FALSE)
-			elseif number==2
+			elseif number=2
 				if value>(max_int_bil_2_rest)
 					#2 147 483 649-2 999 999 999
 					return (FALSE)
-				elseif value==(max_int_bil_2_rest)
-					if minusbool==(FALSE)
+				elseif value=(max_int_bil_2_rest)
+					if minusbool=(FALSE)
 						#2 147 483 648 is the first positive overflow
 						return (FALSE)
 					endif
@@ -139,7 +139,7 @@ Function memtohex(str content,data size,
 
 	Set multp initialmultp
 	SetCall bool stratmem(pc,ps,"0X")
-	If bool==false
+	If bool=false
 		Return false
 	EndIf
 	Add content size
@@ -148,7 +148,7 @@ Function memtohex(str content,data size,
 		Dec size
 		Set byte content#
 		SetCall nr hexnr(byte)
-		If nr==(nothex_value)
+		If nr=(nothex_value)
 			Return false
 		EndIf
 		Mult nr multp
@@ -164,10 +164,10 @@ EndFunction
 function numbertoint(vstrx content,datax size,datax outval,datax minusbool)
 	Data bool#1
 	#test to see if the ! sign is present
-	if content#==(asciiexclamationmark)
+	if content#=(asciiexclamationmark)
 		sd err
 
-		if size==1
+		if size=1
 			#the current data cursor
 			setcall outval# get_img_vdata_dataReg()
 
@@ -179,13 +179,13 @@ function numbertoint(vstrx content,datax
 		inc content
 		charx against#1
 		set against content#
-		if against==(asciiexclamationmark)
-			if size==2
+		if against=(asciiexclamationmark)
+			if size=2
 				#the current virtual data cursor
 				#main.ptr_nobits_virtual not yet at ocompiler, we have WinMain/main or (NULL)
 				vdata ptr_nobits_virtual%ptr_nobits_virtual
-				if ptr_nobits_virtual#==(No)
-					if p_parses#==(pass_init)
+				if ptr_nobits_virtual#=(No)
+					if p_parses#=(pass_init)
 						return "At the moment, !! is not implemented here."
 					endif
 				endif
@@ -197,11 +197,11 @@ function numbertoint(vstrx content,datax
 			inc content
 			sub size 2
 
-			if p_parses#==(pass_init)
+			if p_parses#=(pass_init)
 				return "At the moment, !!func is not implemented here."  #after pass_init is the calloc for scopes
 			endif
 			setcall err xfile_add_char_if((Xfile_numbers_type_fsizeX))  #next in get_scope_pos
-			if err==(noerror)
+			if err=(noerror)
 				setcall err get_sizeoffunction(content,size,outval,(TRUE))
 			endif
 			return err
@@ -210,7 +210,7 @@ function numbertoint(vstrx content,datax
 		dec size
 		sd dot_offset;setcall dot_offset valinmem(content,size,(asciidot))
 		if dot_offset!=size
-			if p_parses#==(pass_init)
+			if p_parses#=(pass_init)
 				return "At the moment, !a.b or !a.b! are not implemented here."  #after pass_init is the calloc for scopes
 			endif
 			#suffixed,casted, nobody is stopping them (casted will not reach here, will be xor)
@@ -220,16 +220,16 @@ function numbertoint(vstrx content,datax
 			if pointer#!=(asciiexclamationmark)
 				#size of variable
 				setcall err xfile_add_char_if((Xfile_numbers_type_sizeVar))
-				if err==(noerror)
+				if err=(noerror)
 					setcall err getarg_dot_any(content,size,dot_offset,#data,#low,#sufix)
-					if err==(noerror)
+					if err=(noerror)
 						if low!=0
 							set outval# (bsz)
 						else
 							set outval# (dwsz)
 							sd test;setcall test stackbit(data)
-							if test==0
-								if sufix==(sufix_false)
+							if test=0
+								if sufix=(sufix_false)
 									setcall test datapointbit(data)
 									if test!=0
 										set outval# (qwsz)
@@ -241,7 +241,7 @@ function numbertoint(vstrx content,datax
 									endif
 								endelse
 							else
-								if sufix==(sufix_false)
+								if sufix=(sufix_false)
 									setcall outval# stack64_enlarge(outval#)
 								else
 									setcall test pointbit(data) #it has 64 check
@@ -252,10 +252,10 @@ function numbertoint(vstrx content,datax
 							endelse
 						endelse
 
-						if sufix==(sufix_false)
+						if sufix=(sufix_false)
 							add data (maskoffset_reserve)
 							sd shortvalue;setcall shortvalue s_to_i(data)
-							if shortvalue==0
+							if shortvalue=0
 								return "Great reserve size is not implemented yet."
 							endif
 							mult outval# shortvalue
@@ -267,9 +267,9 @@ function numbertoint(vstrx content,datax
 				dec size
 
 				setcall err xfile_add_char_if((Xfile_numbers_type_offsetVar))  #next in get_scope_pos
-				if err==(noerror)
+				if err=(noerror)
 					setcall err getarg_base(content,size,dot_offset,#data,#low,#sufix,outval)
-					if err==(noerror)
+					if err=(noerror)
 						if sufix!=(sufix_false)
 							return "Not using offset of suffix."
 						endif
@@ -279,21 +279,21 @@ function numbertoint(vstrx content,datax
 				endif
 			endelse
 		else
-			if p_parses#==(pass_init)
+			if p_parses#=(pass_init)
 				return "At the moment, !func is not implemented here."  #after pass_init is the calloc for scopes
 			endif
 			setcall err xfile_add_char_if((Xfile_numbers_type_fsize))  #next in get_scope_pos
-			if err==(noerror)
+			if err=(noerror)
 				setcall err get_sizeoffunction(content,size,outval,(FALSE))
 			endif
 		endelse
 		return err
 	#test for : sign (the size of a stack value, 4B on 32-bits, 8B on 64-bits)
 	char int_size=asciicolon
-	elseif content#==int_size
+	elseif content#=int_size
 		if size!=1;return "The text after the size of an integer sign isn't recognized.";endif
 		sd b;setcall b is_for_64()
-		if b==(FALSE);set outval# (dwsz)
+		if b=(FALSE);set outval# (dwsz)
 		else;set outval# (qwsz);endelse
 
 		setcall err xfile_add_char_ifif((Xfile_numbers_type_ilong))
@@ -301,9 +301,9 @@ function numbertoint(vstrx content,datax
 	endelseif
 	#decimal or hex number
 	SetCall bool memtoint(content,size,outval,minusbool)
-	If bool==0
+	If bool=0
 		SetCall bool memtohex(content,size,outval)
-		If bool==0
+		If bool=0
 			Char _intvalerr="Integer(dec/hex) value not recognized."
 			Str intvallerr^_intvalerr
 			Return intvallerr
@@ -321,7 +321,7 @@ function get_sizeoffunction(sd content,s
 	sd err
 	sd pos
 	setcall err get_scope_pos(content,size,#pos)
-	if err==(noerror)
+	if err=(noerror)
 		setcall outval# get_scope_data_size(pos,is_expand)
 	endif
 	return err
@@ -330,7 +330,7 @@ endfunction
 #err pointer
 Function numbersconstants(str content,data size,data outval)
 	Str intconsterr="Integer(dec/hex) or constant value expected."
-	If size==0
+	If size=0
 		Return intconsterr
 	EndIf
 
@@ -338,21 +338,21 @@ Function numbersconstants(str content,da
 
 	char not=not_number
 	sd notbool=FALSE
-	if content#==not
+	if content#=not
 		set notbool (TRUE)
 		inc content
 		dec size
-		If size==0
+		If size=0
 			Return intconsterr
 		EndIf
 		or xprefixes (Xfile_numbers_prefix_not)
 	endif
 	sd minusbool=FALSE
-	if content#==(asciiminus)
+	if content#=(asciiminus)
 		set minusbool (TRUE)
 		inc content
 		dec size
-		If size==0
+		If size=0
 			Return intconsterr
 		EndIf
 		or xprefixes (Xfile_numbers_prefix_neg)
@@ -360,16 +360,16 @@ Function numbersconstants(str content,da
 
 	sd err
 	setcall err xfile_add_char_ifif(xprefixes)
-	if err==(noerror)
+	if err=(noerror)
 		sd bool
 		setcall bool is_variable_char_not_numeric(content#)
-		If bool==(FALSE)
+		If bool=(FALSE)
 			setcall err numbertoint(content,size,outval,minusbool)
 		Else
 			Data constr%%ptr_constants
 			Data pointer#1
 			SetCall pointer vars(content,size,constr)
-			If pointer==0
+			If pointer=0
 				Char unconst="Undefined constant name."
 				Str ptruncost^unconst
 				Return ptruncost
@@ -378,11 +378,11 @@ Function numbersconstants(str content,da
 
 			setcall err xfile_add_base_ifif((Xfile_numbers_type_tconstant),content,size)
 		EndElse
-		if err==(noerror)
-			if notbool==(TRUE)
+		if err=(noerror)
+			if notbool=(TRUE)
 				not outval#
 			endif
-			if minusbool==(TRUE)
+			if minusbool=(TRUE)
 				mult outval# -1
 			endif
 		endif
@@ -404,26 +404,26 @@ function parenthesis_size(ss content,sd
 	set last content
 	add last size
 	while content!=last
-		if content#==(asciidoublequote)
+		if content#=(asciidoublequote)
 			sd er
 			setcall er quotes_forward(#content,last,0)
 			if er!=(noerror)
 				return er
 			endif
 		endif
-		if content==last
+		if content=last
 			return closeerr
 		endif
 		Char fnbegin=asciiparenthesisstart
 		Char fnend=asciiparenthesisend
-		if content#==fnend
+		if content#=fnend
 			dec opens
-			if opens==z
+			if opens=z
 				sub content mark
 				set ptr_sz# content
 				return noerr
 			endif
-		elseif content#==fnbegin
+		elseif content#=fnbegin
 			inc opens
 		endelseif
 		inc content
--- ocompiler-1.orig/src/files/functions/values/operations.s
+++ ocompiler-1/src/files/functions/values/operations.s
@@ -25,11 +25,11 @@ function const_security(sd item)
 	if item#>=maximum     ##don't use unsigned ^ comparation, item# is already positive, will be extra code in source
 	#                            , at this commit time was not a technical/extra problem in compilation
 		sd p%p_over_pref
-		if p#==(TRUE)
+		if p#=(TRUE)
 			vstr err="Overflow at constants."
 			call Message(err)
 			sd w%p_w_as_e
-			if w#==(TRUE)
+			if w#=(TRUE)
 				return err
 			endif
 		endif
@@ -74,7 +74,7 @@ Function operation(ss content,sd size,sd
 	else
 		inc content;sub size 2
 		setcall errptr xfile_add_char_ifif((Xfile_numbers_parenthesis_open))
-		if errptr==(noerror)
+		if errptr=(noerror)
 			setcall errptr parseoperations_base(#content,#size,size,ptrnewitem,(FALSE),(Xfile_numbers_parenthesis_close))
 		endif
 	endelse
@@ -89,38 +89,38 @@ function operation_core(sd inoutvalue,sd
 	sd errptr
 	sd currentitem
 	Set currentitem inoutvalue#
-	If number==(addNumber)
+	If number=(addNumber)
 		Add currentitem newitem
-	ElseIf number==(subNumber)
+	ElseIf number=(subNumber)
 		Sub currentitem newitem
-	ElseIf number==(mulNumber)
+	ElseIf number=(mulNumber)
 		Mult currentitem newitem
-	ElseIf number==(divNumber)
+	ElseIf number=(divNumber)
 		Data zero=0
-		If newitem==zero
+		If newitem=zero
 			Char zerodiv="Division by 0 error."
 			Str ptrzerodiv^zerodiv
 			Return ptrzerodiv
 		EndIf
 		Div currentitem newitem
-	ElseIf number==(andNumber)
+	ElseIf number=(andNumber)
 		And currentitem newitem
-	ElseIf number==(orNumber)
+	ElseIf number=(orNumber)
 		Or currentitem newitem
-	ElseIf number==(xorNumber)
+	ElseIf number=(xorNumber)
 		Xor currentitem newitem
-	ElseIf number==(powNumber)
+	ElseIf number=(powNumber)
 		if newitem<0
-			if currentitem==0
+			if currentitem=0
 				#is 1/(0 power n)
 				Return ptrzerodiv
-			elseif currentitem==1
+			elseif currentitem=1
 				#is 1/(1 power n)
 			else
 				#is 1/(>1)
 				set currentitem 0
 			endelse
-		elseif newitem==0
+		elseif newitem=0
 			set currentitem 1
 		else
 			SetCall errptr const_security(#newitem)
@@ -131,12 +131,12 @@ function operation_core(sd inoutvalue,sd
 				dec newitem
 			endwhile
 		endelse
-	ElseIf number==(remNumber)
-		If newitem==zero
+	ElseIf number=(remNumber)
+		If newitem=zero
 			Return ptrzerodiv
 		EndIf
 		Rem currentitem newitem
-	ElseIf number==(shlNumber)
+	ElseIf number=(shlNumber)
 		if newitem<0
 			neg newitem
 			SetCall errptr shift_right(#currentitem,newitem)
@@ -144,7 +144,7 @@ function operation_core(sd inoutvalue,sd
 			SetCall errptr shift_left(#currentitem,newitem)
 		endelse
 		If errptr!=(noerror);return errptr;endif
-	ElseIf number==(sarNumber)
+	ElseIf number=(sarNumber)
 		if newitem<0
 			neg newitem
 			SetCall errptr shift_left(#currentitem,newitem)
@@ -152,7 +152,7 @@ function operation_core(sd inoutvalue,sd
 			SetCall errptr shift_right(#currentitem,newitem)
 		endelse
 		If errptr!=(noerror);return errptr;endif
-	ElseIf number==(lessNumber)
+	ElseIf number=(lessNumber)
 		if currentitem<newitem
 			set currentitem (TRUE)
 		else
@@ -176,17 +176,17 @@ Function signop(char byte,sv outval)
 	Data false=FALSE
 	Data true=TRUE
 
-	If byte==(addNumber)
-	ElseIf byte==(subNumber)
-	ElseIf byte==(mulNumber)
-	ElseIf byte==(divNumber)
-	ElseIf byte==(andNumber)
-	ElseIf byte==(orNumber)
-	ElseIf byte==(xorNumber)
-	ElseIf byte==(powNumber)
-	ElseIf byte==(remNumber)
-	ElseIf byte==(lessNumber)
-	ElseIf byte==(greaterNumber)
+	If byte=(addNumber)
+	ElseIf byte=(subNumber)
+	ElseIf byte=(mulNumber)
+	ElseIf byte=(divNumber)
+	ElseIf byte=(andNumber)
+	ElseIf byte=(orNumber)
+	ElseIf byte=(xorNumber)
+	ElseIf byte=(powNumber)
+	ElseIf byte=(remNumber)
+	ElseIf byte=(lessNumber)
+	ElseIf byte=(greaterNumber)
 	Else
 		return false
 	EndElse
@@ -198,7 +198,7 @@ EndFunction
 Function oneoperation(sd ptrcontent,ss initial,ss content,sd val,sd op)
 	sd errptr
 
-	if op==(unreadyNumber)
+	if op=(unreadyNumber)
 		set op (addNumber)
 	else
 		setcall errptr xfile_add_char_ifif(op)
@@ -222,14 +222,14 @@ EndFunction
 function operation_test(sv ptrcontent,sd initial,sd content,sd end,sd ptrval,sd pnumber,sd pnr,sd pbool)
 	if initial!=content ##to ignore -n
 		ss test;set test content;dec test
-		if test#==(not_number) #to ignore ~-n
-			if initial==test ##if not this, a~-b will anyway stop at a~, but this test is logic
+		if test#=(not_number) #to ignore ~-n
+			if initial=test ##if not this, a~-b will anyway stop at a~, but this test is logic
 				return (noerror)
 			endif
 		endif
 		sd err
 		SetCall err oneoperation(ptrcontent,initial,content,ptrval,pnumber#)
-		If err==(noerror)
+		If err=(noerror)
 			call doubleoperation(pnr,#content,end)
 			set pnumber# pnr#
 			Set pbool# (TRUE)
@@ -274,12 +274,12 @@ Function parseoperations_base(sd ptrcont
 	#<end?maybe unsigned cursor
 	While content!=end
 		SetCall find signop(content#,pnr)
-		if find==true
+		if find=true
 			setcall errptr operation_test(ptrcontent,initial,content,end,ptrval,#number,pnr,#bool)
 			if errptr!=noerr
 				return errptr
 			endif
-		elseif content#==(asciiparenthesisstart)
+		elseif content#=(asciiparenthesisstart)
 			inc content
 			sd rest_sz;set rest_sz end;sub rest_sz content
 			sd insz
@@ -289,7 +289,7 @@ Function parseoperations_base(sd ptrcont
 		endelseif
 
 		Inc content
-		If bool==true
+		If bool=true
 			setcall content mem_spaces(content,end)
 			Set initial content
 			Set bool false
@@ -297,7 +297,7 @@ Function parseoperations_base(sd ptrcont
 	EndWhile
 
 	#allow line end comment
-	if comments==(TRUE)
+	if comments=(TRUE)
 		sd szz
 		set szz end;sub szz initial
 		sd size
@@ -312,7 +312,7 @@ Function parseoperations_base(sd ptrcont
 	EndIf
 	Set outvalue# val
 
-	if comments==(TRUE)
+	if comments=(TRUE)
 		sub sz szz
 	endif
 	Call advancecursors(ptrcontent,ptrsize,sz)
@@ -330,18 +330,18 @@ function doubleoperation(ss pnr,sv pcont
 	endif
 	ss content;set content pcontent#
 	inc content
-	if content==end
+	if content=end
 		ret  #error is catched how was before
 	endif
-	if content#==(lessNumber)
-		if nr==(lessNumber)
+	if content#=(lessNumber)
+		if nr=(lessNumber)
 			set pnr# (shlNumber)
 			inc pcontent#
 			ret
 		endif
 	endif
-	if content#==(greaterNumber)
-		if nr==(greaterNumber)
+	if content#=(greaterNumber)
+		if nr=(greaterNumber)
 			set pnr# (sarNumber)
 			inc pcontent#
 		endif
--- ocompiler-1.orig/src/files/functions/xfile.s
+++ ocompiler-1/src/files/functions/xfile.s
@@ -29,7 +29,7 @@ function xfile_add_char_if(sd type)
 	return (noerror)
 endfunction
 function xfile_add_char_ifif(sd type)
-	if main.parses==(pass_write)
+	if main.parses=(pass_write)
 		sd err;setcall err xfile_add_char_if(type)
 		return err
 	endif
@@ -37,7 +37,7 @@ function xfile_add_char_ifif(sd type)
 endfunction
 function xfile_add_string(sd text,sd size)
 	sd err;setcall err writefile_errversion(main.xfile,#size,(Xfile_sz_int))
-	if err==(noerror)
+	if err=(noerror)
 		setcall err writefile_errversion(main.xfile,text,size)
 	endif
 	return err
@@ -52,7 +52,7 @@ function xfile_add_string_if(sd text,sd
 endfunction
 function xfile_add_base(sd type,sd text,sd size)
 	sd err;setcall err writefile_errversion(main.xfile,#type,(Xfile_sz_char))
-	if err==(noerror)
+	if err=(noerror)
 		setcall err xfile_add_string(text,size)
 	endif
 	return err
@@ -65,7 +65,7 @@ function xfile_add_base_if(sd type,sd te
 	return (noerror)
 endfunction
 function xfile_add_base_ifif(sd type,sd text,sd size)
-	if main.parses==(pass_write)
+	if main.parses=(pass_write)
 		sd err;setcall err xfile_add_base_if(type,text,size)
 		return err
 	endif
@@ -77,7 +77,7 @@ function xfile_add_base_area_if(sd type,
 	return e
 endfunction
 function xfile_add_comment_ifif(sd start,sd end)
-	if main.parses==(pass_write)
+	if main.parses=(pass_write)
 		inc start ##one for commentascii
 		sd e;setcall e xfile_add_base_area_if((Xfile_comment),start,end)
 		return e
@@ -85,7 +85,7 @@ function xfile_add_comment_ifif(sd start
 	return (noerror)
 endfunction
 function xfile_add_comment_multi_ifif(sd start,sd end)
-	if main.parses==(pass_write)
+	if main.parses=(pass_write)
 		add start 2 #one for commentascii and one for asciiexclamationmark
 		sd e;setcall e xfile_add_base_area_if((Xfile_multicomment),start,end)
 		return e
--- ocompiler-1.orig/src/files/functions/xfile_details.s
+++ ocompiler-1/src/files/functions/xfile_details.s
@@ -3,28 +3,28 @@
 function xfile_add_declare_if(sd decltype,sd is_stack,sd is_expand,ss content,sd size,sd sign,sd reloc,sd relocx)
 	if main.xfile!=(openno)
 		sd err
-		if decltype==(Xfile_decltype_const)
+		if decltype=(Xfile_decltype_const)
 			setcall err xfile_add_char((Xfile_declfield_const))
 		else
-			if is_stack==(TRUE)
+			if is_stack=(TRUE)
 				setcall err xfile_add_char((Xfile_declfield_stack))
 			else
 				setcall err xfile_add_char((Xfile_declfield_data))
-				if err==(noerror)
-					if is_expand==(TRUE)
+				if err=(noerror)
+					if is_expand=(TRUE)
 						setcall err xfile_add_char((Xfile_declfield_data_expand))
 					else
 						setcall err xfile_add_char((Xfile_declfield_data_concrete))
 					endelse
 				endif
 			endelse
-			if err==(noerror)
+			if err=(noerror)
 				setcall err xfile_add_char(decltype)
-				if err==(noerror)
-					if content#==(throwlesssign)
+				if err=(noerror)
+					if content#=(throwlesssign)
 						setcall err xfile_add_char((Xfile_declfeature_throwless))
 						call stepcursors(#content,#size)
-					elseif content#==(unrefsign)
+					elseif content#=(unrefsign)
 						setcall err xfile_add_char((Xfile_declfeature_unref))
 						call stepcursors(#content,#size)
 					else
@@ -33,21 +33,21 @@ function xfile_add_declare_if(sd decltyp
 				endif
 			endif
 		endelse
-		if err==(noerror)
+		if err=(noerror)
 			setcall err xfile_add_string(content,size)
 			if sign!=(sign_not_required)
-				if err==(noerror)
-					if sign==(assignsign)
-						if reloc==(FALSE)
+				if err=(noerror)
+					if sign=(assignsign)
+						if reloc=(FALSE)
 							setcall err xfile_add_char((Xfile_declsign_equal))
-						elseif relocx==(FALSE)
+						elseif relocx=(FALSE)
 							setcall err xfile_add_char((Xfile_declsign_reloc))
 						else
 							setcall err xfile_add_char((Xfile_declsign_relocx))
 						endelse
-					elseif sign==(reservesign)
+					elseif sign=(reservesign)
 						setcall err xfile_add_char((Xfile_declsign_reserve))
-					elseif sign==(pointersigndeclare)
+					elseif sign=(pointersigndeclare)
 						setcall err xfile_add_char((Xfile_declsign_pointer))
 					else
 					#if sign==(nosign) reserve
@@ -66,11 +66,11 @@ function xfile_add_fndef_if(sd content,s
 	if main.xfile!=(openno)
 		sd err
 		setcall err xfile_add_base((Xfile_functiondef),content,sz)
-		if err==(noerror)
+		if err=(noerror)
 			setcall err xfile_add_char(fn)
-			if err==(noerror)
+			if err=(noerror)
 				if x_or_not_x!=(Xfile_function_not_x)
-					if varargs==0
+					if varargs=0
 						setcall err xfile_add_char((Xfile_function_e_normal))
 					else
 						setcall err xfile_add_char((Xfile_function_e_varargs))
@@ -87,10 +87,10 @@ endfunction
 function xfile_add_varsufix_if(sd content,sd size,sd sufix,sd cast)
 	if main.xfile!=(openno)
 		sd err;setcall err xfile_add_string(content,size)
-		if err==(noerror)
+		if err=(noerror)
 			setcall err xfile_add_char(sufix)
-			if sufix==(Xfile_suffix_true)
-				if err==(noerror)
+			if sufix=(Xfile_suffix_true)
+				if err=(noerror)
 					setcall err xfile_add_char(cast)
 				endif
 			endif
@@ -106,7 +106,7 @@ function xfile_prepare_commas_if()
 	if main.xfile!=(openno)
 		sd err
 		setcall main.xf_pos seekfile(main.xfile,0,(SEEK_CUR),#err)
-		if main.xf_pos==-1
+		if main.xf_pos=-1
 			return err
 		endif
 		set main.xf_commas 0
@@ -123,21 +123,21 @@ function xfile_add_commas_if()
 	if main.xfile!=(openno)
 		sd err
 		sd off;setcall off seekfile(main.xfile,0,(SEEK_CUR),#err)
-		if off==-1;return err;endif
+		if off=-1;return err;endif
 		sub off main.xf_pos
 		sd mem
 		setcall err mem_alloc(off,#mem)
-		if err==(noerror)
+		if err=(noerror)
 			sd sz
 			setcall sz seekfile(main.xfile,main.xf_pos,(SEEK_SET),#err)
 			if sz!=-1
 				setcall err readfile(main.xfile,mem,off)
-				if err==(noerror)
+				if err=(noerror)
 					setcall sz seekfile(main.xfile,main.xf_pos,(SEEK_SET),#err)
 					if sz!=-1
 						call lseek(main.xfile,0,(SEEK_CUR))
 						setcall err xfile_add_int(main.xf_commas)
-						if err==(noerror)
+						if err=(noerror)
 							call lseek(main.xfile,0,(SEEK_CUR))
 							setcall err writefile_errversion(main.xfile,mem,off)
 							call lseek(main.xfile,0,(SEEK_CUR))
@@ -157,7 +157,7 @@ function xfile_add_commas_interncall_if(
 		sd p;setcall p nr_of_args_64need_p_get();set p# 0
 		sd err
 		SetCall err enumcommas(#content,#size,sz,(FALSE),(pass_calls)) #there are 6 more arguments but are not used
-		if err==(noerror)
+		if err=(noerror)
 			setcall err xfile_add_int(p#)
 		endif
 		return err
@@ -170,12 +170,12 @@ function xfile_add_call_if(sd content,sd
 	if main.xfile!=(openno)
 		sd err
 		setcall subtype callx_flag(subtype)  #this is tested if 64 in the normal place
-		if subtype==0
+		if subtype=0
 			setcall err xfile_add_char((Xfile_arg_call_normal)) #not forced extern
 		else
 			setcall err xfile_add_char((Xfile_arg_call_extern)) #forced extern
 		endelse
-		if err==(noerror)
+		if err=(noerror)
 			setcall err xfile_add_string(content,size)
 		endif
 		return err
@@ -183,25 +183,36 @@ function xfile_add_call_if(sd content,sd
 	return (noerror)
 endfunction
 #err
-function xfile_add_callret_if(sd subtype)
-#this can go also with primsec with a test against CALL_primsec, add that flag at getcommand, but still there is a wrong cosmetic at subtype_test=0 and not subtype_test=CALL_primsec in a case
-	if main.xfile!=(openno)
+function xfile_add_callret(sd action,sd subtype)
+	sd err
+
+	setcall err xfile_add_char(action)
+	if err=(noerror)
+		#this can go also with primsec with a test against CALL_primsec, add that flag at getcommand, but still there is a wrong cosmetic at subtype_test=0 and not subtype_test=CALL_primsec in a case
 		setcall subtype callret_flag(subtype)
-		sd err
-		if subtype==0
+		if subtype=0
 			setcall err xfile_add_char((Xfile_call_normal))
 		else
 			setcall err xfile_add_char((Xfile_call_ret))
 		endelse
+	endif
+
+	return err
+endfunction
+#err
+function xfile_add_callret_if(sd action,sd subtype)
+	if main.xfile!=(openno)
+		sd err
+		setcall err xfile_add_callret(action,subtype)
 		return err
 	endif
 	return (noerror)
 endfunction
 #err
-function xfile_add_callret_ifif(sd subtype)
-	if main.parses==(pass_write)
+function xfile_add_callret_ifif(sd action,sd subtype)
+	if main.parses=(pass_write)
 		sd err
-		setcall err xfile_add_callret_if(subtype)
+		setcall err xfile_add_callret_if(action,subtype)
 		return err
 	endif
 	return (noerror)
--- ocompiler-1.orig/src/files/headers/cond.h
+++ ocompiler-1/src/files/headers/cond.h
@@ -1,21 +1,9 @@
 
 
 Const ifinscribe=-1
-Const ifnumber=0
-Const elsenumber=1
-Const whilenumber=2
-Const breaknumber=3
-
-#Const condmiscs=whilenumber+1
-
-#Const elseifnumber=condmiscs+0
-
-#Const condends=elseifnumber+1
-
-#Const endifnumber=condends+ifnumber
-#Const endelsenumber=condends+elsenumber
-#Const endwhilenumber=condends+whilenumber
-
-#Const endelseifnumber=condends+elseifnumber
+Const ifnumber=Xfile_if
+Const elsenumber=Xfile_else
+Const whilenumber=Xfile_while
+Const breaknumber=Xfile_break
 
 Const nocondnumber=-1
--- ocompiler-1.orig/src/files/headers/xfile.h
+++ ocompiler-1/src/files/headers/xfile.h
@@ -5,6 +5,17 @@ const Xfile_functiondef=2
 const Xfile_declare=3
 const Xfile_action=4
 const Xfile_action2=5
+const Xfile_call=6
+const Xfile_callex=7
+#
+#Const ifinscribe=-1
+#Const nocondnumber=-1
+const Xfile_if=8
+const Xfile_else=9
+const Xfile_while=10
+const Xfile_break=11
+const Xfile_continue=12
+const Xfile_condend=13
 
 #t from type
 const Xfile_function_tintern=0
@@ -129,3 +140,14 @@ const Xfile_action2_xor=8
 
 const Xfile_call_normal=0
 const Xfile_call_ret=1
+
+const Xfile_cond_equal=0x85
+const Xfile_cond_notequal=0x84
+const Xfile_cond_lessequalunsign=0x87
+const Xfile_cond_greatequalunsign=0x82
+const Xfile_cond_lessequal=0x8F
+const Xfile_cond_greatequal=0x8C
+const Xfile_cond_lessunsign=0x83
+const Xfile_cond_greatunsign=0x86
+const Xfile_cond_less=0x8D
+const Xfile_cond_great=0x8E
--- ocompiler-1.orig/src/files/inits/inits.s
+++ ocompiler-1/src/files/inits/inits.s
@@ -71,7 +71,7 @@ setcall convention_64 p_neg_is_for_64()
 #setcall init_argmasks argmasks()
 #set init_argmasks# 0
 
-if includedir==(TRUE)
+if includedir=(TRUE)
 	set fileendchar (log_fileend)
 else
 	set fileendchar (log_fileend_old)
--- ocompiler-1.orig/src/linux/files/prefextra.s
+++ ocompiler-1/src/linux/files/prefextra.s
@@ -25,14 +25,14 @@ function prefextra_helper(ss prefpath,sd
 		sd s1;sd s3=2
 		setcall s1 strlen(envhome);add s3 s1;add s3 s2
 		setcall err memoryalloc(s3,#mem)
-		if err==(noerror)
+		if err=(noerror)
 			call memtomem(mem,envhome,s1)
 			ss p;set p mem;add p s1;set p# (asciislash);inc p
 			call memtomem(p,prefpath,s2);add p s2;set p# (NULL)
 			setcall a access(mem,(F_OK))
-			if a==0
+			if a=0
 				SetCall err file_get_content_ofs(mem,ptrpreferencessize,ptrpreferencescontent,(NULL))
-				if err==(noerror)
+				if err=(noerror)
 					call free(mem)
 					return (noerror)
 				endif
@@ -55,14 +55,14 @@ function prefextra_helper(ss prefpath,sd
 		add test size
 		sub test etchelper
 		sd cmp;setcall cmp memcmp(etc_helper,test,etchelper) #an example when testing from src folder, is not usr/bin/o / bin/o
-		if cmp==0
+		if cmp=0
 			sub size etchelper
 			sd sz=3+1+1
 			sd allsize;set allsize size
 			add allsize sz
 			add allsize s2
 			setcall err memoryalloc(allsize,#mem)
-			if err==(noerror)
+			if err=(noerror)
 				call memtomem(mem,scrpath,size)
 				set scrpath mem
 				add scrpath size
@@ -72,9 +72,9 @@ function prefextra_helper(ss prefpath,sd
 				add scrpath s2
 				set scrpath# (NULL)
 				setcall a access(mem,(F_OK))
-				if a==0
+				if a=0
 					SetCall err file_get_content_ofs(mem,ptrpreferencessize,ptrpreferencescontent,(NULL)) #openfile has alloc err msg
-					if err==(noerror)
+					if err=(noerror)
 						call free(mem)
 						return (noerror)
 					endif
--- ocompiler-1.orig/src/linux/files/xgetfile.s
+++ ocompiler-1/src/linux/files/xgetfile.s
@@ -30,7 +30,7 @@ else
 	str pathstr="PATH"
 	set scriptfullname null
 	setcall envpath getenv(pathstr)
-	if envpath==null
+	if envpath=null
 		str enverr="Getenv error on PATH."
 		call Message(enverr)
 	else
@@ -49,7 +49,7 @@ else
 			add sizetocreate argumentssize
 			inc sizetocreate
 			setcall scriptfullname memalloc(sizetocreate)
-			if scriptfullname==null
+			if scriptfullname=null
 				set sizeofpath zero
 			else
 				#do not work on null PATH parts
@@ -74,7 +74,7 @@ else
 					data runaccess=X_OK
 					setcall accessresult access(scriptfullname,runaccess)
 				endif
-				if accessresult==zero
+				if accessresult=zero
 					#continue with this path to preferences
 					set sizeofpath zero
 				else
@@ -82,7 +82,7 @@ else
 					set scriptfullname null
 					add envpath sizeoffolder
 					sub sizeofpath sizeoffolder
-					if envpath#==pathdelim
+					if envpath#=pathdelim
 						inc envpath
 						dec sizeofpath
 					endif
@@ -92,7 +92,7 @@ else
 	endelse
 endelse
 
-if scriptfullname==null
+if scriptfullname=null
 	str patherr="Pathfind error."
 	call Message(patherr)
 else
--- /dev/null
+++ ocompiler-1/src/obj.txt
@@ -0,0 +1,4177 @@
+f0VMRgEBAQAAAAAAAAAAAAEAAwABAAAAAAAAAAAAAAA0AAAAAAAAADQAIAAAACgABwAGAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAMAAAAAAAAAAAQAAOU7
+AAAAAAAAAAAAAAQAAAAAAAAABwAAAAEAAAAGAAAAAAAAAOU/AAAl/AEAAAAAAAAAAAAEAAAAAAAA
+AAIXAAACAAAAAAAAAAAAAAAKPAIAQBoAAAYAAAADAAAABAAAABAAAAAKFwAABAAAAAAAAAAAAAAA
+SlYCAFwWAAADAAAAAQAAAAQAAAAMAAAAFRcAAAQAAAAAAAAAAAAAAKZsAgAUHgEAAwAAAAIAAAAE
+AAAADAAAACAXAAADAAAAAAAAAAAAAAC6igMAKBcAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAKAAQAAAAAAAAAAAAAAAEAAAAAAAAAABAAAAEAAAACAAAABAAAAAgAAAAAAAAAAQAAAAIAAAAD
+AAAA/////wAAAAAuAAAAAABIAAAAAAAAAAAAAAAAAAAAWAAAADgBAAAAAAAAAAAAAAAJAAAAZAAA
+AAAAAABtAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAEQ7AABQOwAAeDoAAFw7AAB0OwAAaDsAAIA7AACEOgAAmDsAAA4AAAAA
+AAAAQQIAAAAAAAAAAAAAAAAAAPUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgEAAAAAAAAA
+AAAAAAAAAAAAAB4BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUUAEAAAACAA
+AAAAAAAAAAAAADAAAAAQAAAAAEAAABAAAAACAAABAAAAAAAAAAUAAQAAAAAAAEAAAAAAAAAAAAAA
+AwAAAAAAAQAAEAAAAAABAAAQAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALmRhdGEAAAAAEAAAABAA
+AAAQAAAAEAAAAAAAAAAAAAAAAAAAQAAAwC5jb2RlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAACAAAGAuaWRhdGEAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAABAAABAAAQAAH9FTEYB
+AQEAAAAAAAAAAAAAAAMAAQAAAAAAAAAAAAAAAAAAAAAAAAA0ACAAAAAoAAAAAABxBAAANAAAAIEE
+AACRBAAAnQQAAKEEAACjBAAAf0VMRgIBAQAAAAAAAAAAAAEAPgABAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAEAAAAAAAEAAAAAAAAAAAQAAAAAEAAAAhAQIAIQECAAAAAAAAAAABgAAAAAQ
+AAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAABAAAAMFAABAAAAAAwAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAABAAAAAEAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAQAAAAEAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAYAAAAAEAAASwUAAGAAAAAvbGliL2xkLWxpbnV4LnNvLjIAswUAAAAA
+AAAEAAAAAAAAAAYAAAAAAAAACwAAABAAAAAFAAAAAAAAAAoAAAAAAAAABwAAAAAAAAAIAAAAAAAA
+AAkAAAAMAAAAAAAAAAAAAABIAAAAAQAAAAAAAAAAAAAADAAAAAgAAAAAAAAAAAAAAAAAAABIT01F
+AEdldGVudiBlcnJvciBvbiBIT01FLgB1c3IvYmluL28AZXRjLwBObyBwcmVmZXJlbmNlcyBmaWxl
+IGZvdW5kIGluIGV0Yy4ATm8gcHJlZmVyZW5jZXMgZmlsZSBmb3VuZCBpbiBIT01FLiBUaGUgZmls
+ZSBpcyBoZXJlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vY29saW4taS9vL21h
+c3Rlci9vY29tcGlsZXIuY29uZgBtaXNzaW5nIHZhbHVlIGZvciBjb21tYW5kIGxpbmUgYXJndW1l
+bnQAAGEgY29tbWFuZCBsaW5lIHZhbHVlIGNhbiBoYXZlIG9ubHkgMCwxLDIgb3IgMwBjb21tYW5k
+IGxpbmUgdmFsdWUgbXVzdCBoYXZlIG9ubHkgb25lIGRpZ2l0AGNvbW1hbmQgbGluZSB2YWx1ZSBp
+cyBub3QgYSBudW1iZXIAY29tbWFuZCBsaW5lIHZhbHVlIG51bGwAY29tbWFuZCBsaW5lIGFyZ3Vt
+ZW50IG5vdCBmb3VuZAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1lbW9yeSBhbGxvY2F0aW9uIGVycm9y
+LgDvBwAAAAAAAG1hbGxvYyBlcnJvcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANQgAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAkQgAACVzJXMA5QAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAA
+ALYIAABDYW5ub3Qgb3BlbiBhIGZpbGU6AAAAAABDYW5ub3Qgd3JpdGUgZGF0YSB0byBhIGZpbGUu
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAA
+AAAAAFwvAQAAAAAAAAAAAAAAAAAAAAAAAABsc2VlayBlcnJvcgBGaWxlIHJlYWQgZXJyb3IuAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrCQAAAAAAAAAAAAAAAAAAAgAAAAAAAABGaWxlIGxl
+bmd0aCBmdW5jdGlvbiBlcnJvci4AAAAAAAAAAAAAAAAAAAAAAAAAAADlAAAAAAAAAAAAAAAAAAAA
+ABAAAEEgZmlsZSBwYXRoIHNpemUgaXMgZ3JlYXRlciB0aGFuIG1heGltdW0gbnVtYmVyLgALCgAA
+AAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAFgKAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAJw6AAAMAAAAgAoAAAAAAAABAAAADAAAAAYAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCgD1AAAA9QAAALkAAAC5AAAAAAAAAAAAAAAAJTA4
+eAAAAAAAuQAAALkAAACkOwAALgAAAAAAAAAA/QoAAAEAAAAAAAAAAAAAAAAAAAAAuQAAAAAAAAAA
+AAAAAAAAAAEAAAAAAAAAAAAAAC8LAAAzCwAAAAAAAAEAAAAAAAAALDsAAAAAAAA4OwAAAgEAAAAA
+AAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAFVuZGVmaW5lZCB2YXJpYWJsZSBuYW1lLgDfCwAAAAAAAPwLAAAAAAAA
+AQAAAAAAAAAAAAAAAgAAAENIQVIgc3RhdGVtZW50IGNhbm5vdCBoYXZlIHRoZSBwb2ludGVyIHN1
+Zml4LgAYDAAAAQAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAQAAAAAAAABhegAAAAAAAAAAzQwAAEhpZGRlbiB3aGl0ZXNwYWNlcyBhdCA6
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGDQAACg0AAAAAAAABAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAAAAAAAAAAA
+AAAAAAAAIgBkDQAAAAAAAAAAAAABAAAAAAAAAAAAAAB2DQAAeg0AAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAARXhwZWN0aW5nIHN0cmluZyBkZWxpbWl0ZWQgYnkgcXVvdGF0
+aW9ucyBhbmQgd2l0aCB0aGUgYmFja3NsYXNoIHRoZSBlc2NhcGUgY2hhcmFjdGVyLgCsDQAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAIiMOAABlbmQgc3RyaW5nICgiKSBleHBlY3RlZABcCgAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAACMA
+REFUQQBTVFIAQ0hBUgBTRABTUwBTVgBWREFUQQBWU1RSAFZBTFVFAERBVEFYAFNUUlgAQ0hBUlgA
+VkRBVEFYAFZTVFJYAFZBTFVFWABDT05TVABTRVQAQUREAFNVQgBNVUxUAERJVgBSRU0AQU5EAE9S
+AFhPUgBSRVRVUk4ASU5DU1QASU5DAERFQ1NUAERFQwBORUcATk9UAFNITABTSFIAU0FSAEVYSVQA
+Q0FMTFgAQ0FMTABJRgBFTkRJRgBFTFNFSUYARUxTRQBFTkRFTFNFSUYARU5ERUxTRQBXSElMRQBF
+TkRXSElMRQBCUkVBSwBDT05USU5VRQBJTVBPUlQASU1QT1JUWABGVU5DVElPTgBGVU5DVElPTlgA
+RU5UUllSQVcARU5UUlkARU5ERlVOQ1RJT04AUkVUAElOQ0xVREUARUlOQ0xVREUARk9STUFUAElN
+UE9SVEFGVEVSQ0FMTABBRlRFUkNBTEwAQUZURVJDQUxMQUNUSVZBVEUAQUZURVJDQUxMQ0xFQVIA
+T1JQSEFOAENBTExFWFgAQ0FMTEVYAE9WRVJSSURFAExJQlJBUlkASEVYAEkzAHkOAAAAAAAAAIsC
+UAAAAAB7DgAAEAAAAAAAAAABAAAAgA4AABAAAAAQAAAAAQAAAIQOAAAQAAAAIAAAAAEAAACJDgAA
+EAAAADAAAAABAAAAjA4AABAAAABAAAAAAQAAAI8OAAAQAAAAUAAAAAEAAACSDgAAEAAAAGAAAAAB
+AAAAmA4AABAAAABwAAAAAQAAAJ0OAAAQAAAAgAAAAAEAAACjDgAAEAAAAJAAAAABAAAAqQ4AABAA
+AACgAAAAAQAAAK4OAAAQAAAAsAAAAAEAAAC0DgAAEAAAAMAAAAABAAAAuw4AABAAAADQAAAAAQAA
+AMEOAAAQAAAA4AAAAAEAAADIDgAAEAAAAPAAAAABAAAAzg4AABABAAAAAAAAAQAAANIOAAAQAQAA
+EAAAAAEAAADWDgAAEAEAACAAAAABAAAA2g4AABABAAAwAAAAAQAAAN8OAAAQAQAAQAAAAAEAAADj
+DgAAEAEAAFAAAAABAAAA5w4AABABAABgAAAAAQAAAOsOAAAQAQAAcAAAAAEAAADuDgAAEAEAAIAA
+AAABAAAA8g4AAKABAAAAAAAAAQAAAPkOAACgAQAAEAAAAAEAAAD/DgAAoAEAACAAAAABAAAAAw8A
+AKABAAAwAAAAAQAAAAkPAACgAQAAQAAAAAEAAAANDwAAoAEAAFAAAAABAAAAEQ8AAKABAABgAAAA
+AQAAABUPAACgAQAAcAAAAAEAAAAZDwAAoAEAAIAAAAABAAAAHQ8AAKABAACQAAAAAQAAACEPAACg
+AQAAoAAAAAEAAAAmDwAAUAIAAAAAAEABAAAALA8AAFACAAAAAAAAAQAAADEPAABwAgAAAAAAAAEA
+AAA0DwAAcAIAABAAAAAAAAAAOg8AAHACAAAgAAAAAQAAAEEPAABwAgAAMAAAAAAAAABGDwAAcAIA
+AEAAAAAAAAAAUA8AAHACAABQAAAAAAAAAFgPAABwAgAAYAAAAAEAAABeDwAAcAIAAHAAAAAAAAAA
+Zw8AAHACAACAAAAAAAAAAG0PAABwAgAAkAAAAAAAAAB2DwAAEAMAAAAAAAABAAAAfQ8AABADAAAQ
+AAAAAQAAAIUPAAAwAwAAAAAAAAEAAACODwAAMAMAABAAAAABAAAAmA8AADADAAAgAAAAAQAAAKEP
+AAAwAwAAMAAAAAEAAACnDwAAcAMAANOJAroAAAAAsw8AAIADAAAAA9MBAAAAALcPAACQAwAAAAAA
+AAEAAAC/DwAAkAMAABAAAAABAAAAyA8AALADAAAAAAPTAQAAAM8PAADAAwAAAAAAAAEAAADfDwAA
+wAMAABAAAAABAAAA6Q8AAOADAAAAAAAAAAAAAPsPAADgAwAAEAAAAAAAAAAKEAAAAAQAAAAD04kB
+AAAAERAAABAEAAAAAABAAQAAABkQAAAQBAAAAAAAAAEAAAAgEAAAMAQAAAPTi8IBAAAAKRAAAEAE
+AADnAQAAAQAAADEQAABQBAAAAg+FcQEAAAA1EAAAYAQAAIsCULoAAAAAA9WLAlC6CAAAAAPTiwJQ
+uAAAAAD/0LoIAAAAA9OLAroYAAAAA9WJArokAAAAA9OLAroYAAAAA9UBAovjaAQAAAC6XwYAAIvC
+ULoYAAAAA9WLAlC4AAAAAP/QuAQAAAC6GAAAAAPVAQKL47oEAAAAA9OLAlC6DAAAAAPViwJQuhgA
+AAAD1YsCULgAAAAA/9C6BAAAAAPTiwK6GAAAAAPVAQKwALoYAAAAA9WLEogCi+NoAAAAALoIAAAA
+A9OLAlC4AAAAAP/QugwAAAAD04kCuAAAAAC6DAAAAAPTOQIPhWUAAACL42gAAAAAuhQAAAAD1YsC
+ULoQAAAAA9WLAlC6CAAAAAPTiwJQ6JIDAACL04kCuAAAAACL0zkCD4UcAAAAi+O6CAAAAAPTiwJQ
+uAAAAAD/0MfAAAAAAMlbw4vji9OLAlDo4gMAAIvjuggAAAAD04sCULgAAAAA/9DpBwAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAYAAIvCyVvDyVvDUwEAAAAEAAAAAAAAi+O6BABDQUxMADwWAABJ
+FgAAUkVUAFgAWABVbnJlY29nbml6ZWQgY29tbWFuZC9kZWNsYXJhdGlvbiBuYW1lLgBRFgAABAAA
+ADgQAACoFAAARwAAAEgQAADIFQAADwAAAFNlY3Rpb24gc2l6ZSBjYW5ub3QgYmUgZ3JlYXRlciB0
+aGFuIDIgMTQ3IDQ4MyA2NDcgKDB4N2ZGRmZmRkYpLgAAAAAAAAAAAAAAAAAAuhAAAAAD1egWAAAA
+AAAA1YsCuhAAAAAAAAAARDsAAFA7AACYOwAAhQAAAAEAAAAAAAAAAQAAAAAAAANNZW1vcnkgc3Bh
+Y2UgZXJyb3IuACAXAAAKAAAAuv0GAJUAAABbw7oQBAAAANWLEosCuggAUBcAAFA7AAC6CAAACgEA
+AAAAAAAAAAAAAAAAAOhsAQAAAAAAAAEAAAB4FwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6VRo
+ZSBkZWNsYXJhdGlvbnMgbXVzdCBjb250YWluIG9ubHkgYWxwaGFudW1lcmljLCB1bmRlcnNjb3Jl
+IGFuZCBhcm91bmQgY2hhcnMgYW5kIGNhbm5vdCBzdGFydCB3aXRoIGEgbnVtYmVyLgCaFwAAAAAA
+AO0AAABFAAAAExgAAAcAACgAAAAAAAAPtgAAAAAAAAA7wQ+PHC8YAAAlADA5AAAAAAEAAAAAAAAA
+AAAAAAAAAAAAAAAAJgcAAIvCyVvDulQHAACLwskAMDlBRmFmCgAAAAAAAAAAAAAAAAAAAAADAAAA
+7IvcgesYAAAAAAAAAQAAAAcAAABsGAAAcBgAAAAAAAAAAAAAAQKL47oBAAAAA9WLAjBYABAAAAAI
+AAAAGgEAAG0CAABBdCB0aGUgbW9tZW50LCAhISBpcyBub3QgaW1wbGVtZW50ZWQgaGVyZS4AQXQg
+dGhlIG1vbWVudCwgISFmdW5jIGlzIG5vdCBpbXBsZW1lbnRlZCBoZXJlLgBBdCB0aGUgbW9tZW50
+LCAhYS5iIG9yICFhLmIhIGFyZSBub3QgaW1wbGVtZW50ZWQgaGVyZS4AR3JlYXQgcmVzZXJ2ZSBz
+aXplIGlzIG5vdCBpbXBsZW1lbnRlZCB5ZXQuAE5vdCB1c2luZyBvZmZzZXQgb2Ygc3VmZml4LgBB
+dCB0aGUgbW9tZW50LCAhZnVuYyBpcyBub3QgaW1wbGVtZW50ZWQgaGVyZS4AOlRoZSB0ZXh0IGFm
+dGVyIHRoZSBzaXplIG9mIGFuIGludGVnZXIgc2lnbiBpc24ndCByZWNvZ25pemVkLgBJbnRlZ2Vy
+KGRlYy9oZXgpIHZhbHVlIG5vdCByZWNvZ25pemVkLgAIGgAAAAAAAAAAAAAAAAAAQxoAAEludGVn
+ZXIoZGVjL2hleCkgb3IgY29uc3RhbnQgdmFsdWUgZXhwZWN0ZWQuAH4sOwAAw4uEJFVuZGVmaW5l
+ZCBjb25zdGFudCBuYW1lLgB5GgAAAAAAAAAAAABDbG9zZSBwYXJlbnRoZXNpcyBzaWduICgnKScp
+IGV4cGVjdGVkLgCeGgAAKCkldQDSGgAAT3ZlcmZsb3cgYXQgY29uc3RhbnRzLgAAAAAAAAAAAERp
+dmlzaW9uIGJ5IDAgZXJyb3IuAPEaAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAA
+AAAAdDsAAAAAiwIAAAAAAAAAAAgAAIsCyVvDyVvDi4QkBAAAAKNFCAAAU1WL7IvcgesAAAAAi+O6
+RQgAAIsCUOj7AQAAukkIAACJArpNCAAAAAC6SQgAAAAAAIUKAAAAAAAAAACLAgAAAADjukUIAACL
+AlC6TQgAAAAAULpJCAAAAABQuAAAeDoAAHg6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAB4OgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAABUcAAACAAAAAIgCumoAAACKArppAAAAAAIPhAoAAAAAZQgAAIsCyVvDulEI
+AAD/AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyVvDyWccAAAkBAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAABxCAAAiQK6awAAAAACAAAAAwAAAIgCum8IAACKArpwCAAAOAIAAAAAAAC6awgA
+AP8CunEIAAAAALprCAABixKKArpwCAAAiALpyf//1RwAAEQ7AABQOwAAaDsAAIvsi9xtAgAAAAAA
+AAAAAAAAA9WLAlDoLQAAAAACAAAAAAAAAAAAAAAAAAAAAwAAAAMAAAABAAAAAQKL47oUAAAAA9WL
+AlDoLQJQOwAABQAAALkAAACAOwAAAAAAA7kAAACAOwAAALgKAAADA3lUHQAAAgAAAFA7AAAAAAAD
+1TlUaGUgZGlzcGxhY2VtZW50IGZvciB0aGlzIHZhbHVlIGlzIG5vdCBpbXBsZW1lbnRlZCBhdCB0
+aGUgbW9tZW50LgCLAlA7AADjuiAAAAAAAFA7AACLALwdAAACAAAAUDsAAAPViwIAAAAAAgAAAA8C
+ULoMAAACAAAAAlC6fQEAAADhHQAAAAAAAOEdAAAAAIsCAQAAAPUdAAAAAAAA9R0AAAAAi4T1HQAA
+CR4AAPUdAAAJHgAA9R0AAAEAAAAJHgAAAAAAAAAAiwJQLR4AAAUAAABQOwAAUDsAAMc8AlA7AAAA
+AAAAUR4AAFVucmVjb2duaXplZCBpbm5lciB0ZXh0LgAAAAAAIAlFeHBlY3RpbmcgYXJndW1lbnQg
+bmFtZS4AIkFyZ3VtZW50IG5hbWUgZXhwZWN0ZWQuAAAAAAAAAAAATDsAAFN0cmluZyBoZXJlIGlz
+IHVzZWxlc3MgYXQgdGhlIG1vbWVudC4ARDsAANweAABVbmV4cGVjdGVkIG51bWJlcnMvY29uc3Rh
+bnRzLCBleHBlY3RpbmcgYSB2YXJpYWJsZS4AuQAAADg7AADMmQAAAIsSOQIPhSgAAACL47qiCAAA
+iwJQurIIAFN0YWNrIHZhcmlhYmxlcyBhcmUgbm90IHJlbGV2YW50IGZvciBzY29wZS52YXJpYWJs
+ZS4AODsAAFVuZGVmaW5lZCBmdW5jdGlvbiBuYW1lLgAAA9WLAlDolwAAAADTiQKLAQAAAFvDyVvD
+U1WL7IvcgSE9AIQAAAA8PV4AhwAAAD49XgCCAAAAPD0AjwAAAD49AIwAAAA8XgCDAAAAPl4AhgAA
+AD0AhQAAADwAjQAAAD4AjgAAAADjugwApx8AAIsCUOgtAAAAAAIgAABVbnJlY29nbml6ZWQgY2hh
+cmFjdGVycyBhdCBmaXJzdCBjb25kaXRpb24gYXJndW1lbnQuAAAAAABDb25kaXRpb24gc2lnbihz
+KSBleHBlY3RlZC4AOyAAAAAAAABbIAAAAAAAAMlbWUiDxDBRw8lbw3AgAAADAAAAuAEAAAB7IAAA
+BQAAAFA7AADNgAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAFA7
+AAAAAAAAAAAAAAEAAAD//wEA9wIAAAAA0SAAAAAAAADZIAAAAAAAAOEgAACLUAEAAADqIAAAAAAA
+AAAAAAAAAAAAAAAAAPsgAAAEAAAAAAAAAAAAAAADAAAABgAAAAAAAAABAAAAAAAAACMhAABQOwAA
+AQAAAAAAAAAAAAAAAAAAAFA7AABTVYvsi9yB6wAAAAAAAAAABgEAAAEAAACACgAAAgAAAIkAAAAA
+AGMhAABQOwAAAAAAALgAAAAAUDsAAAAAAAB+IQAAODsAADg7AAAAAAAAAAAAAAAAAACMOwAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAODsAAFZhcmlhYmxlL0Z1bmN0aW9uIG5hbWUgaXMgYWxyZWFk
+eSBkZWZpbmVkLgC6IQAAAAAAAAAAAACZAAAAnQAAAEw7AAB9AAAAbQIAAIEAAAAAAAAAAAAAAAwA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAACUiAAAAAAAAAAAAAENvbnN0YW50IG5hbWUgaXMgYWxyZWFk
+eSBkZWZpbmVkLgA1IgAAAAAAAAAAAAAAAAAATmFtZSBmb3IgdmFyaWFibGUvY29uc3RhbnQgZXhw
+ZWN0ZWQuAGciAAAAAAAAAFVuZXhwZWN0ZWQgdGhyb3dsZXNzIHNpZ24gKCdeJykgYXQgY29uc3Rh
+bnQgZGVjbGFyYXRpb24uAE5hbWUgZm9yIHZhcmlhYmxlIGV4cGVjdGVkLgBVbmV4cGVjdGVkIHVu
+cmVmZXJlbmNlIHNpZ24gKCcqJykgYXQgY29uc3RhbnQgZGVjbGFyYXRpb24uAOoiAAABAAAAAAAA
+AAAAAAA9IwwAAABVbmV4cGVjdGVkIHJlc2VydmUgc2lnbiAoJyMnKSBhdCBjb25zdGFudCBkZWNs
+YXJhdGlvbi4AOyMAAAIAAAAlSW5jb3JyZWN0IHJlbG9jYXRpb24gc2lnbiAoJyUnKSB1c2VkIGF0
+IENIQVIvQ09OU1QgZGVjbGFyYXRpb24uAHsjAABTaXplIDAgd2hlbiB0ZXN0aW5nIGZvciBkYXRh
+eCByZWxvY2F0aW9uLgBeSW5jb3JyZWN0IHBvaW50ZXIgc2lnbiAoJ14nKSB1c2VkIGF0IENIQVIg
+ZGVjbGFyYXRpb24uAOojAABUaHJvd2xlc3Mgd2l0aG91dCBhIHNpZ24uAABPbmUgZnJvbSB0aGUg
+YXNzaWduIG9wZXJhdG9ycyBleHBlY3RlZC4AQCQAAFZhcmlhYmxlIGRlY2xhcmF0aW9uIGV4cGVj
+dGVkLgBsJAAAAAAAAMgVAAAAAAAAlyQAAAAAAACjJAAAAAAAAAAAAAAAAAAAryQAAH0AAABMOwAA
+AIQkAAAAAAAAAAAAAAAAAAAAAADLJAAARDsAAIujuQAAAIA7AABQOwAAAAAAAAAAAAABAAAAAAAA
+ALkAAABEOwAAaDsAAAAAAAAAAAAAgDsAAAAAAAAsAAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAAA
+AAABAAAA/////w0AAAAAAAAAPyUAAAEAAAAEAAAAAAAAAAIAAAAAAAAAAAAAAFslAAAixjsAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8JQAAAAAAAAEAAAC5AAAAgDsAAAwAAACQOgAAeCUA
+AEZ1bmN0aW9uL0ltcG9ydCBuYW1lIGlzIGFscmVhZHkgZGVmaW5lZC4AAAAAAAAAAAAAAAAAAQAA
+AAAAAAA4OwAAUDsAAAAAAAAAAAAAAAAAAAAAAAAAAAAARnVuY3Rpb24gbmFtZSBleHBlY3RlZC4A
+/SUAAE9wZW4gcGFyZW50aGVzaXMgc2lnbiAoJygnKSBleHBlY3RlZC4AGSYAABoBAAANAAAAAAAA
+AEsmAAAAAAAAuQAAAAIAAAACAAAAXDsAAAAAAAAAAAAA+SUAAAAAAAA4OwAAVW5kZWZpbmVkIGZ1
+bmN0aW9uL2RhdGEgY2FsbC4AeyYAAFA7AACL46EmAAACAAAAUDsAAAAAAAAAAAAAAAAAAAIAAAC5
+AAAAAAAAAADDJgAAxCYAAP/QoQAAAP8CAAAAAIA7AAC5AAAAAIA5ALkAAAAAgDkAdACL2LgBAAAA
+zYAAAAAAAAAAAGoAUDsAALkAAACAOwAAUDsAAMYFAAAAAABIuQAAAAAAAAAAxgEAxgUAAAAAAAAA
+AAAwJwAAAAAAADgnAAAAAAAAQCcAAAAAAABIJwAAAAAAAAAAAABQJwAAVCcAAAAAAAABAAAAAAAA
+AAEAAAAAAIuJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIBKSEJMQAAAAAAAAAAAQAAADk5
+AAAAAAAAAAAAU2Vjb25kIGFyZ3VtZW50IGF0IENBTExFWCBtdXN0IG5vdCBiZSBvbmUgYnl0ZS4A
+AAAAAFA7AACJweUnAAACAAAAAwAAAAUA9wAAAgAAAPYnAAAAAADBAigAAAIAAAAPAAAAAAAMKAAA
+BgAAAFA7AAAHSA+64D9zCUjHwv/////rBboAAAAAD7rgH3MHuv/////rBboAAAAAxsQAAAAAAAC1
+HAAAVmlydHVhbCBkZWNsYXJhdGlvbnMgY2FuIGhhdmUgb25seSB0aGUgcmVzZXJ2ZSBzaWduLgBQ
+OwAAAAAAAIsoAAAAAAAAhDoAAAQAAAAAAAAAAAAAAAAAAACEOgAABAAAAJ8oAAAAAAAAAAAAAAAA
+AAAAAAAAwygAAAAAAAAAAAAAAAAAANMoAACEOgAAAAAAAEFsbCBjb25kaXRpb25zL2xvb3BzIHdp
+dGhpbiBhIHNjb3BlIG1vc3QgYmUgY2xvc2VkLgDjKAAAAAAAAAAAAADpAAAAAAUAAAAkKQAAIykA
+AAAAAABQOwAAAAAAAIQ6AAAAAAAARCkAAFVuZXhwZWN0ZWQgY29uZGl0aW9uL2xvb3AgY2xvc2Ug
+Y29tbWFuZC4ATCkAAAAAAAB5KQAAUDsAAAoAAAAAAAAAiSkAAAAAAABUaGUgcHJldmlvdXMgY29u
+ZGl0aW9uL2xvb3AgaXMgZnJvbSBhIGRpZmZlcmVudCB0eXBlLgCVKQAAAAAAAFA7AAAAAAAA1ykA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAACAAAAAkAAACEOgAABAAAAFdhcm5pbmc6
+IEVOREVMU0VJRiBub3QgbWF0Y2hpbmcgSUYAAAAAADIqAAAAAAAAAAAAAIQ6AAAAAAAAAAAAAAAA
+AAAIAAAACQAAAIQ6AABQOwAAVGhlcmUgaXMgbm8gbG9vcCB0byBjb250aW51ZS4AhDoAAFRoZXJl
+IGlzIG5vIGxvb3AgdG8gYnJlYWsuAAAAAAAAAAAAAAAAAKMqAACnKgAAaDsAAHQ7AAAAAAAAAAAA
+AAAAAAAAAAAAAAAAALsqAAAUAAAAXDsAAAAAAABcOwAAAAAAAAAAAADjKgAA5yoAAGg7AAAAAAAA
+9yoAAAQAAAAAAAAAAAAAAAAAAAAAAAAACysAAA8rAAAAAAAAAAAAABQAAAAAAAAAUDsAAAAAAAAA
+AAAA7QAAAAAAAAAoZW50cnkpAAIBAAA4OwAAKGZ1bmN0aW9uKQAsOwAAKGNvbnN0YW50KQBVbnJl
+ZmVyZW5jZWQgdmFyaWFibGUvZnVuY3Rpb24vY29uc3RhbnQ6ICVzLiBQYXJlbnQ6ICVzLgBpKwAA
+AAAAAAgAAAAAPQAAAAAAAAAAAAAAAABVbnJlY29nbml6ZWQgcHJlZmVyZW5jZQABAAAAAAAAAG9y
+cGhhbnMAb3Zlcl9wcmVmAGhpZGRlbl9wcmVmAHdfYXNfZQBsb2dmaWxlAGNvZGVGbk9iagBjb25z
+dF93YXJuAGluY2x1ZGVkaXIAZnVuY3Rpb25fbmFtZQBjb252XzY0AG51bF9yZXNfcHJlZgBzZF9h
+c19zdgBpbnBsYWNlX3JlbG9jAHJlbG9jXzY0AHVuZGVyc2NvcmVfcHJlZgBleGl0X2VuZABpbmNs
+dWRlX3NlYwBpZ25vcmVfZm9ybWF0X3NvAGNhbGxfYWxpZ24Abm9iaXRzX3ZpcnR1YWwAaGFzX2Rl
+YnVnAG9mZnNldF93YXJuAHhfZmlsZQAAAAAA4iwAAG9jb21waWxlci5jb25mAAAAAAAAAAAAAAAA
+APksAAAAAAAAAS0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGS0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAUDsAAEgAAAAAAAAAAEiLPCQASIt0JAhIiwAkAEiLACQATItEJABMi0wkAFhI
+g+wwUEiJfCQISIl0JBBIiQAkAEiJACQATIlEJABMiUwkAEiD7ABIg8QAUDsAAEiLwkg9AAAAAHcA
+UPbYBACxBfbh6AAAAABZSAHBWEiDwQv/4fbYBABqCPYkJEgr4Eg9BgAAAHYKSLgGAAAAAAAAAGoI
+/sD2JCRIA+BQOwAAD7rkA3IRSIH5AAAAAHIbD7rhAHIR6xNIgfkAAAAAcgYPuuEAcgRIg+wISIvR
+AAAAAAAAAABQOwAASIPsCGUCAABNb3JlIHRoYW4gNjU1MzUgZXZlbiBjYWxscz8AMzI3Njggb2Rk
+IGNhbGxzPwAPuuMDAARIg+sIUDsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAA/QAA
+AAAQAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+mC4AAJwuAACYLgAA7QAAAAAAAAD9AAAAAAAAAOQuAABHZXRjZHcgZXJyb3IuAAAAAAAAAAAAAP8u
+AABDaGRpciBlcnJvci4AAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAArC4AAH4AbDoAACQAAABsLgAA
+AAAAAAEAAAAAAAAAAAAAAAAMAAAAAgAAAAEAAAAAAAAAUy8AACw7AAAAAAAAUmlnaHQgc2lkZSBv
+ZiB0aGUgYXNzaWdubWVudCBleHBlY3RlZC4AYy8AAAAAAAAAAAAAAQAAAAAAAACaLwAAAAAAAEQ7
+AABQOwAAODsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbQIAAAB7ACLSLwAAUmVsb2NhdGlvbiBzaWdu
+IGFuZCBzdHJpbmcgc3Vycm91bmRlZCBieSBxdW90YXRpb25zIGlzIG5vdCBhbGxvd2VkLgBUaGUg
+c3RyaW5nIGFzc2lnbm1lbnQgKCIiKSBjYW4gYmUgdXNlZCBhdCBDSEFSLCBTVFIgb3IgU1MuABYw
+AABHcm91cCBiZWdpbiBzaWduICgneycpIGlzIG5vdCBleHBlY3RlZCB0byBkZWNsYXJlIGEgY29u
+c3RhbnQuAFUwAAAAAAAAfQBHcm91cCBlbmQgc2lnbiAoJ30nKSBleHBlY3RlZC4AnTAAAH0AAAAA
+AAAAAAAAAAAAAAAAAAAAuQAAAAAAAAChAAAApQAAAOgwAABEb3VibGUgcG9pbnRlciAoXl4pIGV4
+cGVjdGVkIGluIHRoaXMgY2FzZTogZXhlY3V0YWJsZSBmb3JtYXQgYW5kIGltcG9ydGVkIGZ1bmN0
+aW9uLgABAAAARDEAAFVuZXhwZWN0ZWQgZG91YmxlIHBvaW50ZXIuAAAAAABfMQAAVW5kZWZpbmVk
+IHZhcmlhYmxlL2Z1bmN0aW9uIG5hbWUuAFVuZXhwZWN0ZWQgbmVnYXRpdmUgdmFsdWUgYXQgcmVz
+ZXJ2ZSBkZWNsYXJhdGlvbi4AiTEAABoBAABEOwAAAAAAAAAAAAAAAAAA/////1gAAAD1AAAAAAAA
+AGZpcnN0IGFyZ3VtZW50IGlzIG1pc3NpbmcgYXQgb3ZlcnJpZGUAc2Vjb25kIGFyZ3VtZW50IGlz
+IG1pc3NpbmcgYXQgb3ZlcnJpZGUAAAAAAAAAAACcOgAAaQIAAIAKAABsIAAAAAAAAAAAbDoAAENh
+bm5vdCBwYXJzZSB0byBpbnB1dCBmaWxlIG5hbWUuAFIyAABPIENvbXBpbGVyIC0gdXNhZ2U6IG8g
+ImZpbGVuYW1lIiBbW3ByZWYxIHZhbHVlMV0uLi5bcHJlZk4gdmFsdWVOXV0ARG9jdW1lbnRhdGlv
+biBpcyBoZXJlOiBodHRwczovL2NvbGluLWkuZ2l0aHViLmlvL28uaHRtbAAAAAAAAAAAAC8AAAAA
+AAAAAAAAAAALMwAAUEFUSAAUMwAAR2V0ZW52IGVycm9yIG9uIFBBVEguAAAAAAA6AAAAAAAAAAAA
+AAAAAAABAAAARTMAAFBhdGhmaW5kIGVycm9yLgAAoAAAACAAAAgHAAAgAwAAAEAGAAAMAAAAAQAA
+AAMAAC4vAHUzAAAAAAAAAIUzAABDYW5ub3Qgc2V0IGFjdGl2ZSBmb2xkZXI6AAAAAAAAAAAALmxv
+ZwBmaXJzdCBnZXRjd2QgZXJyb3IALngAAABAAAAAAAAAAAAAAAAAAAAAAADGMwAAAAAAAAAAAADS
+OwAA1jsAAAAAAAAAAAAACAAAAAwAAAAAAAAAAAAAACQAAADqMwAACjQAAAAAAAAKAAAAAA2oFAAA
+AAAAAP////8gNAAA/////wAAAAAAAAAALDQAADA0AABVbmV4cGVjdGVkIElNUE9SVCBzdGF0ZW1l
+bnQ7IHRoZXJlIGlzIG5vIExJQlJBUlkgb3BlbmVkLgA8NAAAAAAAAHw7AABJbXBvcnQgbmFtZSBm
+b3IgY29tcGlsZXIgbXVzdCBiZSBzcGVjaWZpZWQgYWZ0ZXIgdGhlIG5hbWUgZm9yIG91dHB1dC4A
+gTQAAA0AAABUaGVyZSBpcyBhbHJlYWR5IGFub3RoZXIgZnVuY3Rpb24gc3RhcnRlZC4AzzQAAFVu
+YXZhaWxhYmxlIEZVTkNUSU9OL0VOVFJZWy4uLl0gc3RhdGVtZW50OyBUaGUgc3RhcnQgYWRkcmVz
+cyB3YXMgYXQgRmlsZTogJXM7IExpbmU6ICVzLgD+NAAAAQAAAFVuZXhwZWN0ZWQgRU5ERlVOQ1RJ
+T04gY29tbWFuZC4AXjUAAAAAAAAAAAAAgjUAAAAAAAAAAAAAkjUAAAAAAAAAAAAAmjUAAJ41AABU
+aGUgRk9STUFUIGNvbW1hbmQgY2FuIGJlIGRlZmluZWQgYXQgc3RhcnQgYW5kIG9ubHkgb25jZS4A
+qjUAAAAAAABFWEUA7DUAAEVMRgD0NQAAT0JKAPw1AAAAAAAANjQAU08ALmRhdGEADjYAAAEAAAAu
+dGV4dAAcNgAAAgAAAC5kdG5iAACABAhVbnJlY29nbml6ZWQgZmlsZSBmb3JtYXQuADQ2AABBZnRl
+ckNhbGwgdmFyaWFibGUgbmFtZSBleHBlY3RlZC4AAAAAAAAAAAAAAAAAAAAAAAAAAABJbXBvcnRB
+ZnRlckNhbGwgaXMgdXNlZCBhdCBvYmplY3RzLgBBZnRlckNhbGwgaXMgbm90IGRlZmluZWQuAO0A
+AABPTgBPRkYARXhwZWN0aW5nICdvbicgb3IgJ29mZicgY29tbWFuZABIgfkAAAAAdAhI/8n/NMjr
+74H5AAAAAHQH/8n/NIjr8QAAAAAAAAAAETcAABU3AAABAAAAAAAAACE3AABMSUJSQVJZIHN0YXRl
+bWVudCBpcyBub3QgdXNlZCBhdCBvYmplY3QgZm9ybWF0LgAtNwAAzGE3AAAQAAAAVW5yZWNvZ25p
+emVkIGRhdGEgYWZ0ZXIgY29tbWFuZC4AajcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJXMgRmlsZSAl
+cywgUm93ICV1LCBDb2x1bW4gJXUAJXMgRmlsZSAlcywgUm93ICV1AAAAAAAA3TcAAFJlc3RvcmUg
+Zm9sZGVyIGVycm9yLgAAAAAA+zcAAEVOREZVTkNUSU9OIGNvbW1hbmQgZXhwZWN0ZWQgdG8gY2xv
+c2UgdGhlIG9wZW5lZCBGVU5DVElPTi4AAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAuZXhl
+AFM4AAAubwBcOAAAAAAAAH0CAAB9AgAAQAAAAE1aAHM4AACAAAAAAQAAAAQAAACAAAAADh+6DgC0
+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
+uiQAAAAD04sCUOhgYQAAuuklAACJArrtJQAAiwK66SUAADkCD4QKAAAAuuklAACLAslbw7rdJQAA
+iwK6+SUAADkCD4RZAAAAi+OL04sCULpHJgAAiwJQutUlAACLAlC6+SUAAIsCULrRJQAAiwJQus0l
+AACLAlDoL+7//7rpJQAAiQK67SUAAIsCuuklAAA5Ag+ECgAAALrpJQAAiwLJW8O4AQAAAIvTOQIP
+hQcAAACL4+h40f//6UsEAAC4AwAAAIvTOQIPhWoAAAC63SUAAIsCuvklAAA5Ag+EUQAAAIvji9OL
+AlC61SUAAIsCULr5JQAAiwJQutElAACLAlC6zSUAAIsCUOig7f//uuklAACJArrtJQAAiwK66SUA
+ADkCD4QKAAAAuuklAACLAslbw+nSAwAAi+PoJVAAALo8AAAAA9OJArgCAAAAi9M5Ag+FGgEAALgA
+AAAAujwAAAAD04sSOQIPhSQAAACL47r5JQAAiwJQutElAACLAlC6zSUAAIsCUOiUQ///6dsAAAC6
+3SUAAIsCuvklAAA5Ag+EhgAAAIvj6HRRAAC6OAAAAAPTiQK4AAAAALo4AAAAA9OLEokCi+OL04sC
+ULrVJQAAiwJQuvklAACLAlC60SUAAIsCULrNJQAAiwJQ6L3s//+66SUAAIkCuu0lAACLArrpJQAA
+OQIPhRoAAACL47o4AAAAA9OLEosCUOhuZAAAuuklAACJAukTAAAAi+NoAAAAAOhWZAAAuuklAACJ
+ArrtJQAAiwK66SUAADkCD4QKAAAAuuklAACLAslbw7gAAAAAujwAAAAD04sSiQLpmQIAALgAAAAA
+ujwAAAAD04sSOQIPhbUAAAC63SUAAIsCuvklAAA5Ag+EnAAAAIvjuvklAACLAlC60SUAAIsSiwJQ
+us0lAACLEosCUOhDpAAAuuklAACJArgAAAAAuuklAAA5Ag+FVgAAAIvji9OLAlC61SUAAIsCULr5
+JQAAiwJQutElAACLAlC6zSUAAIsCUOir6///uuklAACJArrtJQAAiwK66SUAADkCD4QKAAAAuukl
+AACLAslbw+kKAAAAuuklAACLAslbw+mNAQAAi+Po3U8AALo4AAAAA9OJArgAAAAAujgAAAAD04sS
+iQK63SUAAIsCuvklAAA5Ag+EKAEAALrNJQAAixKLArrxJQAAiQK60SUAAIsSiwK69SUAAIkCi+No
+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
+04MCBLoMAAAAA9OLArpYAAAAA9OLEokCulgAAAAD04MCBLoQAAAAA9OLArpYAAAAA9OLEokCulgA
+AAAD04MCBLoUAAAAA9OLArpYAAAAA9OLEokCulgAAAAD04MCBLoYAAAAA9OLArpYAAAAA9OLEokC
+ulgAAAAD04MCBLogAAAAA9OLArpYAAAAA9OLEokCulgAAAAD04MCBLokAAAAA9OLArpYAAAAA9OL
+EokCulgAAAAD04MCBLooAAAAA9OLArpYAAAAA9OLEokCulgAAAAD04MCBLosAAAAA9OLArpYAAAA
+A9OLEokCulgAAAAD04MCBLowAAAAA9OLArpYAAAAA9OLEokCulgAAAAD04MCBLo0AAAAA9OLArpY
+AAAAA9OLEokCulgAAAAD04MCBLo4AAAAA9OLArpYAAAAA9OLEokCulgAAAAD04MCBLo8AAAAA9OL
+ArpYAAAAA9OLEokCulgAAAAD04MCBLpAAAAAA9OLArpYAAAAA9OLEokCulgAAAAD04MCBLpEAAAA
+A9OLArpYAAAAA9OLEokCulgAAAAD04MCBLpIAAAAA9OLArpYAAAAA9OLEokCulgAAAAD04MCBLpM
+AAAAA9OLArpYAAAAA9OLEokCulgAAAAD04MCBLpQAAAAA9OLArpYAAAAA9OLEokCulgAAAAD04MC
+BLpUAAAAA9OLArpYAAAAA9OLEokCulgAAAAD04MCBLocAAAAA9OLArpYAAAAA9OLEokCulgAAAAD
+04MCBLh1AgAAulgAAAAD04sSiQK4mQEAAIlDXLjdKwAAulwAAAAD04sSiQK6XAAAAAPTgwIEuOUr
+AAC6XAAAAAPTixKJArpcAAAAA9ODAgS47ysAALpcAAAAA9OLEokCulwAAAAD04MCBLj7KwAAulwA
+AAAD04sSiQK6XAAAAAPTgwIEuAIsAAC6XAAAAAPTixKJArpcAAAAA9ODAgS4CiwAALpcAAAAA9OL
+EokCulwAAAAD04MCBLgULAAAulwAAAAD04sSiQK6XAAAAAPTgwIEuB8sAAC6XAAAAAPTixKJArpc
+AAAAA9ODAgS4KiwAALpcAAAAA9OLEokCulwAAAAD04MCBLg4LAAAulwAAAAD04sSiQK6XAAAAAPT
+gwIEuEAsAAC6XAAAAAPTixKJArpcAAAAA9ODAgS4TSwAALpcAAAAA9OLEokCulwAAAAD04MCBLhW
+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
+AIvj6CeE//+L47ppAgAAiwJQuiAAAAAD04sCUOiDqf//ukgAAACJArgBAAAAuhoBAACJArgAAAAA
+ukgAAAA5Ag+FfAAAALpwOgAAiwK6NjgAAIkCuvIzAACLAro2OAAAAQKL4+j7hf//ujY4AACLEokC
+unA6AACLAro2OAAAiQK69jMAAIsCujY4AAABArgAAAAAujY4AACLEokCugI0AACLArp0OgAAAQK4
+AQAAALrzNwAAiQK4AAAAALppAgAAiQK4AAAAALrzNwAAOQIPhREAAACL47psLgAAiwJQuAAAAAD/
+0OkA0P//ulAAAACLArpIAAAAOQIPhAcAAACL4+jwo///i+PoD0v//7pIAAAAiQK6UAAAAIsCukgA
+AAA5Ag+EDwAAAIvjukgAAACLAlDojqP//7qJAAAAiwK6hQAAADkCD4VFAAAAuhIAAACLArqfKgAA
+OQIPhTEAAACL4+hPVf//ukgAAACJArpQAAAAiwK6SAAAADkCD4QPAAAAi+O6SAAAAIsCUOg1o///
+i+O6IAAAAAPTiwJQukgAAACLwlDopVf//7qYAAAAA9OJArpQAAAAiwK6SAAAADkCD4QqAAAAuAEA
+AAC6mAAAAAPTOQIPhQ8AAACL47pIAAAAiwJQ6Nyi//+L4+gGo///uqMzAACLArpCOAAAiQK6ozMA
+AIsCujo4AACJAovjuqMzAACLAlDoyDP+/7o+OAAAiQK6PjgAAIsCujo4AAABAro6OAAAiwK6RjgA
+AIkCuko4AACLArpCOAAAKQK6SjgAAIsCukY4AAApArpGOAAAiwK6QjgAADkCD4RnAAAAukY4AACL
+EooCuk44AACIArpGAAAAigK6TjgAADgCD4UcAAAAukY4AACLAro6OAAAiQK6QjgAAIsCukY4AACJ
+ArpGOAAAiwK6QjgAADkCD4QOAAAAuko4AACLArpGOAAAKQLphf///7oOAAAAiwK6TzgAAIkCuokA
+AACLArqFAAAAOQIPhRMAAAC6WDgAAIsCuk84AACJAukiAAAAuhIAAACLArq5AAAAOQIPhQ4AAAC6
+XzgAAIsCuk84AACJAroOAAAAiwK6TzgAADkCD4SGAAAAi+O6TzgAAIsCUOiUMv7/umM4AACJAovj
+uk84AACLAlC6OQEAAIsCUOgRa/7/ukgAAACJArpQAAAAiwK6SAAAADkCD4QPAAAAi+O6SAAAAIsC
+UOguof//i+O6YzgAAIsCULpPOAAAiwJQujo4AACLAlC4AAAAAP/QumM4AACLAro6OAAAAQK6DgAA
+AIoCujo4AACLEogCi+O6TDsAAIsCUOjqSf7/ukgAAACJArgAAAAAukgAAAA5Ag+EDwAAAIvjukgA
+AACLAlDouKD//7pMOwAAiwK6fQAAACkCuAAAAAC6bQIAADkCD4U3AAAAi+O6fQAAAIsCUOg2nf//
+ukgAAACJArgAAAAAukgAAAA5Ag+EDwAAAIvjukgAAACLAlDoYaD//7qJAAAAiwK6hQAAADkCD4Vq
+BwAAi+O6bzgAAIsCULoOAAAAiwJQums4AACLAlC4AAAAAP/Qi+O6IgAAAIsCULp2OAAAiwJQums4
+AACLAlC4AAAAAP/QuiIAAACLArprOAAAAQK6ejgAAIsCums4AACLEokCuiIAAACLArprOAAAAQK6
+fjgAAIsCums4AACLEokCuiIAAACLArprOAAAAQK6IgAAAIsCums4AAABArqCOAAAiwK6azgAAIsS
+iQK6bzgAAIsCumc4AAABAromAAAAiwK6ZzgAACkCuoY4AACLArpnOAAAixKJArrTOAAAiwK6zzgA
+ACkCi+O6zzgAAIsCULrTOAAAiwJQuss4AACLAlC4AAAAAP/Qus84AACLArrLOAAAAQKL47rbOAAA
+iwJQ6Ekw/v+61zgAAIkCi+O61zgAAIsCULrbOAAAiwJQuss4AACLAlC4AAAAAP/Qutc4AACLArrL
+OAAAAQK64zgAAIsCut84AACJArrXOAAAiwK63zgAACkCus84AACLArrfOAAAKQKL47rfOAAAiwJQ
+uuc4AACLAlC6yzgAAIsCULgAAAAA/9C67zgAAIsCuus4AACLEokCuiIAAACLArrrOAAAAQK66zgA
+AIsCuvc4AACJArrzOAAAiwK66zgAAIsSiQK6IgAAAIsCuus4AAABAroOAAAAiwK66zgAAIsSiQK6
+JgAAAIsCuus4AAABAroOAAAAiwK66zgAAIsSiQK6JgAAAIsCuus4AAABAroOAAAAiwK66zgAAIsS
+iQK6JgAAAIsCuus4AAABArr7OAAAiwK66zgAAIsSiQK6IgAAAIsCuus4AAABArr/OAAAiwK6AzkA
+AIkCi+O6IgAAAIsCULoHOQAAiwJQuus4AACLAlC4AAAAAP/Qi+O6IgAAAIsCULoTOQAAiwJQugs5
+AACLAlC4AAAAAP/Qi+O6IgAAAIsCULrhAAAAiwJQuhc5AACLAlC4AAAAAP/Qi+O6HzkAAIsCULoO
+AAAAiwJQuhs5AACLAlC4AAAAAP/QujUDAACLArpNAwAAiQK6TDsAAIsCuv0DAACJArpEOwAAiwK6
+BQQAAIkCugUEAACLArodAwAAiQK6BQQAAIsCuk0DAAABArpNAwAAiwK6KQMAAIkCulA7AACLAroZ
+AwAAiQK6KQMAAIsCugoBAAABAroKAQAAiwK6JQMAAIkCulg7AACLArolBAAAiQK6KQMAAIsCuikE
+AACJArpNAwAAiwK6MQQAAIkCuhkDAACLArotBAAAiQK6LQQAAIsCuk0DAAABArojOQAAiwK6UQMA
+AIkCuic5AACLArqpAAAAiQK6UQMAAIsCuq0AAACJAropBAAAiwK6pQAAAIkCupkAAACLArqlAAAA
+AQK6EgAAAIsCup8qAAA5Ag+FJAMAALpNAwAAiwK6UQQAAIkCuk0DAACLArpZBAAAiQK6KzkAAIsC
+ui85AACJArozOQAAiwK6LzkAAAECulEEAACLArovOQAAixKJAromAAAAiwK6LzkAAAECumQ7AACL
+Aro7OQAAiQKL47rJAAAAiwJQujc5AACLAlBoAAAAAOgUb/7/ukgAAACJArpQAAAAiwK6SAAAADkC
+D4QPAAAAi+O6SAAAAIsCUOiOm///umA7AACLAro7OQAAAQKL47o3OQAAiwJQug4AAACLAlC6OzkA
+AIsCULgAAAAA/9C6ZDsAAIsCui85AACLEokCulUEAACLArodAwAAAQK6VQQAAIsCuk0DAAABArr3
+OAAAixL/ArpDOQAAiwK6UQMAAAECukM5AACLArqtAAAAAQK6PzkAAIsCurEAAACJArpDOQAAiwK6
+tQAAAIkCulEEAACLArqhAAAAiQK6RzkAAIsCuqEAAAABArqZAAAAiwK6oQAAAAECulEEAACLArpH
+OQAAAQK6UQQAAIsCuks5AAABArpgOwAAiwK6TzkAAIkCumQ7AACLArpPOQAAAQK6NzkAAIsCuk85
+AAApArpPOQAAiwK6YDsAADkCD4TVAAAAuiYAAACLArpPOQAAKQK6TzkAAIsSiwK6UzkAAIkCukc5
+AACLArpTOQAAAQK6UzkAAIsCuk85AACLEokCuiYAAACLArpPOQAAKQK6TzkAAIsSiwK6UzkAAIkC
+uks5AACLArpTOQAAAQK6UzkAAIsCuk85AACLEokCuiYAAACLArpPOQAAKQK6JgAAAIsCuk85AAAp
+AromAAAAiwK6TzkAACkCuk85AACLEosCulM5AACJArpHOQAAiwK6UzkAAAECulM5AACLArpPOQAA
+ixKJAukX////umw7AACLArpXOQAAiQK6cDsAAIsCulc5AAABArpXOQAAiwK6bDsAADkCD4RVAAAA
+uiYAAACLArpXOQAAKQK6VzkAAIsSiwK6UzkAAIkCui4AAACLArpTOQAAOQIPhB4AAAC6SzkAAIsC
+ulM5AAABArpTOQAAiwK6VzkAAIsSiQLpl////4vjujkDAACLAlC6UQMAAIsCUOhWL/7/uls5AACJ
+ArpbOQAAiwK6UQMAAAEC6dMOAAC6FgAAAIsCurkAAAA5Ag+FXQgAALpMOwAAiwK6EwUAAIkCukw7
+AACLAroXBQAAiQK6BwUAAIsCuicFAACJArpMOwAAiwK6JwUAAAECugsFAACLArorBQAAiQKL47pM
+OwAAiwJQupUAAACLAlC6JwUAAIsCULorBQAAiwJQ6PQ6/v+6KwUAAIkCuisFAACLArovBQAAiQK6
+WDsAAIsCujMFAACJArpYOwAAiwK6NwUAAIkCi+O6IgAAAIsCULpjOQAAiwJQuq0EAACLAlC4AAAA
+AP/QuisFAACLAroKAQAAAQK6CgEAAIsCuokEAACJArqpBAAAiwK6jQQAAIkCi+O6IgAAAIsCULpr
+OQAAiwJQurUEAACLAlC4AAAAAP/QuisFAACLArqlAAAAiQK6pQQAAIsCuqkAAACJArqpBAAAiwK6
+rQAAAIkCuhYAAACLArqfKgAAOQIPhUcAAACL47oiAAAAiwJQujIAAACLwlC6uQQAAIsCULgAAAAA
+/9CL47oiAAAAiwJQuuEAAACLAlC6vQQAAIsCULgAAAAA/9DpbwYAAIvjuiIAAACLAlC6OgAAAIvC
+ULq5BAAAiwJQuAAAAAD/0Ivjum85AACLwlC64QAAAIsCUOg3l/7/ukgAAACJAovjuns5AACLwlC6
+czkAAIvCUOgZl/7/ukgAAACJArpQAAAAiwK6SAAAADkCD4QPAAAAi+O6SAAAAIsCUOjAlv//i+O6
+iDkAAIvCULp/OQAAi8JQ6NiW/v+6SAAAAIkCulAAAACLArpIAAAAOQIPhA8AAACL47pIAAAAiwJQ
+6H+W//+L47oiAAAAiwJQujIAAACLwlC6vQQAAIsCULgAAAAA/9C6nQQAAP4CuicFAACLArpPBQAA
+iQK6WDsAAIsCuk8FAAABArorBQAAiwK6UwUAAIkCulg7AACLArpTBQAAAQK6UwUAAIsCulcFAACJ
+AovjusYFAACLAlDoICf+/7rKBQAAiQK6ygUAAP8CusoFAACLArpbBQAAiQK6ygUAAIsCul8FAACJ
+ArqdBAAA/gK6TwUAAIsCum8FAACJArrKBQAAiwK6bwUAAAECulMFAACLArpzBQAAiQK6ygUAAIsC
+unMFAAABArpTBQAAiwK6jDkAAIkCupUAAACLCrqMOQAAiwIPuuAfcwe6/////+sFugAAAAD3+bqM
+OQAAiQK6cwUAAIsCupA5AACJArqVAAAAiwq6kDkAAIsCD7rgH3MHuv/////rBboAAAAA9/m6kDkA
+AIkCuow5AACLArqQOQAAOQIPhQ4AAAC6lQAAAIsCunMFAAABArpzBQAAiwK6dwUAAIkCumQ7AACL
+Arp7BQAAiQK6FgYAAIsCunsFAAABArp7BQAAiwK6fwUAAIkCup0EAAD+ArpvBQAAiwK6jwUAAIkC
+uo8FAACLArqUOQAAiQK6ewUAAIsCupQ5AAABArpzBQAAiwK6kwUAAIkCupMFAACLArqXBQAAiQK6
+kwUAAIsCutIFAACJArp7BQAAiwK60gUAAAECuiYGAACLArqbBQAAiQK6cDsAAIsCuh4GAACJArri
+BQAAiwq6HgYAAIsCD7rgH3MHuv/////rBboAAAAA9/m6HgYAAIkCui4AAACLArqYOQAAiQK6HgYA
+AIsCupg5AAA5Ag+NVQAAAIvjusUAAACLAlC6JgAAAIsCULqcOQAAiwJQ6D5n/v+6SAAAAIkCulAA
+AACLArpIAAAAOQIPhA8AAACL47pIAAAAiwJQ6LiT//+6mDkAAP8C6Zf///+6gDoAAIsCui4GAACJ
+ArouBgAAiwK6mwUAAAECutIFAACLArraBQAAiQK6JgYAAIsCutoFAAABArouBgAAiwK62gUAAAEC
+unA7AACLArqbBQAAAQK62gUAAIsCuuoFAACJArpwOwAAiwK66gUAAAECunw7AACLArryBQAAiQK6
+mwUAAIsCupQ5AAABArp8OwAAiwK6mwUAAAECuuoFAACLArr6BQAAiQK6fDsAAIsCuvoFAAABAroe
+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
+AAA3CQAAfhMAAAEBAAA/CQAAhRMAAAEBAAA7CQAAjBMAAAEBAAAzCQAAmxMAAAEBAAAzCQAAoxMA
+AAEBAAAvCQAAqxMAAAEBAAArCQAAuBMAAAEBAABDCQAAvxMAAAEBAABHCQAAxhMAAAEBAABDCQAA
+0xMAAAEBAABHCQAA3xMAAAEBAAA3CQAA5xMAAAEBAAAzCQAA9BMAAAEBAAA/CQAA+xMAAAEBAAA7
+CQAAAhQAAAEBAAA/CQAADxQAAAEBAABDCQAAGxQAAAEBAAA/CQAAIxQAAAEBAAArCQAAMBQAAAEB
+AABDCQAANxQAAAEBAABDCQAASxQAAAEBAABLCQAAVxQAAAEBAABPCQAAYxQAAAEBAABTCQAAdhQA
+AAEBAABTCQAAfhQAAAEBAABPCQAAixQAAAEBAABXCQAAlBQAAAEBAABXCQAAnBQAAAEBAABLCQAA
+qRQAAAEBAABbCQAAsBQAAAEBAABbCQAAxBQAAAEBAABfCQAA1RQAAAEBAABgCQAA3BQAAAEBAABf
+CQAA6RQAAAEBAABiCQAA8xQAAAEBAABhCQAA+hQAAAEBAABfCQAABxUAAAEBAABiCQAAERUAAAEB
+AABmCQAABhYAAAEBAABqCQAAFxYAAAEBAABuCQAALRYAAAEPAAAAAAAANBYAAAEBAAByCQAAOxYA
+AAEBAAByCQAAdBYAAAEMAAAAAAAAjhYAAAEBAAB2CQAA1BYAAAENAAAAAAAA8hYAAAEBAACCCQAA
+DxcAAAEBAACTCQAAGxcAAAEBAACXCQAAJxcAAAEBAACbCQAAMxcAAAEBAACfCQAARhcAAAEBAACz
+CQAAThcAAAEBAACTCQAAVhcAAAEBAACvCQAAYxcAAAEBAACjCQAAahcAAAEBAACnCQAAcRcAAAEB
+AACjCQAAfhcAAAEBAACjCQAAihcAAAEBAAC/CQAAlxcAAAEBAACrCQAAnxcAAAEMAAAAAAAAphcA
+AAEBAAC3CQAAshcAAAEBAAC3CQAAwRcAAAEBAAC7CQAAzhcAAAEBAACrCQAA1hcAAAEMAAAAAAAA
+3RcAAAEBAACfCQAA5BcAAAEBAAC3CQAA7RcAAAEBAACbCQAA9RcAAAEBAAC3CQAAAhgAAAEBAACj
+CQAACRgAAAEBAACnCQAAEBgAAAEBAACjCQAAHRgAAAEBAACbCQAAJhgAAAEBAADDCQAALRgAAAEB
+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
+AADxCgAA8SUAAAEBAAD1CgAABSYAAAEBAAD5CgAAqyYAAAEBAAD+CgAAuyYAAAEBAAACCwAA0CYA
+AAEBAAAOCwAA4CYAAAEBAAASCwAA5yYAAAEBAAD+CgAABycAAAEBAAAaCwAALScAAAEBAAAbCwAA
+8ScAAAEBAAAfCwAABCgAAAEBAAA7CwAADCgAAAEBAAA3CwAAIygAAAEBAAAvCwAALigAAAEBAAAz
+CwAAPSgAAAEBAAAvCwAASigAAAEBAAAvCwAAUSgAAAEBAAA/CwAAXSgAAAEBAAAvCwAAZCgAAAEB
+AAAvCwAAeSgAAAEBAAAvCwAAhSgAAAEBAAAfCwAAlCgAAAEBAAAvCwAAoSgAAAEBAAAnCwAAsygA
+AAEBAABHCwAAuigAAAEBAABDCwAAwSgAAAEBAABHCwAAyCgAAAEBAAAjCwAAzygAAAEBAABHCwAA
+3CgAAAEBAAA/CwAA4ygAAAEBAABPCwAA8ygAAAEBAABTCwAACykAAAEBAABHCwAAGikAAAEBAABH
+CwAAQykAAAEBAABHCwAATykAAAEBAABHCwAAXikAAAEBAAAnCwAAZikAAAEBAAAfCwAAbikAAAEB
+AABXCwAAeCkAAAEBAAAvCwAAgCkAAAEBAABPCwAAkikAAAEBAABPCwAAoykAAAEBAABPCwAAuCkA
+AAEBAABLCwAA3CkAAAEBAAAnCwAA5CkAAAEBAAAfCwAA9ikAAAEBAAAvCwAA/ikAAAEBAABPCwAA
+ECoAAAEBAABPCwAAHioAAAEBAAAnCwAAJioAAAEBAAAfCwAALioAAAEBAAAvCwAANioAAAEBAABP
+CwAAQyoAAAEBAABPCwAASioAAAEBAAAjCwAAUSoAAAEBAABPCwAAXioAAAEBAABPCwAAbyoAAAEB
+AAAvCwAAfCoAAAEBAAAnCwAAjCoAAAEBAAAnCwAAryoAAAEBAAAvCwAAvCoAAAEBAABbCwAAwyoA
+AAEBAAAjCwAAyioAAAEBAABbCwAA9ioAAAEBAABfCwAA/SoAAAEBAABjCwAABCsAAAEBAABfCwAA
+CysAAAEBAABfCwAAHSsAAAEBAAA/CwAAdisAAAEBAAArCwAAfSsAAAEBAAAnCwAAhCsAAAEBAAAn
+CwAAiysAAAEBAAAvCwAAlysAAAEBAAAjCwAAqysAAAEBAABnCwAAtysAAAEBAABrCwAAwysAAAEB
+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
+AABLOQAAlOABAAEBAABgOwAAm+ABAAEBAABPOQAAouABAAEBAABkOwAAqeABAAEBAABPOQAAsOAB
+AAEBAAA3OQAAt+ABAAEBAABPOQAAvuABAAEBAABPOQAAxeABAAEBAABgOwAA0uABAAEBAAAmAAAA
+2eABAAEBAABPOQAA4OABAAEBAABPOQAA6eABAAEBAABTOQAA8OABAAEBAABHOQAA9+ABAAEBAABT
+OQAA/uABAAEBAABTOQAABeEBAAEBAABPOQAADuEBAAEBAAAmAAAAFeEBAAEBAABPOQAAHOEBAAEB
+AABPOQAAJeEBAAEBAABTOQAALOEBAAEBAABLOQAAM+EBAAEBAABTOQAAOuEBAAEBAABTOQAAQeEB
+AAEBAABPOQAASuEBAAEBAAAmAAAAUeEBAAEBAABPOQAAWOEBAAEBAAAmAAAAX+EBAAEBAABPOQAA
+ZuEBAAEBAAAmAAAAbeEBAAEBAABPOQAAdOEBAAEBAABPOQAAfeEBAAEBAABTOQAAhOEBAAEBAABH
+OQAAi+EBAAEBAABTOQAAkuEBAAEBAABTOQAAmeEBAAEBAABPOQAAp+EBAAEBAABsOwAAruEBAAEB
+AABXOQAAteEBAAEBAABwOwAAvOEBAAEBAABXOQAAw+EBAAEBAABXOQAAyuEBAAEBAABsOwAA1+EB
+AAEBAAAmAAAA3uEBAAEBAABXOQAA5eEBAAEBAABXOQAA7uEBAAEBAABTOQAA9eEBAAEBAAAuAAAA
+/OEBAAEBAABTOQAACeIBAAEBAABLOQAAEOIBAAEBAABTOQAAF+IBAAEBAABTOQAAHuIBAAEBAABX
+OQAALuIBAAEBAAA5AwAANuIBAAEBAABRAwAAQ+IBAAEBAABbOQAASuIBAAEBAABbOQAAUeIBAAEB
+AABRAwAAXeIBAAEBAAAWAAAAZOIBAAEBAAC5AAAAceIBAAEBAABMOwAAeOIBAAEBAAATBQAAf+IB
+AAEBAABMOwAAhuIBAAEBAAAXBQAAjeIBAAEBAAAHBQAAlOIBAAEBAAAnBQAAm+IBAAEBAABMOwAA
+ouIBAAEBAAAnBQAAqeIBAAEBAAALBQAAsOIBAAEBAAArBQAAueIBAAEBAABMOwAAweIBAAEBAACV
+AAAAyeIBAAEBAAAnBQAA0eIBAAEBAAArBQAA3uIBAAEBAAArBQAA5eIBAAEBAAArBQAA7OIBAAEB
+AAAvBQAA8+IBAAEBAABYOwAA+uIBAAEBAAAzBQAAAeMBAAEBAABYOwAACOMBAAEBAAA3BQAAEeMB
+AAEBAAAiAAAAGeMBAAEBAABjOQAAIeMBAAEBAACtBAAAKeMBAAEJAAAAAAAAMOMBAAEBAAArBQAA
+N+MBAAEBAAAKAQAAPuMBAAEBAAAKAQAAReMBAAEBAACJBAAATOMBAAEBAACpBAAAU+MBAAEBAACN
+BAAAXOMBAAEBAAAiAAAAZOMBAAEBAABrOQAAbOMBAAEBAAC1BAAAdOMBAAEJAAAAAAAAe+MBAAEB
+AAArBQAAguMBAAEBAAClAAAAieMBAAEBAAClBAAAkOMBAAEBAACpAAAAl+MBAAEBAACpBAAAnuMB
+AAEBAACtAAAApeMBAAEBAAAWAAAArOMBAAEBAACfKgAAu+MBAAEBAAAiAAAAw+MBAAEBAAAyAAAA
+y+MBAAEBAAC5BAAA0+MBAAEJAAAAAAAA3OMBAAEBAAAiAAAA5OMBAAEBAADhAAAA7OMBAAEBAAC9
+BAAA9OMBAAEJAAAAAAAAAuQBAAEBAAAiAAAACuQBAAEBAAA6AAAAEuQBAAEBAAC5BAAAGuQBAAEJ
+AAAAAAAAI+QBAAEBAABvOQAAK+QBAAEBAADhAAAAOOQBAAEBAABIAAAAQeQBAAEBAAB7OQAASeQB
+AAEBAABzOQAAVuQBAAEBAABIAAAAXeQBAAEBAABQAAAAZOQBAAEBAABIAAAAc+QBAAEBAABIAAAA
+guQBAAEBAACIOQAAiuQBAAEBAAB/OQAAl+QBAAEBAABIAAAAnuQBAAEBAABQAAAApeQBAAEBAABI
+AAAAtOQBAAEBAABIAAAAw+QBAAEBAAAiAAAAy+QBAAEBAAAyAAAA0+QBAAEBAAC9BAAA2+QBAAEJ
+AAAAAAAA4uQBAAEBAACdBAAA6eQBAAEBAAAnBQAA8OQBAAEBAABPBQAA9+QBAAEBAABYOwAA/uQB
+AAEBAABPBQAABeUBAAEBAAArBQAADOUBAAEBAABTBQAAE+UBAAEBAABYOwAAGuUBAAEBAABTBQAA
+IeUBAAEBAABTBQAAKOUBAAEBAABXBQAAMeUBAAEBAADGBQAAPuUBAAEBAADKBQAAReUBAAEBAADK
+BQAATOUBAAEBAADKBQAAU+UBAAEBAABbBQAAWuUBAAEBAADKBQAAYeUBAAEBAABfBQAAaOUBAAEB
+AACdBAAAb+UBAAEBAABPBQAAduUBAAEBAABvBQAAfeUBAAEBAADKBQAAhOUBAAEBAABvBQAAi+UB
+AAEBAABTBQAAkuUBAAEBAABzBQAAmeUBAAEBAADKBQAAoOUBAAEBAABzBQAAp+UBAAEBAABTBQAA
+ruUBAAEBAACMOQAAteUBAAEBAACVAAAAvOUBAAEBAACMOQAA1+UBAAEBAACMOQAA3uUBAAEBAABz
+BQAA5eUBAAEBAACQOQAA7OUBAAEBAACVAAAA8+UBAAEBAACQOQAADuYBAAEBAACQOQAAFeYBAAEB
+AACMOQAAHOYBAAEBAACQOQAAKeYBAAEBAACVAAAAMOYBAAEBAABzBQAAN+YBAAEBAABzBQAAPuYB
+AAEBAAB3BQAAReYBAAEBAABkOwAATOYBAAEBAAB7BQAAU+YBAAEBAAAWBgAAWuYBAAEBAAB7BQAA
+YeYBAAEBAAB7BQAAaOYBAAEBAAB/BQAAb+YBAAEBAACdBAAAduYBAAEBAABvBQAAfeYBAAEBAACP
+BQAAhOYBAAEBAACPBQAAi+YBAAEBAACUOQAAkuYBAAEBAAB7BQAAmeYBAAEBAACUOQAAoOYBAAEB
+AABzBQAAp+YBAAEBAACTBQAAruYBAAEBAACTBQAAteYBAAEBAACXBQAAvOYBAAEBAACTBQAAw+YB
+AAEBAADSBQAAyuYBAAEBAAB7BQAA0eYBAAEBAADSBQAA2OYBAAEBAAAmBgAA3+YBAAEBAACbBQAA
+5uYBAAEBAABwOwAA7eYBAAEBAAAeBgAA9OYBAAEBAADiBQAA++YBAAEBAAAeBgAAFucBAAEBAAAe
+BgAAHecBAAEBAAAuAAAAJOcBAAEBAACYOQAAK+cBAAEBAAAeBgAAMucBAAEBAACYOQAAQecBAAEB
+AADFAAAASecBAAEBAAAmAAAAUecBAAEBAACcOQAAXucBAAEBAABIAAAAZecBAAEBAABQAAAAbOcB
+AAEBAABIAAAAe+cBAAEBAABIAAAAiOcBAAEBAACYOQAAlOcBAAEBAACAOgAAm+cBAAEBAAAuBgAA
+oucBAAEBAAAuBgAAqecBAAEBAACbBQAAsOcBAAEBAADSBQAAt+cBAAEBAADaBQAAvucBAAEBAAAm
+BgAAxecBAAEBAADaBQAAzOcBAAEBAAAuBgAA0+cBAAEBAADaBQAA2ucBAAEBAABwOwAA4ecBAAEB
+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
+AAAeAAAALfQBAAEBAADyBQAANfQBAAEBAACUOQAAR/QBAAEBAAB7OQAAVPQBAAEBAABIAAAAW/QB
+AAEBAABQAAAAYvQBAAEBAABIAAAAcfQBAAEBAABIAAAAgPQBAAEBAADVAAAAiPQBAAEBAABzBQAA
+kPQBAAEBAAAqAAAAmPQBAAEBAACHBQAAqvQBAAEBAAB7BQAAsvQBAAEBAABvBQAAxPQBAAEBAACI
+OQAA0fQBAAEBAABIAAAA2PQBAAEBAABQAAAA3/QBAAEBAABIAAAA7vQBAAEBAABIAAAA/fQBAAEB
+AACIOwAABfUBAAEBAACEOwAADfUBAAEBAABYAAAAGvUBAAEBAABUOgAAIfUBAAEBAABYOgAAKPUB
+AAEBAABUOgAAPPUBAAEBAACIOwAAQ/UBAAEBAACtAAAAVvUBAAEBAABIAAAAXfUBAAEBAABQAAAA
+ZPUBAAEBAABIAAAAc/UBAAEBAABIAAAAgvUBAAEBAACAOgAAivUBAAEBAAB8OgAAkvUBAAEBAABY
+AAAAn/UBAAEBAABUOgAApvUBAAEBAABYOgAArfUBAAEBAABUOgAAwfUBAAEBAACAOgAAyPUBAAEB
+AACtAAAA1vUBAAEBAACAOgAA3vUBAAEBAAB8OgAA5vUBAAEBAABYAAAA8/UBAAEBAABUOgAA+vUB
+AAEBAABYOgAAAfYBAAEBAABUOgAAFfYBAAEBAACAOgAAHPYBAAEBAACtAAAAJfYBAAEBAACdAAAA
+LfYBAAEBAACtAAAANfYBAAEBAABYAAAAQvYBAAEBAABUOgAASfYBAAEBAABYOgAAUPYBAAEBAABU
+OgAAZPYBAAEBAACVAAAAa/YBAAEBAABcOgAAcvYBAAEBAACNAAAAefYBAAEBAACFAAAAhvYBAAEB
+AAAyAAAAjfYBAAEBAABcOgAAlvYBAAEBAABcOgAAnvYBAAEBAABMOwAApvYBAAEBAABIOwAArvYB
+AAEBAABYAAAAu/YBAAEBAABUOgAAwvYBAAEBAABYOgAAyfYBAAEBAABUOgAA3/YBAAEBAABcOgAA
+5/YBAAEBAABYOwAA7/YBAAEBAABUOwAA9/YBAAEBAABYAAAABPcBAAEBAABUOgAAC/cBAAEBAABY
+OgAAEvcBAAEBAABUOgAAJvcBAAEBAAASAAAALfcBAAEBAAC5AAAAP/cBAAEBAACgOwAATvcBAAEB
+AACgOwAAVvcBAAEBAACcOwAAXvcBAAEBAABYAAAAa/cBAAEBAABUOgAAcvcBAAEBAABYOgAAefcB
+AAEBAABUOgAAj/cBAAEBAABkOwAAl/cBAAEBAABgOwAAn/cBAAEBAABYAAAArPcBAAEBAABUOgAA
+s/cBAAEBAABYOgAAuvcBAAEBAABUOgAA0PcBAAEBAABwOwAA2PcBAAEBAABsOwAA4PcBAAEBAABY
+AAAA7fcBAAEBAABUOgAA9PcBAAEBAABYOgAA+/cBAAEBAABUOgAAEfgBAAEBAACIOwAAGfgBAAEB
+AACEOwAAIfgBAAEBAABYAAAALvgBAAEBAABUOgAANfgBAAEBAABYOgAAPPgBAAEBAABUOgAAUvgB
+AAEBAAB8OwAAWvgBAAEBAAB4OwAAYvgBAAEBAABYAAAAb/gBAAEBAABUOgAAdvgBAAEBAABYOgAA
+ffgBAAEBAABUOgAAlvgBAAEBAAASAAAAnfgBAAEBAACfKgAAqvgBAAEBAACJAAAAsfgBAAEBAACF
+AAAAwPgBAAEBAABcOwAAyPgBAAEBAABkOwAA0PgBAAEBAABgOwAA2PgBAAEBAABYAAAA5fgBAAEB
+AABUOgAA7PgBAAEBAABYOgAA8/gBAAEBAABUOgAACfkBAAEBAABoOwAAEfkBAAEBAABwOwAAGfkB
+AAEBAABsOwAAIfkBAAEBAABYAAAALvkBAAEBAABUOgAANfkBAAEBAABYOgAAPPkBAAEBAABUOgAA
+UvkBAAEBAAB0OwAAWvkBAAEBAAB8OwAAYvkBAAEBAAB4OwAAavkBAAEBAABYAAAAd/kBAAEBAABU
+OgAAfvkBAAEBAABYOgAAhfkBAAEBAABUOgAAoPkBAAEBAADKBQAAqPkBAAEBAADGBQAAsPkBAAEB
+AABYAAAAvfkBAAEBAABUOgAAxPkBAAEBAABYOgAAy/kBAAEBAABUOgAA4fkBAAEBAABkOwAA6fkB
+AAEBAABgOwAA8fkBAAEBAABYAAAA/vkBAAEBAABUOgAABfoBAAEBAABYOgAADPoBAAEBAABUOgAA
+IvoBAAEBAAAWBgAAKvoBAAEBAABgOgAAMvoBAAEBAABYAAAAP/oBAAEBAABUOgAARvoBAAEBAABY
+OgAATfoBAAEBAABUOgAAY/oBAAEBAAAmBgAAa/oBAAEBAABkOgAAc/oBAAEBAABYAAAAgPoBAAEB
+AABUOgAAh/oBAAEBAABYOgAAjvoBAAEBAABUOgAAovoBAAEBAAB8OgAAqfoBAAEBAABoOgAAsvoB
+AAEBAAAuBgAAuvoBAAEBAABoOgAAwvoBAAEBAABYAAAAz/oBAAEBAABUOgAA1voBAAEBAABYOgAA
+3foBAAEBAABUOgAA8foBAAEBAAAuBgAA+PoBAAEBAABoOgAAAfsBAAEBAABwOwAACfsBAAEBAABs
+OwAAEfsBAAEBAABYAAAAHvsBAAEBAABUOgAAJfsBAAEBAABYOgAALPsBAAEBAABUOgAAQvsBAAEB
+AAB8OwAASvsBAAEBAAB4OwAAUvsBAAEBAABYAAAAX/sBAAEBAABUOgAAZvsBAAEBAABYOgAAbfsB
+AAEBAABUOgAAg/sBAAEBAAAyBgAAi/sBAAEBAABoOgAAk/sBAAEBAABYAAAAoPsBAAEBAABUOgAA
+p/sBAAEBAABYOgAArvsBAAEBAABUOgAAwvsBAAEBAAAyBgAAyfsBAAEBAABoOgAA0vsBAAEBAAA2
+BgAA2vsBAAEBAABoOgAA4vsBAAEBAABYAAAA7/sBAAEBAABUOgAA9vsBAAEBAABYOgAA/fsBAAEB
+AABUOgAAHfwBAAEBAAAuAAAAAC5kYXRhAC50ZXh0AHJlYWxsb2MAbWFsbG9jAABmcmVlAABzcHJp
+bnRmAG1lbXNldAAAZXhpdAAAbWVtY3B5AABvcGVuAABjbG9zZQBsc2VlawByZWFkAAB3cml0ZQBj
+aGRpcgBnZXRjd2QAAGZwcmludGYAc3RkZXJyAABnZXRlbnYAAGFjY2VzcwAATWVzc2FnZQBwbGF0
+Zm9ybV9mcmVlAGV4aXRNZXNzYWdlAHByZWZleHRyYQBwcmVmZXh0cmFfaGVscGVyAHByZWZzX3Nl
+dABjb21saW5lX3BhcnNlAGNvbWxpbmVfdmFsdWUAY29tbGluZV9wb2ludGVyAG1lbXJlYWxsb2MA
+bWVtX2FsbG9jAG1lbW9yeWFsbG9jAG1lbWFsbG9jAG1lbWNhbGxvYwBtZW1jbXAAc3RybGVuAHBy
+aW50YnVmAGVycm9yRGVmT3V0AG9wZW5maWxlAG9wZW5maWxlX3dyaXRlX2FkZF9leHRlbnNpb24A
+b3BlbmZpbGVfbW9kZV9hZGRfZXh0ZW5zaW9uAHdyaXRlZmlsZQB3cml0ZWZpbGVfZXJydmVyc2lv
+bgByZXF1aXJlZHBhZABwYWR3cml0ZQBwYWRkZWR3cml0ZQBwYWRzZWMAZmlsZXBhdGhkZWxpbXMA
+ZW5kb2Zmb2xkZXJzAGNoYW5nZWRpcgBzZWVrZmlsZQByZWFkZmlsZQBmaWxlX2dldF9jb250ZW50
+X29mcwByZW1haW5kZXIAbmVnAGNsZWFybWVzc2FnZQBzYWZlTWVzc2FnZQBjb21wYXJlYWdhaW5z
+dG1heHBhdGgAZ2V0Y29udABzZXRjb250AGdldHB0cmNvbnQAZ2V0Y29udFJlZwBzZXRjb250UmVn
+AGdldHB0cmNvbnRSZWcAZ2V0Y29udE1heABzZXRjb250TWF4AGdldGNvbnRhbmRjb250UmVnAGdl
+dGNvbnRwbHVzUmVnAGdldHN0cnVjdGNvbnQAZ2V0c3RydWN0Y29udF9zY29wZQBjb25ncnVlbnRt
+b2R1bG9hdHNlZ21lbnRzAGxvZ190ZXJtAGFkZHRvbG9nX3Rlcm0AYWRkdG9sb2dfaGFuZGxlAGFk
+ZHRvbG9nX2NoYXIAYWRkdG9sb2dfd2l0aGNoYXJfaGFuZGxlAGFkZHRvbG9nX3dpdGhjaGFyX2V4
+AGFkZHRvbG9nX3dpdGhjaGFyAGFkZHRvbG9nX2FycmF5X3dpdGhjaGFyAGFkZHRvbG9nX3dpdGhj
+aGFyX3BhcnNlcwBhZGR0b2xvZ193aXRoY2hhcl9leF9hdHVudXNlZABhZGR0b2xvZ193aXRoY2hh
+cl9leF9hdHVudXNlZF9oYW5kbGUAYWRkdG9sb2dfbmF0dXJhbAByZXN0b3JlX2N1cnNvcnNfb25v
+awB3YXJuX29yX2xvZwB3YXJuX29yX2xvZ192YXJzAHZhcnNfbG9nAHZhcnNfbG9nX3Jlc2V0AHZh
+cnNfbG9nX3ByZXBhcmUAdmFyc19jb3JlX3JlZgB2YXJzX2NvcmVfcmVmX3Njb3BlAHZhcnNjb3Jl
+AHZhcnNfaWdub3JlcmVmAHZhcnMAdmFyc19udW1iZXIAc2VhcmNoaW52YXJzAHNlYXJjaGludmFy
+c19zY29wZQBzZWFyY2hpbnZhcnNfc2NvcGVfd2FybgBzdHJpbnZhcnMAc3RyaW52YXJzX2lnbm9y
+ZXJlZgB1bmRlZmluZWR2YXJpYWJsZQB2YXJzdWZpeAB2YXJzdWZpeF9leABzdWZpeF90ZXN0AGNh
+c3RfdGVzdAB0ZW1wZGF0YXBhaXIAY2FzdF9yZXNvbHZlAGFkdmFuY2VjdXJzb3JzAHN0ZXBjdXJz
+b3JzAHN0cmlubWVtAHN0cmF0bWVtAG1lbV9zcGFjZXMAZmluZF93aGl0ZXNwYWNlT1Jjb21tZW50
+AGlzX3doaXRlc3BhY2UAd2Fybl9oaWRkZW5fd2hpdGVzcGFjZXMAd2Fybl9oaWRkZW5fd2hpdGVz
+cGFjZXNfYWZ0ZXIAc3BhY2VzX2hlbHBlcgBzcGFjZXMAc3RyaW5nc2F0bWVtc3BjAHN0cmF0bWVt
+c3BjAHF1b3Rlc2NhcGVkAHF1b3RpZW50aW5tZW0AcXVvdGlubWVtAG1heHBhdGh2ZXJpZgBxdW90
+ZXNfZm9yd2FyZAB2YWxpbm1lbXNlbnMAdmFsaW5tZW0AdmFsaW5tZW1fcGlwZXMAY29tbWFuZFN1
+YnR5cGVEZWNsYXJlX3RvX3R5cGVudW1iZXIAZ2V0Y29tbWFuZABzb3J0Y29tbWFuZHMAc29ydGFs
+bGNvbW1hbmRzAG1heHNlY3Rpb25jaGVjawBhZGR0b3NlYwBhZGR0b0NvZGVfc2V0X3Byb2dyYW1l
+bnRyeXBvaW50AGFkZHRvc2Vjc3RyAGlzX3ZhcmlhYmxlX2NoYXIAaXNfdmFyaWFibGVfY2hhcl9u
+b3RfbnVtZXJpYwBhZGRhcmVmAGFkZF9yZWZfdG9fc2VjAGFkZHRvc2Vjc3RyZXNjAGFkZHRvc2Vj
+c3RyZXNjX3hmaWxlAGFkZHRvc2Vjc3RyZXNjX2Jhc2UAbnVtZXJpYwBtZW10b2ludABoZXhucgBt
+ZW10b2hleABudW1iZXJ0b2ludABnZXRfc2l6ZW9mZnVuY3Rpb24AbnVtYmVyc2NvbnN0YW50cwBw
+YXJlbnRoZXNpc19zaXplAGR3dG9tZW0AY29uc3Rfc2VjdXJpdHkAc2hpZnRfcmlnaHQAc2hpZnRf
+bGVmdABvcGVyYXRpb24Ab3BlcmF0aW9uX2NvcmUAc2lnbm9wAG9uZW9wZXJhdGlvbgBvcGVyYXRp
+b25fdGVzdABwYXJzZW9wZXJhdGlvbnMAcGFyc2VvcGVyYXRpb25zX2Jhc2UAZG91Ymxlb3BlcmF0
+aW9uAGFkZHRvbmFtZXNzaXplZABhZGR0b25hbWVzAGVsZmFkZHNlY19iYXNlAGVsZmFkZHNlY24A
+ZWxmYWRkc2VjcwBlbGZhZGRzZWMAZWxmYWRkc3Ryc2VjAGVsZmFkZHN5bQBlbGZhZGRzdHJzenN5
+bQBlbGZhZGRzdHJzeW0AYWRkcmVsX2Jhc2UAYWRkcmVsAGFkZGRpcmVjdHJlbF9iYXNlAGRhdGFf
+Z2V0X21hc2tiaXQAaW1wb3J0Yml0AHN0YWNrYml0AHN0YWNrcmVsYXRpdmViaXQAZGF0YXBvaW50
+Yml0AGV4cGFuZGJpdABleHBhbmRiaXRfd3JhcABwb2ludGJpdABzdWZmaXhiaXQAc3RhY2tfZ2V0
+X3JlbGF0aXZlAHJvbABmb3JtbW9kcm0AdGFrZXdpdGhpbW0AZGF0YXRha2VfcmVsb2MAZGF0YXRh
+a2UAYWRkZGlyZWN0cmVsX2Jhc2VfaW5wbGFjZQB3cml0ZXRha2UAd3JpdGV0YWtlX29mZnNldAB3
+cml0ZW9wZXJhdGlvbl90YWtlAHN1Zml4X3Rha2UAc3VmaXg2NAB3cml0ZW9wZXJhdGlvbl9vcAB3
+cml0ZW9wZXJhdGlvbgB3cml0ZW9wAHdyaXRlb3BlcmEAc2V0aW1tAHVuc2V0aW1tAGdldGltbQBz
+ZXRpc2ltbQByZXNldGlzaW1tAGdldGlzaW1tAHN0b3JlZmlyc3RfaXNpbW0AcmVzdG9yZWZpcnN0
+X2lzaW1tAGdldGZpcnN0X2lzaW1tAHN3aXRjaGltbQB3cml0ZV9pbW0Ad3JpdGVfaW1tX3NpZ24A
+d3JpdGVfaW1tX3RydW5jAHZlcmlmeV9zeW50YXhfZW5kAGFyZ19zaXplAGV4dGVuZF9hcmdfc2l6
+ZQBleHRlbmRfc3VmaXhfdGVzdABnZXRhcmcAZ2V0YXJnX2RvdF9hbnkAZ2V0YXJnX2RvdABnZXRh
+cmdfY29sb24AZ2V0YXJnX3Rlc3Rkb3QAZ2V0YXJnX2Jhc2UAdGhlcmVfaXNfbm90aGluZ190aGVy
+ZQBnZXRfc2NvcGUAZ2V0X3Njb3BlX3BvcwBmdW5jdGlvbl9pbl9jb2RlAGlzX2NvbnN0YW50X3Jl
+bGF0ZWRfYXNjaWkAYXJnAGFyZ2ZpbHRlcnMAYXJnZmlsdGVyc19oZWxwZXIAcHJlZml4X2Jvb2wA
+Z2V0cmV0dXJuAGdldGV4aXQAYXJndW1lbnRfcmV0dXJuAGFyZ3VtZW50AGNvbXBfb25lAGFyZ3Vt
+ZW50X2luaXQAcmFtcF9pbmRleABzdGFja2ZpbHRlcgBnZXRwdHJyYW1wAGdyb3dyYW1wAGFkZHJh
+bXAAZ2V0cmFtcF9lYnhyZWwAZW50cnlzY29wZQBlbnRyeXNjb3BlX3ZlcmlmeV9jb2RlAGFkZHRv
+Y29kZV9kZWNzdGFjawBhZGR0b2NvZGVmb3JzdGFjawBhZGR0b2NvZGVmb3JkYXRhAGxvY2FsUmVz
+b2x2ZQBnZXRfZm5fcG9zAHVucmVzTGMAdW5yZXNvbHZlZExvY2FsAHVucmVzUmVsb2MAZW50cnl2
+YXJzZm5zAGdldF9pbWdfdmRhdGEAZ2V0X2RhdGFSZWcAZ2V0X2RhdGFTaXplAGdldF9pbWdfdmRh
+dGFfZGF0YVJlZwBnZXRfaW1nX3ZkYXRhX2RhdGFTaXplAGFkZHZhcnJlZmVyZW5jZQBhZGR2YXJy
+ZWZlcmVuY2VvcnVucmVmAGdldHNpZ24AZm5kZWNhcmdzAHdyaXRldmFyAGVudW1jb21tYXMAdW5y
+ZXNvbHZlZGNhbGxzZm4AZm5pbXBfZXhpc3RzAGZ1bmNfeGZpbGUAcGFyc2VmdW5jdGlvbgBmbl90
+ZXh0X2luZm8AcHJlcGFyZV9mdW5jdGlvbl9jYWxsAHdyaXRlX2Z1bmN0aW9uX2NhbGwAZ2xvYmFs
+X2Vycl9wAGdsb2JhbF9lcnJfcEJvb2wAaXNfbGludXhfZW5kAGVudHJ5cmF3X3RvcABhZnRlcmNh
+bGxfbWFuaXB1bGF0ZQB0d29hcmdzAHR3b2FyZ3NfZXgAY29tcF9zZWMAaXNfYmlnX2ltbQB3cml0
+ZW9wZXIAd3JpdGVvcF9wcmltAHdyaXRlb3BfcHJvbW90ZXMAZGl2X3ByZXBhcmUAZGVjbGFyZQBj
+b2RlcmVndG9jb25kbG9vcABjb25kYmVnaW53cml0ZQBjb25kYmVnaW4AY2hlY2tjb25kbG9vcGNs
+b3NlAGNvbmRqdW1wAGNvbmRlbmQAY29uZGVuZHRlc3QAY29uZGVuZHdyaXRlAGp1bXBiYWNrAGNv
+bmRpdGlvbnNjb25kZW5kAHByZXZjb25kAGNsb3NlaWZvcGVuZWxzZQBjb250aW51ZQBicmVhawBv
+cGVubGliAGNsb3NlbGliAHdyaXRlcmV0AGNhbGxyZXRfZmxhZwBhZnRlcl9hZnRlcl9jYWxsAHdh
+cm5pbmdzAHBhcnNlcHJlZmVyZW5jZXMAcGFyc2VwcmVmZXJlbmNlc19iYWNrAHBhcnNlcHJlZmVy
+ZW5jZXNfYmFja19oZWxwZXIAaW5pdHByZWZlcmVuY2VzAHNldHByZWZlcmVuY2VzAGNvbnN0YW50
+c19ib29sAGlucGxhY2VfcmVsb2MAaW5wbGFjZV9yZWxvY191bnJlcwBzZF9hc19zdgBwcmVmX3N0
+b3JlAHByZWZfcmVzdG9yZQBiYWNrdXBfcHJlZgBwX2lzX2Zvcl82NABpc19mb3JfNjQAcF9uZWdf
+aXNfZm9yXzY0AHNjb3BlNjRfcABzY29wZTY0X2dldABzY29wZTY0X3NldABpc19mb3JfNjRfaXNf
+aW1wWF9vcl9mblhfcF9nZXQAaXNfZm9yXzY0X2lzX2ltcFhfb3JfZm5YX2dldABpc19mb3JfNjRf
+aXNfaW1wWF9vcl9mblhfc2V0AGlzX2Zvcl82NF9pc19pbXBYX29yX2ZuWF9zZXRfZm9yY2UAY2Fs
+bHhfZmxhZwBucl9vZl9hcmdzXzY0bmVlZF9wX2dldABucl9vZl9hcmdzXzY0bmVlZF9jb3VudABy
+ZXhfdwByZXhfd19pZjY0AGlzX2JpZwBiaWdiaXRzAHN0YWNrNjRfZW5sYXJnZQBzdGFjazY0X2Jh
+c2UAdmFsNjRfaW5pdAB2YWw2NF9wX2dldABjb252ZGF0YQBmdW5jdGlvbl9jYWxsXzY0Zm0AZnVu
+Y3Rpb25fY2FsbF82NGYAZnVuY3Rpb25fY2FsbF82NABmdW5jdGlvbl9zdGFydF82NABjYWxsZXg2
+NF9jYWxsAHJlbG9jNjRfaW5pdAByZWxvYzY0X29mZnNldAByZWxvYzY0X2FudGUAcmVsb2M2NF9t
+aWQAcmVsb2M2NF9wb3N0X2Jhc2VfZXh0ZW5zaW9uAHJlbG9jNjRfcG9zdF9iYXNlAHJlbG9jNjRf
+cG9zdABhbGlnbl9hbGxvYwBhbGlnbl9mcmVlAHN0YWNrX2FsaWduAHByZWZfY2FsbF9hbGlnbgBh
+bGlnbl9hbnRlAGFsaWduX3Jlc29sdmUAYWxpZ25fcHR5cGUAYWxpZ25fdHlwZQBhbGlnbl9lbnRy
+eXNjb3BlAG9mZnNldG9mZmlsZV92YWx1ZQBpbmNsdWRlAGluY2x1ZGVfc2VjX3NraXAAZGF0YWFz
+c2lnbgB1bmRlZmluZWR2YXJfZm4AZ2V0X2Z1bmN0aW9uX3ZhbHVlAGdldF9mdW5jdGlvbl92YWx1
+ZXMAZ2V0X3Jlc2VydmVfc2l6ZQBzZXRfcmVzZXJ2ZQBlbnVtYmFncwBlbnVtYmFnc19hbGxvYwBl
+bnVtYmFnc19mcmVlAGZyZWVjbG9zZQBtc2dlcnJleGl0AGVycmV4aXQAZXJyb3JleGl0AGltcG9y
+dF9sZWFkaW5nX3VuZGVyc2NvcmUAb3ZlcnJpZGVfY29tAHNjb3Blc19mcmVlAHNjb3Blc19hbGxv
+YwBzY29wZXNfZ2V0X3Njb3BlAHNjb3Blc19zdG9yZQBzY29wZXNfc2VhcmNoaW52YXJzAHNjb3Bl
+c19zdG9yZV9jbGFzcwBzY29wZXNfZ2V0X2NsYXNzX2RhdGEAZ2V0X3Njb3BlX2RhdGFfc2l6ZQBk
+ZWJ1Z19saW5lcwBhZGR0b2RlYnVnX3dpdGhjaGFyAGNvbW1hbmRfc3RhcnQAaV90b19zAHNfdG9f
+aQB4ZmlsZV9hZGRfaW50AHhmaWxlX2FkZF9pbnRfaWYAeGZpbGVfYWRkX2NoYXIAeGZpbGVfYWRk
+X2NoYXJfaWYAeGZpbGVfYWRkX2NoYXJfaWZpZgB4ZmlsZV9hZGRfc3RyaW5nAHhmaWxlX2FkZF9z
+dHJpbmdfaWYAeGZpbGVfYWRkX2Jhc2UAeGZpbGVfYWRkX2Jhc2VfaWYAeGZpbGVfYWRkX2Jhc2Vf
+aWZpZgB4ZmlsZV9hZGRfYmFzZV9hcmVhX2lmAHhmaWxlX2FkZF9jb21tZW50X2lmaWYAeGZpbGVf
+YWRkX2NvbW1lbnRfbXVsdGlfaWZpZgB4ZmlsZV9hZGRfZGVjbGFyZV9pZgB4ZmlsZV9hZGRfZm5k
+ZWZfaWYAeGZpbGVfYWRkX3ZhcnN1Zml4X2lmAHhmaWxlX3ByZXBhcmVfY29tbWFzX2lmAHhmaWxl
+X2luY19jb21tYXNfaWYAeGZpbGVfYWRkX2NvbW1hc19pZgB4ZmlsZV9hZGRfY29tbWFzX2ludGVy
+bmNhbGxfaWYAeGZpbGVfYWRkX2NhbGxfaWYAeGZpbGVfYWRkX2NhbGxyZXQAeGZpbGVfYWRkX2Nh
+bGxyZXRfaWYAeGZpbGVfYWRkX2NhbGxyZXRfaWZpZgBtYWluAC5zeW10YWIALnJlbGEuZGF0YQAu
+cmVsYS50ZXh0AC5zdHJ0YWIA
--- ocompiler-1.orig/src/windows/files/platform.s
+++ ocompiler-1/src/windows/files/platform.s
@@ -24,11 +24,11 @@ function wide_to_ansi(ss in)
 	set out in
 	dec out
 	char n=0;char x#1
-	while 0==0
+	while 0=0
 		inc out
 		set x in#
 		set out# x
-		if x==n
+		if x=n
 			ret
 		endif
 		add in 2
--- ocompiler-1.orig/src/windows/files/winend.s
+++ ocompiler-1/src/windows/files/winend.s
@@ -1,7 +1,7 @@
 
 
 
-If openfilenamemethod==true
+If openfilenamemethod=true
 	Data timeatend#1
 	SetCall timeatend GetTickCount()
 	Sub timeatend timeatbegin
--- ocompiler-1.orig/src/windows/files/wingetfile.s
+++ ocompiler-1/src/windows/files/wingetfile.s
@@ -3,7 +3,7 @@
 Set path_nofree (NULL)
 Include "./wingetfile/getfilefromcommand.s"
 set path_free (NULL)
-If path_nofree==null
+If path_nofree=null
 	#open file name
 	Include "./wingetfile/getfilefromopenfilename.s"
 	set path_nofree path_free
--- ocompiler-1.orig/src/windows/files/wingetfile/getfilefromopenfilename.s
+++ ocompiler-1/src/windows/files/wingetfile/getfilefromopenfilename.s
@@ -8,7 +8,7 @@ Const ofnFlags=OFN_FILEMUSTEXIST|OFN_PAT
 Str ofnfiltermemvalue#1
 
 setcall path_free memalloc(flag_max_path)
-if path_free==(NULL)
+if path_free=(NULL)
 	#memalloc has message
 	call errexit()
 endif
@@ -57,6 +57,6 @@ SetCall openfilenameresult GetOpenFileNa
 
 Call free(ofnfiltermem)
 
-If openfilenameresult==zero
+If openfilenameresult=zero
 	Call msgerrexit("No file selected or an error occurs.")
 EndIf
--- ocompiler-1.orig/src/windows/files/wingetfile/getfilefromopenfilename/lpstrFilter.s
+++ ocompiler-1/src/windows/files/wingetfile/getfilefromopenfilename/lpstrFilter.s
@@ -18,7 +18,7 @@ Add ofnfiltersize filter2sz
 Add ofnfiltersize bytesize
 Add ofnfiltersize bytesize
 SetCall ofnfiltermemvalue memalloc(ofnfiltersize)
-If ofnfiltermemvalue==null
+If ofnfiltermemvalue=null
 	Call errexit()
 EndIf
 Str cursor#1
--- ocompiler-1.orig/tests/a
+++ ocompiler-1/tests/a
@@ -3,6 +3,8 @@ if [ -z "${OCOMP}" ]; then OCOMP=../src/
 
 #edb(0=also ocomp),ex(exec),win,old(for32),onlycomp
 
+OFLAGS+=" nul_res_pref 1"
+
 comp () {
 	if [ "${edb}" = "0" ]; then
 		edb --run ${OCOMP} ${1}.s ${OFLAGS} || exit 1
@@ -14,7 +16,7 @@ if [ -z "${ex}" ]; then
 	if [ -z "${OLINK}" ]; then OLINK=../ounused/ounused; fi
 
 	if [ -n "${win}" ]; then
-		OFLAGS+="inplace_reloc 0"
+		OFLAGS+=" inplace_reloc 0"
 		if [ -z "${old}" ]; then OFLAGS+=" conv_64 2"; fi
 	#else underscore_pref 1
 	fi
--- /dev/null
+++ ocompiler-1/tests/xf/cond.s
@@ -0,0 +1,22 @@
+
+format elfobj64
+
+if 1=1
+elseif 1=1
+endelseif
+while 1=1
+break
+continue
+endwhile
+
+if 1>=^1
+elseif 1<^1
+elseif 1!=1
+elseif 1=1
+elseif 1>^1
+elseif 1<=^1
+elseif 1>=1
+elseif 1<1
+elseif 1>1
+elseif 1<=1
+endelseif
