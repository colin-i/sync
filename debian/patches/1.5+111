Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+111) xenial; urgency=medium
 .
   * xfile
Author: bc <bc@bc-Type1ProductConfigId>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2023-12-04

--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -930,7 +930,7 @@
   </div>
 </p>
 <h3><a name="xfile">XV. X Syntax</a></h3>
-<p>Black = 1 byte. <span class="blue">Blue = 4 bytes = data.</span> <span class="red">Red = string = data+byte(s).</span>
+<p>Black = 1 byte. <span class="blue">Blue = 4 bytes = data.</span> <span class="red">Red = string = data[+byte(s)].</span>
 <span class="green">Green = replacement.</span></p>
 <table id="selection_table">
 	<tr><td>Xfile_comment*</td><td class="red">comment</td></tr>
@@ -939,8 +939,8 @@
 	<tr><td>Xfile_format</td><td>Xfile_format_*</td></tr>
 </table>
 <table id="selection_table">
-	<tr><td rowspan=2>Xfile_include</td><td rowspan=2>Xfile_include_normal<br>Xfile_include_extern</td><td class="red"rowspan=2>file</td><td colspan=2>Xfile_include_alternative_no</td></tr>
-	<tr>                                                                                                                                 <td>Xfile_include_alternative_yes</td>         <td class="red">file</td></tr>
+	<tr><td rowspan=2>Xfile_include</td><td rowspan=2>Xfile_include_normal<br>Xfile_include_extern</td><td class="red"rowspan=2>file<sup-r>s</sup-r></td><td colspan=2>Xfile_include_alternative_no</td></tr>
+	<tr>                                                                                                                                                 <td>Xfile_include_alternative_yes</td>         <td class="red">file<sup-r>s</sup-r></td></tr>
 </table>
 <table id="selection_table">
 	<tr><td rowspan=2>Xfile_functiondef</td><td class="red" rowspan=2>name</td><td>Xfile_function_t*</td><td></td>                  <td class="blue" rowspan=2>nr_of_args</td><td class="green" rowspan=2>{D}</td></tr>
@@ -974,12 +974,33 @@
 	<tr><td>Xfile_end</td></tr>
 </table>
 <table id="selection_table">
+	<tr><td>Xfile_ret</td></tr>
+</table>
+<table id="selection_table">
+	<tr><td>Xfile_library</td><td class="red">library<sup-r>s</sup-r></td></tr>
+</table>
+<table id="selection_table">
+	<tr><td>Xfile_import</td><td>Xfile_import_*</td><td class="red">extern<sup-r>s</sup-r></td><td class="red">intern<sup-r>s</sup-r></td></tr>
+</table>
+<table id="selection_table">
 	<tr><td rowspan=4>Xfile_aftercall</td><td>Xfile_aftercall_declare</td><td>Xfile_declfeature_normal<br>Xfile_declfeature_unref</td><td class="red">var</td></tr>
 	<tr>                                  <td>Xfile_aftercall_import</td> <td class="red">var</td></tr>
 	<tr>                                  <td>Xfile_aftercall_enable</td></tr>
 	<tr>                                  <td>Xfile_aftercall_disable</td></tr>
 </tr>
 </table>
+<table id="selection_table">
+	<tr><td>Xfile_hex</td><td class="blue">nr_of_args</td><td class="green">{N}</td></tr>
+</table>
+<table id="selection_table">
+	<tr><td>Xfile_override</td><td class="red">name</td><td>value</td></tr>
+</table>
+<table id="selection_table">
+	<tr><td>Xfile_orphan</td><td>Xfile_orphan_*</td></tr>
+</table>
+<table id="selection_table">
+	<tr><td>Xfile_interrupt</td></tr>
+</table>
 <br>Table A:
 <table id="selection_table">
 	<tr><td>Xfile_arg_number</td><td class="green">N</td></tr>
--- ocompiler-1.orig/old
+++ ocompiler-1/old
@@ -1,5 +1,6 @@
-File ID: 10roEk-tuk6POWtpOB25MFyFoqmbAhzie
+File ID: 18QL85KhT36MCDaAHvb1sYiTriMAmBu27
 [{'id': 'anyoneWithLink', 'type': 'anyone', 'kind': 'drive#permission', 'role': 'reader', 'allowFileDiscovery': False}, {'id': '04979898612943849512', 'type': 'user', 'kind': 'drive#permission', 'role': 'owner'}]
+Found file: ocompiler-1-5+109.x86_64.rpm, 18QL85KhT36MCDaAHvb1sYiTriMAmBu27, 2023-11-30T13:27:20.209Z, https://drive.google.com/uc?id=18QL85KhT36MCDaAHvb1sYiTriMAmBu27&export=download
 Found file: ocompiler-1-5+108.x86_64.rpm, 10roEk-tuk6POWtpOB25MFyFoqmbAhzie, 2023-11-29T15:28:07.278Z, https://drive.google.com/uc?id=10roEk-tuk6POWtpOB25MFyFoqmbAhzie&export=download
 Found file: ocompiler-1-5+107.x86_64.rpm, 1E16Y8q6SiNmf4pcKMDp_ZFrnnomaoSgw, 2023-11-26T09:02:42.259Z, https://drive.google.com/uc?id=1E16Y8q6SiNmf4pcKMDp_ZFrnnomaoSgw&export=download
 Found file: ocompiler-1-5+105.x86_64.rpm, 1GCbazf8mz5iyI5CgImI0SMcA2onhyji7, 2023-11-25T16:40:31.101Z, https://drive.google.com/uc?id=1GCbazf8mz5iyI5CgImI0SMcA2onhyji7&export=download
--- ocompiler-1.orig/src/files/actions/main/index.s
+++ ocompiler-1/src/files/actions/main/index.s
@@ -179,14 +179,15 @@ if errormsg=(noerror)
 				Include "./index/conditions.s"
 			ElseIf commandset=(cIMPORTLINK)
 				if parses=(pass_init);Include "./index/import.s"
-				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
+				else;setcall errormsg xfile_add_import_if(pcontent,pcomsize,subtype);endelse
 			ElseIf commandset=(cSTARTFUNCTION)
 				Include "./index/function.s"
 			ElseIf commandset=(cENDFUNCTION)
 				setcall errormsg endfunction(parses)
 			ElseIf commandset=(cRET)
 		call entryscope_verify_code()
-				setcall errormsg writeret()
+				setcall errormsg xfile_add_char_if((Xfile_ret));if errormsg=(noerror)
+					setcall errormsg writeret();endif
 			ElseIf commandset=(cINCLUDELINK)
 				Include "./index/include.s"
 			ElseIf commandset=(cFORMAT)
@@ -207,13 +208,13 @@ if errormsg=(noerror)
 				Include "./index/callex.s"
 			ElseIf commandset=(cLIBRARY)
 				if parses=(pass_init);Include "./index/library.s"
-				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
+				else;setcall errormsg xfile_add_library_if(pcontent,pcomsize);endelse
 			ElseIf commandset=(cHEX)
 		call entryscope_verify_code()
 				Include "./index/hex.s"
 			ElseIf commandset=(cOVERRIDE)
 				#is at all, example at write hidden_pref
-				setcall errormsg override_com(#content,#comsize)
+				setcall errormsg override_com(#content,#comsize,parses)
 			ElseIf commandset=(cORPHAN)
 				Include "./index/warning.s"
 			ElseIf commandset=(cI3)
--- ocompiler-1.orig/src/files/actions/main/index/hex.s
+++ ocompiler-1/src/files/actions/main/index/hex.s
@@ -1,3 +1,8 @@
 
-
-setcall errormsg enumcommas(pcontent,pcomsize,pcomsize#,(fndecandgroup),(charnumber),(NULL),(hexenum)) #there are 4 more arguments but are not used
+setcall errormsg xfile_add_char_if((Xfile_hex))
+if errormsg=(noerror)
+	setcall errormsg enumcommas(pcontent,pcomsize,pcomsize#,(fndecandgroup),(charnumber),(NULL),(hexenum)) #there are 4 more arguments but are not used
+	if errormsg=(noerror)
+		setcall errormsg xfile_add_commas_if()
+	endif
+endif
--- ocompiler-1.orig/src/files/actions/main/index/i3.s
+++ ocompiler-1/src/files/actions/main/index/i3.s
@@ -1,6 +1,7 @@
 
-If comsize=zero
+SetCall errormsg xfile_add_char_if((Xfile_interrupt))
+if errormsg=(noerror)
 	Char interrupt={0xCC}
-	Str ptrinterrupt^interrupt
+	vStr ptrinterrupt^interrupt
 	SetCall errormsg addtosec(ptrinterrupt,bytesize,ptrcodesec)
 endif
--- ocompiler-1.orig/src/files/actions/main/index/import.s
+++ ocompiler-1/src/files/actions/main/index/import.s
@@ -54,7 +54,6 @@ If errormsg=noerr
 				sd imp_mark;set imp_mark namesReg ##this is because the null at end makes code harder
 				SetCall errormsg addtosecstresc(pcontent,pcomsize,impquotsz,impescapes,ptrnames,true)
 				If errormsg=noerr
-					Call stepcursors(pcontent,pcomsize)
 					Call spaces(pcontent,pcomsize)
 					#after this will find var in vars/fns and if not add a new
 					sd imp_size;setcall imp_size find_whitespaceORcomment(content,comsize)
--- ocompiler-1.orig/src/files/actions/main/index/include.s
+++ ocompiler-1/src/files/actions/main/index/include.s
@@ -37,7 +37,6 @@ if errormsg=noerr
 			if errormsg=noerr
 				SetCall errormsg addtosecstresc_xfile(pcontent,pcomsize,quotsz,escapes,ptrmiscbag)
 				If errormsg=noerr
-					Call stepcursors(pcontent,pcomsize)
 					Set includebool one
 					if include_sec=(FALSE)
 						SetCall errormsg include_sec_skip(pcontent,pcomsize)
--- ocompiler-1.orig/src/files/actions/main/index/library.s
+++ ocompiler-1/src/files/actions/main/index/library.s
@@ -31,7 +31,6 @@ If errormsg=noerr
 	If errormsg=noerr
 		SetCall errormsg addtosecstresc(pcontent,pcomsize,libquotsz,libescapes,ptrnames,true)
 		If errormsg=noerr
-			Call stepcursors(pcontent,pcomsize)
 			Set implibsstarted true
 		EndIf
 		#endif
--- ocompiler-1.orig/src/files/actions/main/index/warning.s
+++ ocompiler-1/src/files/actions/main/index/warning.s
@@ -1,14 +1,19 @@
 
-Data warningsboolptr%ptrwarningsbool
-sd warning_bool
-setcall warning_bool stratmem(pcontent,pcomsize,"ON")
-if warning_bool=(TRUE)
-	set warningsboolptr# (TRUE)
-else
-	setcall warning_bool stratmem(pcontent,pcomsize,"OFF")
+setcall errormsg xfile_add_char_ifif((Xfile_orphan))
+if errormsg=(noerror)
+	Data warningsboolptr%ptrwarningsbool
+	sd warning_bool
+	setcall warning_bool stratmem(pcontent,pcomsize,"ON")
 	if warning_bool=(TRUE)
-		set warningsboolptr# (FALSE)
+		set warningsboolptr# (TRUE)
+		setcall errormsg xfile_add_char_ifif((Xfile_orphan_yes))
 	else
-		set errormsg "Expecting 'on' or 'off' command"
+		setcall warning_bool stratmem(pcontent,pcomsize,"OFF")
+		if warning_bool=(TRUE)
+			set warningsboolptr# (FALSE)
+			setcall errormsg xfile_add_char_ifif((Xfile_orphan_no))
+		else
+			set errormsg "Expecting 'on' or 'off' command"
+		endelse
 	endelse
-endelse
+endif
--- ocompiler-1.orig/src/files/functions/actions/enumcomma.s
+++ ocompiler-1/src/files/functions/actions/enumcomma.s
@@ -193,6 +193,8 @@ Function enumcommas(sv ptrcontent,sd ptr
 				call nr_of_args_64need_count()
 			endif
 
+			sd size_aux
+			sd mark
 			if sz!=0
 				set argsize content
 				dec argsize
@@ -216,19 +218,32 @@ Function enumcommas(sv ptrcontent,sd ptr
 							dec argsize
 						endelse
 					endwhile
+					set mark argsize
 					sub argsize content
 					neg argsize
+					set size_aux sz
+					sub size_aux argsize
+					setcall size_aux valinmemsens(mark,size_aux,comma,sens) #better than set size_aux 0
 				else
 					SetCall argsize valinmemsens(content,sz,comma,sens)
+					#and don't let ( ) at getarg, there let only something(exlcuding spaces)/nothing like in all cases
+					set size_aux content
+					sub size_aux argsize
+					set mark size_aux
+					setcall size_aux mem_spaces(size_aux,content)
+					sub size_aux mark
+					sub argsize size_aux
 				endelse
 			else
+			#(,a)
 				set argsize 0
+				#this will be error, don't bother. set size_aux 0
 			endelse
 
 			#here, advancecursors is not ok
 			sub ptrcontent# argsize
 			sub ptrsize# argsize
-			Data ptrargsize^argsize
+			vData ptrargsize^argsize
 			if typenumberOrparses=(pass_init)
 				setcall err getarg(ptrcontent,ptrargsize,argsize,(allow_later),sens) #there are 4 more arguments but are not used
 				If err!=noerr
@@ -240,6 +255,9 @@ Function enumcommas(sv ptrcontent,sd ptr
 					Return err
 				EndIf
 			endelseif
+			sub ptrcontent# size_aux
+			sub ptrsize# size_aux
+			add argsize size_aux
 		EndElse
 		Sub sz argsize
 		If sz!=zero
--- ocompiler-1.orig/src/files/functions/add/addstresc.s
+++ ocompiler-1/src/files/functions/add/addstresc.s
@@ -70,6 +70,8 @@ Function addtosecstresc_base(sd pcontent
 		Set destloc# zero
 	EndIf
 
+	call stepcursors(pcontent,psize)
+
 	if write_to_xfile=(TRUE)
 		#ifif only for include tag
 		setcall errnr xfile_add_string_ifif(xfileloc,xfilesz)
--- ocompiler-1.orig/src/files/functions/argument/arg.s
+++ ocompiler-1/src/files/functions/argument/arg.s
@@ -1,14 +1,21 @@
 
-function verify_syntax_end(sd ptrcontent,sd ptrsize,sd argsize,sd *data2)
-	Call advancecursors(ptrcontent,ptrsize,argsize)
+function verify_syntax_end_and_restore(sv ptrcontent,sd ptrsize,sd argsize)
+	sd c
+	sd s
+	set c ptrcontent#
+	set s ptrsize#
+
 	Call spaces(ptrcontent,ptrsize)
 	data z=0
 	if ptrsize#!=z
 		str er="Unrecognized inner text."
 		return er
 	endif
-	data noer=noerror
-	return noer
+	sub c argsize
+	add s argsize
+	set ptrcontent# c
+	set ptrsize# s
+	return (noerror)
 endfunction
 
 #err
@@ -24,9 +31,9 @@ function arg_size(ss content,sd sizetove
 	Else
 		Set p_argsize# szargtab
 	EndElse
-	if p_argsize#=0
-		return "Expecting argument name."  #this is good only at: call a( , )
-	endif
+	#was resolved at push enumcomma. if p_argsize#=0
+	#	return "Expecting argument name."  #this is good at BACKWARD, call a( )
+	#endif
 	return (noerror)
 endfunction
 
@@ -88,13 +95,13 @@ Function getarg(sv ptrcontent,sd ptrsize
 	data false=0
 
 	Set content ptrcontent#
-	set size ptrsize#
 
 	sd prefix
 	if content#=d_q
 		sd q_size
 		sd escapes
-		SetCall errnr quotinmem(#content,#size,#q_size,#escapes)
+		set size ptrsize#
+		SetCall errnr quotinmem(#content,#size,#q_size,#escapes) #this has a stepcursors
 		If errnr!=(noerror)
 			return errnr
 		endif
@@ -119,23 +126,31 @@ Function getarg(sv ptrcontent,sd ptrsize
 			sd location
 			set location ptrdata#
 			setcall location# get_img_vdata_dataReg()
+
 			#set string to data
 			data ptrdatasec%%ptr_datasec
-			SetCall errnr addtosecstresc_xfile(#content,#size,q_size,escapes,ptrdatasec)
+			set ptrcontent# content
+			set ptrsize# size
+			SetCall errnr addtosecstresc_xfile(ptrcontent,ptrsize,q_size,escapes,ptrdatasec)
 			If errnr!=(noerror)
 				return errnr
 			endif
-			#argsize for advancing
-			set argsize 2
-			add argsize q_size
 			#set low and sufix
 			set ptrlow# (FALSE)
 			set ptrsufix# (sufix_false)
 			#the code operation is a "prefix" like
 			setcall prefix prefix_bool()
 			set prefix# 1
+
+			#advancing
+			if sens=(FORWARD)
+				return (noerror)
+			endif
+			add q_size 2
+			setcall errnr verify_syntax_end_and_restore(ptrcontent,ptrsize,q_size)
+			return errnr
 		endelse
-	elseif allowdata!=(allow_later)  #exclude pass_init
+	elseif allowdata!=(allow_later)  #exclude pass_init, but even there jump over first arg
 		setcall errnr arg_size(content,argsize,#argsize)  #spc,tab
 		If errnr!=(noerror)
 			Return errnr
@@ -182,130 +197,131 @@ Function getarg(sv ptrcontent,sd ptrsize
 
 				if sens=(FORWARD)
 					return (noerror)
-				else
-					sd back=-1
-					mult back argsize
-					call advancecursors(ptrcontent,ptrsize,back)
-				endelse
-			else
-				sd imm;setcall imm getimm()
-				if imm=(TRUE) #if is FALSE, this is the only option for xfile. also allow(string) is no
-				#then, this is a test at allow yes; also at allow no for conditions
-					setcall errnr xfile_add_char_if((Xfile_arg_varfn))
-					if errnr!=(noerror)
-						return errnr
-					endif
 				endif
-				if allowdata=(allow_yes)
-					#at last/only argument it is better to allow space before sufix to not regret later
-					#"##" will be a comment and "#" a sufix
-					call extend_arg_size(content,size,#argsize)
+				setcall errnr verify_syntax_end_and_restore(ptrcontent,ptrsize,argsize)
+				return errnr
+			endif
+			sd imm;setcall imm getimm()
+			if imm=(TRUE) #if is FALSE, this is the only option for xfile. also allow(string) is no
+			#then, this is a test at allow yes; also at allow no for conditions
+				setcall errnr xfile_add_char_if((Xfile_arg_varfn))
+				if errnr!=(noerror)
+					return errnr
 				endif
-				sd argsize_filter
-				sd container_sz
-				if content#=(pointerascii)
-					setcall errnr xfile_add_char_if((Xfile_arg_varfn_prefix_yes))
-					if errnr=(noerror)
-						#prefix
-						setcall prefix prefix_bool()
-						set prefix# 1
-						inc content
-						set argsize_filter argsize
-						dec argsize_filter
-
-						#class test
-						setcall container_sz valinmem(content,argsize_filter,(asciicolon))
-						if container_sz!=argsize_filter
-							setcall errnr getarg_colon(content,argsize_filter,container_sz,ptrdata,ptrlow,ptrsufix)
+			endif
+			if allowdata=(allow_yes)
+				#at last/only argument it is better to allow space before sufix to not regret later
+				#"##" will be a comment and "#" a sufix
+				set size ptrsize#
+				call extend_arg_size(content,size,#argsize)
+			endif
+			sd argsize_filter
+			sd container_sz
+			if content#=(pointerascii)
+				setcall errnr xfile_add_char_if((Xfile_arg_varfn_prefix_yes))
+				if errnr=(noerror)
+					#prefix
+					setcall prefix prefix_bool()
+					set prefix# 1
+					inc content
+					set argsize_filter argsize
+					dec argsize_filter
+
+					#class test
+					setcall container_sz valinmem(content,argsize_filter,(asciicolon))
+					if container_sz!=argsize_filter
+						setcall errnr getarg_colon(content,argsize_filter,container_sz,ptrdata,ptrlow,ptrsufix)
+					else
+						setcall errnr xfile_add_char_if((Xfile_arg_varfn_colon_no))
+						if errnr=(noerror)
+							setcall errnr getarg_testdot(content,argsize_filter,ptrdata,ptrlow,ptrsufix)
 						else
-							setcall errnr xfile_add_char_if((Xfile_arg_varfn_colon_no))
-							if errnr=(noerror)
-								setcall errnr getarg_testdot(content,argsize_filter,ptrdata,ptrlow,ptrsufix)
-							else
-								return errnr
-							endelse
+							return errnr
 						endelse
+					endelse
+					if errnr!=(noerror)
+						return errnr
+					endif
+				else
+					return errnr
+				endelse
+			else
+				setcall errnr xfile_add_char_if((Xfile_arg_varfn_prefix_no))
+				if errnr=(noerror)
+					data ptrobject%ptrobject
+					data ptrfunctions%%ptr_functions
+
+					#class test
+					setcall container_sz valinmem(content,argsize,(asciicolon))
+					if container_sz!=argsize
+						setcall errnr getarg_colon(content,argsize,container_sz,ptrdata,ptrlow,ptrsufix)
 						if errnr!=(noerror)
 							return errnr
 						endif
 					else
-						return errnr
-					endelse
-				else
-					setcall errnr xfile_add_char_if((Xfile_arg_varfn_prefix_no))
-					if errnr=(noerror)
-						data ptrobject%ptrobject
-						data ptrfunctions%%ptr_functions
-
-						#class test
-						setcall container_sz valinmem(content,argsize,(asciicolon))
-						if container_sz!=argsize
-							setcall errnr getarg_colon(content,argsize,container_sz,ptrdata,ptrlow,ptrsufix)
-							if errnr!=(noerror)
-								return errnr
-							endif
-						else
-							setcall errnr xfile_add_char_if((Xfile_arg_varfn_colon_no))
-							if errnr=(noerror)
-								setcall container_sz valinmem(content,argsize,(asciidot))
-								if container_sz!=argsize
-									setcall errnr getarg_dot(content,argsize,container_sz,ptrdata,ptrlow,ptrsufix)
-									if errnr!=(noerror)
-										return errnr
-									endif
-								else
-									SetCall errnr varsufix(content,argsize,ptrdata,ptrlow,ptrsufix)
-									if errnr!=(noerror)
-										if ptrobject#=1
-											sd undvar_err
-											setcall undvar_err undefinedvariable()
-											if errnr=undvar_err
-												#verify for function
-												setcall ptrdata# vars(content,argsize,ptrfunctions)
-												if ptrdata#!=(NULL)
-													setcall errnr xfile_add_string_if(content,argsize)
-													if errnr=(noerror)
-														set ptrlow# (FALSE)
-														set ptrsufix# (sufix_false)
-														sd var
-														setcall var function_in_code()
-														set var# 1
-														#the code operation is a "prefix" like
-														setcall prefix prefix_bool()
-														set prefix# 1
-													else
-														return errnr
-													endelse
+						setcall errnr xfile_add_char_if((Xfile_arg_varfn_colon_no))
+						if errnr=(noerror)
+							setcall container_sz valinmem(content,argsize,(asciidot))
+							if container_sz!=argsize
+								setcall errnr getarg_dot(content,argsize,container_sz,ptrdata,ptrlow,ptrsufix)
+								if errnr!=(noerror)
+									return errnr
+								endif
+							else
+								SetCall errnr varsufix(content,argsize,ptrdata,ptrlow,ptrsufix)
+								if errnr!=(noerror)
+									if ptrobject#=1
+										sd undvar_err
+										setcall undvar_err undefinedvariable()
+										if errnr=undvar_err
+											#verify for function
+											setcall ptrdata# vars(content,argsize,ptrfunctions)
+											if ptrdata#!=(NULL)
+												setcall errnr xfile_add_string_if(content,argsize)
+												if errnr=(noerror)
+													set ptrlow# (FALSE)
+													set ptrsufix# (sufix_false)
+													sd var
+													setcall var function_in_code()
+													set var# 1
+													#the code operation is a "prefix" like
+													setcall prefix prefix_bool()
+													set prefix# 1
 												else
-													setcall errnr undefinedvar_fn()
 													return errnr
 												endelse
 											else
+												setcall errnr undefinedvar_fn()
 												return errnr
 											endelse
 										else
 											return errnr
 										endelse
-									endif
-								endelse
-							else
-								return errnr
+									else
+										return errnr
+									endelse
+								endif
 							endelse
+						else
+							return errnr
 						endelse
-					else
-						return errnr
 					endelse
+				else
+					return errnr
 				endelse
 			endelse
+			Call advancecursors(ptrcontent,ptrsize,argsize)
+			if sens=(FORWARD)
+				return (noerror)
+			endif
+			setcall errnr verify_syntax_end_and_restore(ptrcontent,ptrsize,argsize)
+			return errnr
 		endif
 	endelseif
 	If sens=(FORWARD)
 		Call advancecursors(ptrcontent,ptrsize,argsize)
-		Return noerr
 	endIf
-	data f^verify_syntax_end
-	setcall errnr restore_cursors_onok(ptrcontent,ptrsize,f,argsize)
-	return errnr
+	return (noerror)
 EndFunction
 #err
 function getarg_dot_any(sd content,sd argsize,sd container_sz,sd ptrdata,sd ptrlow,sd ptrsufix)
--- ocompiler-1.orig/src/files/functions/commons/base.s
+++ ocompiler-1/src/files/functions/commons/base.s
@@ -249,18 +249,3 @@ function addtolog_natural(sd number)
 	sd err;setcall err addtolog_withchar(#buf,(log_expand))
 	return err
 endfunction
-
-function restore_cursors_onok(sd ptrcontent,sd ptrsize,sd forward,sd data1,sd data2)
-	sd c
-	sd s
-	set c ptrcontent#
-	set s ptrsize#
-	sd err
-	data noerr=noerror
-	setcall err forward(ptrcontent,ptrsize,data1,data2)
-	if err=noerr
-		set ptrcontent# c
-		set ptrsize# s
-	endif
-	return err
-endfunction
--- ocompiler-1.orig/src/files/functions/commons/getcommand.s
+++ ocompiler-1/src/files/functions/commons/getcommand.s
@@ -295,12 +295,12 @@ Const numberofcommandsvars=(!-commandsva
 			Data *=spacenotreq
 	Const cIMPORTLINK=!-coms_start
 	Const cIMPORTLINK_top=!
-		const cIMPORT=!-cIMPORTLINK_top
+		const cIMPORT=Xfile_import_normal
 			data *^cIMPORT_c
 			Data *=cIMPORTLINK
 			Data *=cIMPORT
 			Data *=spacereq
-		const cIMPORTX=!-cIMPORTLINK_top
+		const cIMPORTX=Xfile_import_extern
 			data *^cIMPORTX_c
 			Data *=cIMPORTLINK
 			Data *=cIMPORTX
--- ocompiler-1.orig/src/files/functions/commons/strcommons.s
+++ ocompiler-1/src/files/functions/commons/strcommons.s
@@ -117,17 +117,6 @@ Function stratmem(data pcontent,data psi
 	Return one
 EndFunction
 
-#pointer
-function mem_spaces(ss content,ss last)
-	while content!=last
-		sd bool;setcall bool is_whitespace(content#)
-		if bool=(FALSE)
-			return content
-		endif
-		inc content
-	endwhile
-	return content
-endfunction
 #new size
 function find_whitespaceORcomment(ss content,sd size)
 #size is greater than zero but this is not a problem here
@@ -190,6 +179,17 @@ function warn_hidden_whitespaces_after(s
 	return (noerror)
 endfunction
 
+#pointer
+function mem_spaces(ss content,ss last)
+	while content!=last
+		sd bool;setcall bool is_whitespace(content#)
+		if bool=(FALSE)
+			return content
+		endif
+		inc content
+	endwhile
+	return content
+endfunction
 Function spaces_helper(ss cursor,sd size)
 	sd end;set end cursor;add end size
 	while cursor!=end
--- ocompiler-1.orig/src/files/functions/dataassign.s
+++ ocompiler-1/src/files/functions/dataassign.s
@@ -418,9 +418,6 @@ Function dataassign(sd ptrcontent,sd ptr
 		SetCall err quotinmem(ptrcontent,ptrsize,ptrvalue,#escapes)
 		if punitsize=(NULL)
 			SetCall err addtosecstresc_xfile(ptrcontent,ptrsize,value,escapes,ptrdatasec)
-			if err=(noerror)
-				Call stepcursors(ptrcontent,ptrsize)
-			endif
 			return err
 		else
 			sub value escapes
--- ocompiler-1.orig/src/files/functions/include.s
+++ ocompiler-1/src/files/functions/include.s
@@ -174,7 +174,6 @@ function include_sec_skip(sv pcontent,sd
 			if err=(noerror)
 				Value ptrtemp%%ptr_tempdata
 				setcall err addtosecstresc_xfile(pcontent,pcomsize,sz,escapes,ptrtemp) #misc has first include file, and is ok with casts
-				call stepcursors(pcontent,pcomsize) #only mem/file write errors
 			endif
 		endif
 	else
--- ocompiler-1.orig/src/files/functions/inits.s
+++ ocompiler-1/src/files/functions/inits.s
@@ -1,14 +1,13 @@
 
 
 #err
-function prefs_set(ss name,ss value)
+function prefs_set(ss name,ss value,sv p_p)
 	sd err
-	sd p
-	setcall err comline_pointer(name,#p)
+	setcall err comline_pointer(name,p_p)
 	if err!=(noerror)
 		return err
 	endif
-	setcall err comline_value(value,p)
+	setcall err comline_value(value,p_p#)
 	return err
 endfunction
 #err
@@ -27,7 +26,7 @@ function comline_parse(sd argc,sv argv)
 			endif
 			sd value
 			set value argv#
-			setcall err prefs_set(name,value)
+			sd p;setcall err prefs_set(name,value,#p) #p here is not required but at xfile is, and is faster this way
 			if err!=(noerror)
 				return err
 			endif
@@ -49,7 +48,7 @@ function comline_value(ss v,sd p)
 					set p# input
 					return (noerror)
 				endif
-				return "a command line value can have only 0,1,2 or 3"
+				return "a command line value can have only 0,1,2 or 3" #also connected to xfile output
 			endif
 			return "command line value must have only one digit"
 		endif
--- ocompiler-1.orig/src/files/functions/override.s
+++ ocompiler-1/src/files/functions/override.s
@@ -1,6 +1,6 @@
 
 #err
-function override_com(sd pcontent,sd psize)
+function override_com(sd pcontent,sd psize,sd parses)
 	sd name
 	sd namesize
 	setcall namesize valinmem(pcontent#,psize#,(asciispace))
@@ -29,9 +29,12 @@ function override_com(sd pcontent,sd psi
 		ss value;set value p
 		call memtomem(p,pcontent#,valuesize);add p valuesize
 		set p# 0
-		setcall err prefs_set(mem,value)
+		ss pointer;setcall err prefs_set(mem,value,#pointer) #pointer here is not required but at xfile is, and is faster this way
 		if err=(noerror)
 			call advancecursors(pcontent,psize,valuesize)
+			if parses=(pass_write)
+				setcall err xfile_add_override_if(mem,namesize,pointer#)
+			endif
 		endif
 		call free(mem)
 	endif
--- ocompiler-1.orig/src/files/functions/xfile_details.s
+++ ocompiler-1/src/files/functions/xfile_details.s
@@ -266,11 +266,61 @@ function xfile_add_format_if(sd format,s
 endfunction
 
 #err
-#function xfile_add_import_if(sv pcontent,sd psize)
-#	if main.xfile!=(openno)
-#		Datax impquotsz#1
-#		Datax impescapes#1
-#		#the spelling errors were at pass init
-#		Call quotinmem(pcontent,psize,#impquotsz,#impescapes)
-#	return (noerror)
-#endfunction
+function xfile_add_import_if(sv pcontent,sd psize,sd subtype)
+	if main.xfile!=(openno)
+		sd err
+		setcall err xfile_add_char((Xfile_import))
+		if err=(noerror)
+			setcall err xfile_add_char(subtype)
+			if err=(noerror)
+				Datax impquotsz#1
+				Datax impescapes#1
+				#the spelling errors were at pass init
+				Call quotinmem(pcontent,psize,#impquotsz,#impescapes)
+				setcall err addtosecstresc_xfile(pcontent,psize,impquotsz,impescapes,main.ptrtempdata)
+				if err=(noerror)
+					Call spaces(pcontent,psize)
+					sd imp_size;setcall imp_size find_whitespaceORcomment(pcontent#,psize#)
+					setcall err xfile_add_string(pcontent#,imp_size) #not a spelling error
+					call advancecursors(pcontent,psize,psize#) #,imp_size  spelling was at pass_init
+				endif
+			endif
+		endif
+		return err
+	endif
+	call advancecursors(pcontent,psize,psize#)
+	return (noerror)
+endfunction
+
+#err
+function xfile_add_library_if(sv pcontent,sd psize)
+	if main.xfile!=(openno)
+		sd err
+		setcall err xfile_add_char((Xfile_library))
+		if err=(noerror)
+			Datax impquotsz#1
+			Datax impescapes#1
+			#the spelling errors were at pass init
+			Call quotinmem(pcontent,psize,#impquotsz,#impescapes)
+			setcall err addtosecstresc_xfile(pcontent,psize,impquotsz,impescapes,main.ptrtempdata)
+			#here a low chances error, not a spelling error, spelling was at pass init
+			call advancecursors(pcontent,psize,psize#)
+		endif
+		return err
+	endif
+	call advancecursors(pcontent,psize,psize#)
+	return (noerror)
+endfunction
+
+#err
+function xfile_add_override_if(sd name,sd size,sd value)
+	if main.xfile!=(openno)
+		sd err
+		setcall err xfile_add_base((Xfile_override),name,size)
+		if err=(noerror)
+			setcall err xfile_add_char(value)
+		endif
+		return err
+	endif
+	return (noerror)
+endfunction
--- ocompiler-1.orig/src/files/headers/xfile.h
+++ ocompiler-1/src/files/headers/xfile.h
@@ -19,14 +19,14 @@ const Xfile_while=13
 const Xfile_break=14
 const Xfile_continue=15
 const Xfile_end=16
-#const Xfile_ret=17
-#const Xfile_library=18
-#const Xfile_import=19
+const Xfile_ret=17
+const Xfile_library=18
+const Xfile_import=19
 const Xfile_aftercall=20
-#const Xfile_hex=21
-#const Xfile_override=22
-#const Xfile_orphan=23
-#const Xfile_interrupt=24
+const Xfile_hex=21
+const Xfile_override=22
+const Xfile_orphan=23
+const Xfile_interrupt=24
 
 #t from type
 const Xfile_function_tintern=0
@@ -181,3 +181,9 @@ const Xfile_aftercall_declare=0
 const Xfile_aftercall_import=1
 const Xfile_aftercall_enable=2
 const Xfile_aftercall_disable=3
+
+const Xfile_import_normal=0
+const Xfile_import_extern=1
+
+const Xfile_orphan_no=0
+const Xfile_orphan_yes=1
--- ocompiler-1.orig/tests/acall/a.s
+++ ocompiler-1/tests/acall/a.s
@@ -1,8 +1,8 @@
 
 vdata *=0
 
-aftercall test
-#aftercall *test
+#aftercall test
+aftercall *test
 
 function a()
 	call b()
--- /dev/null
+++ ocompiler-1/tests/xf/hex.s
@@ -0,0 +1,2 @@
+
+hex 1,2,3
\ No newline at end of file
