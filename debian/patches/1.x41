Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 edor (1-x41) focal; urgency=medium
 .
   * fix second arg
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2023-09-16

--- edor-1.orig/s/main.c
+++ edor-1/s/main.c
@@ -1,3 +1,38 @@
+#define hel1 "USAGE\n"
+#define hel2 " [filepath [line_termination: rn/r/n]]\
+\n      --remove-config      Remove configuration files.\
+\nINPUT\
+\nthis help: q(uit),up/down,mouse/touch V.scroll\
+\nMovement:\
+\n    [Ctrl/Alt/Shift +]arrows/home/end/del,page up,page down,backspace,enter\
+\n    p.s.: Ctrl+ left/right/del breaks at white-spaces and (),[]{}\
+\n    mouse/touch Click and V.scroll\
+\nCtrl+v = visual mode; Alt+v = visual line mode\
+\n    c = copy\
+\n    d = delete\
+\n    x = cut\
+\n    i = indent (I = flow indent)\
+\n    u = unindent (U = flow unindent)\
+\nCtrl+p = paste; Alt+p = paste at the beginning of the row\
+\ncommand mode: left,right,home,end,ctrl+q\
+\nCtrl+s = save file; Alt+s = save file as...\
+\nCtrl+g = go to row[,column]; Alt+g = \"current_row,\" is entered\
+\nCtrl+f = find text; Alt+f = refind text; Ctrl+c = word at cursor (alphanumerics and _); Alt+c = word from cursor\
+\n    if found\
+\n      Enter      = next\
+\n      Space      = previous\
+\n      Left Arrow = [(next/prev)&] replace\
+\n      r          = reset replace text\
+\n      R          = modify replace text\
+\n    c = cancel\
+\n    other key to return\
+\nCtrl+u = undo; Alt+u = undo mode: left=undo,right=redo,other key to return\
+\nCtrl+r = redo\
+\nCtrl+e = enable/disable internal mouse/touch\
+\nCtrl+n = disable/enable indentation\
+\nCtrl+t = enable/disable insensitive search\
+\nCtrl+w = text wrapping (movement. another key to return)\
+\nCtrl+q = quit"
 
 #include "top.h"
 
@@ -168,42 +203,6 @@ static bool indent_flag=true;
 #define mask_insensitive 4
 static char prefs_file[max_path_0]={'\0'};//only the first byte is set
 
-#define hel1 "USAGE\n"
-#define hel2 " [filepath/OPTION [line_termination: rn/r/n]]\
-\nOPTION\
-\n --remove-config     Remove configuration files.\
-\nINPUT\
-\nthis help: q(uit),up/down,mouse/touch V.scroll\
-\nMovement:\
-\n    [Ctrl/Alt/Shift +]arrows/home/end/del,page up,page down,backspace,enter\
-\n    p.s.: Ctrl+ left/right/del breaks at white-spaces and (),[]{}\
-\n    mouse/touch Click and V.scroll\
-\nCtrl+v = visual mode; Alt+v = visual line mode\
-\n    c = copy\
-\n    d = delete\
-\n    x = cut\
-\n    i = indent (I = flow indent)\
-\n    u = unindent (U = flow unindent)\
-\nCtrl+p = paste; Alt+p = paste at the beginning of the row\
-\ncommand mode: left,right,home,end,ctrl+q\
-\nCtrl+s = save file; Alt+s = save file as...\
-\nCtrl+g = go to row[,column]; Alt+g = \"current_row,\" is entered\
-\nCtrl+f = find text; Alt+f = refind text; Ctrl+c = word at cursor (alphanumerics and _); Alt+c = word from cursor\
-\n    if found\
-\n      Enter      = next\
-\n      Space      = previous\
-\n      Left Arrow = [(next/prev)&] replace\
-\n      r          = reset replace text\
-\n      R          = modify replace text\
-\n    c = cancel\
-\n    other key to return\
-\nCtrl+u = undo; Alt+u = undo mode: left=undo,right=redo,other key to return\
-\nCtrl+r = redo\
-\nCtrl+e = enable/disable internal mouse/touch\
-\nCtrl+n = disable/enable indentation\
-\nCtrl+t = enable/disable insensitive search\
-\nCtrl+w = text wrapping (movement. another key to return)\
-\nCtrl+q = quit"//36
 static bool visual_bool=false;
 static char*cutbuf=nullptr;
 static size_t cutbuf_sz=0;
@@ -2208,26 +2207,24 @@ static bool grab_input(size_t*text_sz){
 	return false;
 }
 
-static bool valid_ln_term(char*input_term,bool*not_forced){
-	if(strcmp(input_term,"rn")==0){ln_term[0]='\r';ln_term[1]='\n';ln_term[2]='\0';ln_term_sz=2;}
-	else if(strcmp(input_term,"r")==0)ln_term[0]='\r';
-	else if(strcmp(input_term,"n")==0){}
-	else{
-		puts("Line termination argument must be: \"rn\", \"r\" or \"n\".");
-		return true;
+static bool valid_ln_term(int argc,char**argv,bool*not_forced){
+	if(argc==3){
+		char*input_term=argv[2];
+		if(strcmp(input_term,"rn")==0){ln_term[0]='\r';ln_term[1]='\n';ln_term[2]='\0';ln_term_sz=2;}
+		else if(strcmp(input_term,"r")==0)ln_term[0]='\r';
+		else if(strcmp(input_term,"n")==0){}
+		else{
+			puts("Line termination argument must be: \"rn\", \"r\" or \"n\".");
+			return true;
+		}
+		*not_forced=false;
 	}
-	*not_forced=false;
 	return false;
 }
 //same as normalize
-static int startfile(char*argfile,int argc,char**argv,size_t*text_sz,bool no_file,bool no_input){
-	bool not_forced=true;
-	if(no_file==false){
-		if(grab_file(argfile,text_sz)/*true*/)return 0;
-		if(argc==3){
-			if(valid_ln_term(argv[2],&not_forced)/*true*/)return 0;
-		}
-	}
+static int startfile(char*argfile,int argc,char**argv,size_t*text_sz,bool no_file,bool no_input,bool not_forced){
+	if(no_file==false)if(grab_file(argfile,text_sz)/*true*/)return 0;
+
 	if(no_input==false){
 		if(no_file/*true*/){
 			text_init_b=(char*)malloc(0);
@@ -2505,9 +2502,9 @@ static bool get_answer(char switcher){
 	while(c!='\n')c=getchar();
 	return a;
 }
-static void action_go(int argc,char**argv,char*cutbuf_file){
+static void action_go(int argc,char**argv,char*cutbuf_file,char*argfile){
 	size_t text_sz;
-	char*argfile=nullptr;//example when launching with no args
+	bool not_forced=true;
 	bool no_file=argc==1;
 	if(no_file==false){
 		char*src=argv[1];
@@ -2538,6 +2535,7 @@ static void action_go(int argc,char**arg
 				if(get_answer('c')==false)return;
 			}else editing_new();
 		}
+		if(valid_ln_term(argc,argv,&not_forced)/*true*/)return;
 	}
 	struct pollfd fds[1];
 	//typedef struct __sFILE FILE;
@@ -2560,7 +2558,7 @@ static void action_go(int argc,char**arg
 			}
 		}
 	}else{
-		ok=startfile(argfile,argc,argv,&text_sz,no_file,no_input);
+		ok=startfile(argfile,argc,argv,&text_sz,no_file,no_input,not_forced);
 		if(ok!=0){
 			if(ok<1){
 				//entering \r in printf at %s will return to the start
@@ -2616,14 +2614,16 @@ static void action_go(int argc,char**arg
 		}
 		free(text_init_b);
 	}
-	if(editingfile!=nullptr)unlink(editingfile);//this can be before and after text_init_b
-	if(argfile!=nullptr)free(argfile);
 }
 static void action(int argc,char**argv){
 	char cutbuf_file[max_path_0];
 	cutbuf_file[0]='\0';
 	if(help_cutbuffile_preffile(argv[0],cutbuf_file)/*true*/){//this is here, is convenient for remove_config
-		action_go(argc,argv,cutbuf_file);
+		char*argfile=nullptr;//example when launching with no args
+		action_go(argc,argv,cutbuf_file,argfile);
+		if(argfile!=nullptr)free(argfile);
+		if(editingfile!=nullptr)unlink(editingfile);//this can be before and after text_init_b, also, this can be if no argfile when rebase is on with a save as..
+
 		free(helptext);
 		if(cutbuf!=nullptr)free(cutbuf);//this is init at getfilebuf or if not there at writemembuf
 	}
