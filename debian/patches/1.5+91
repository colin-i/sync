Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+91) xenial; urgency=medium
 .
   * aftercall: new commands
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2023-06-16

--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -352,6 +352,8 @@
 	<br>
 	<b>ImportAfterCall</b> is used in objects to import an extern defined AfterCall.
 	<br>
+	<b>AfterCallActivate</b>/<b>AfterCallClear</b> automation commands (name is not used, can define with unrefsign(*)).
+	<br>
 	<b>^</b> sign will create throwless variables.
 	<br>
 	<a class="code">
--- ocompiler-1.orig/src/files/actions/main/index.s
+++ ocompiler-1/src/files/actions/main/index.s
@@ -169,6 +169,8 @@ if loop==1
 				else;if subtype==(cAFTERCALL);add datasecReg (aftercalldeclaresize);endif
 					Call advancecursors(pcontent,pcomsize,comsize);endelse
 				set g_e_b_p# (TRUE)
+			ElseIf commandset==(cMANIPULATEAFTERCALL)
+				Include "./index/aftercallmanipulate.s"
 			ElseIf commandset==(cORPHAN)
 				Include "./index/warning.s"
 			ElseIf commandset==(cCALLEX)
--- ocompiler-1.orig/src/files/actions/main/index/aftercall.s
+++ ocompiler-1/src/files/actions/main/index/aftercall.s
@@ -6,7 +6,7 @@ const aftercalldeclaresize=1
 if comsize==0;set errormsg "AfterCall variable name expected."
 else
 	str ac_store_content#1;data ac_store_size#1
-	set ac_store_content pcontent#;set ac_store_size comsize
+	set ac_store_content content;set ac_store_size comsize
 	data acsym_value#1;data acsym_size#1;data acsym_shndx#1
 	sd g_e_p;setcall g_e_p global_err_p()
 	if subtype==(cIMPORTAFTERCALL)
@@ -17,20 +17,25 @@ else
 		endelse
 	else
 	#(cAFTERCALL)
-		SetCall errormsg entryvarsfns(pcontent#,pcomsize#)
+		sd ac_current_data
+		setcall ac_current_data get_img_vdata_dataReg()  #this must be before addtosec
+		SetCall errormsg addtosec(#null,(aftercalldeclaresize),ptrdatasec)
 		if errormsg==(noerror)
-			sd ac_current_data;setcall ac_current_data get_img_vdata_dataReg()
-			SetCall errormsg addaref(ac_current_data,pcontent,pcomsize,comsize,(charnumber),(dummy_mask))
-			if errormsg==(noerror)
-				SetCall errormsg addtosec(#null,(aftercalldeclaresize),ptrdatasec)
+			If object==(FALSE)
+				set g_e_p# ac_current_data
+			else
+				set acsym_value ac_current_data;set acsym_size 0;set acsym_shndx (dataind)
+			endelse
+			#size 0 test is above
+			if content#!=(unrefsign)
+				SetCall errormsg entryvarsfns(content,comsize)
 				if errormsg==(noerror)
-					If object==(FALSE)
-						set g_e_p# ac_current_data
-					else
-						set acsym_value ac_current_data;set acsym_size 0;set acsym_shndx (dataind)
-					endelse
+					SetCall errormsg addaref(ac_current_data,pcontent,pcomsize,comsize,(charnumber),(dummy_mask))
 				endif
-			endif
+			else
+				#since aftercall(activate/clear)
+				call advancecursors(pcontent,pcomsize,comsize)
+			endelse
 		endif
 	endelse
 	if errormsg==(noerror)
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/aftercallmanipulate.s
@@ -0,0 +1,13 @@
+
+if g_e_b_p#==(FALSE)
+	set errormsg "AfterCall is not defined."
+else
+	sd acall_val
+	if subtype==(cAFTERCALLACTIVATE)
+		set acall_val (~aftercall_clearstate)
+	else
+	#cAFTERCALLCLEAR
+		set acall_val (aftercall_clearstate)
+	endelse
+	setcall errormsg aftercall_manipulate(acall_val)
+endelse
--- ocompiler-1.orig/src/files/functions/actions/dataparse.s
+++ ocompiler-1/src/files/functions/actions/dataparse.s
@@ -147,9 +147,8 @@ function addvarreferenceorunref(sv ptrco
 	set content ptrcontent#
 	Char firstchar#1
 	Set firstchar content#
-	Char unrefsign="*"
 
-	If firstchar!=unrefsign
+	If firstchar!=(unrefsign)
 		if firstchar==(asciicirc)   #throwless if on a throwing area
 			If typenumber==(constantsnumber)
 				Return "Unexpected throwless sign ('^') at constant declaration."
@@ -208,24 +207,6 @@ function getsign(str content,data size,s
 	endif
 
 	Data charnr=charnumber
-	Char pointersign=pointersigndeclare
-	SetCall valsize valinmem_pipes(content,size,pointersign,ptrsz)
-	If valsize!=size
-		If typenumber==charnr
-			#grep    stackfilter2 4
-			if stack==(FALSE)
-				Char ptrchar="Incorrect pointer sign ('^') used at CHAR declaration."
-				Str ptrptrchar^ptrchar
-				Return ptrptrchar
-			endif
-		EndIf
-		Set assigntype# pointersign
-		If typenumber!=constnr
-			Set ptrrelocbool# true
-		EndIf
-		return noerr
-	endif
-
 	Char relsign=relsign
 	SetCall valsize valinmem_pipes(content,size,relsign,ptrsz)
 	If valsize!=size
@@ -244,6 +225,37 @@ function getsign(str content,data size,s
 		return noerr
 	endif
 
+	Char pointersign=pointersigndeclare
+	SetCall valsize valinmem(content,size,pointersign)
+	If valsize!=size
+		If typenumber==charnr
+			#grep    stackfilter2 4
+			if stack==(FALSE)
+				Char ptrchar="Incorrect pointer sign ('^') used at CHAR declaration."
+				Str ptrptrchar^ptrchar
+				Return ptrptrchar
+			endif
+		EndIf
+
+		if valsize==0
+			#throwless ^name^
+			#If typenumber==constnr error is elsewhere also for another signs
+			inc content;dec size
+			SetCall valsize valinmem(content,size,pointersign)
+			If valsize==size
+				return "Throwless without a sign."   #at another sign there is this check at addvar...
+			endif
+			inc valsize ##put throwless at size for later recons
+		endif
+		set ptrsz# valsize
+
+		Set assigntype# pointersign
+		If typenumber!=constnr
+			Set ptrrelocbool# true
+		EndIf
+		return noerr
+	endif
+
 	if stack==true
 		char nosign=nosign
 		Set assigntype# nosign
--- ocompiler-1.orig/src/files/functions/actions/fn.s
+++ ocompiler-1/src/files/functions/actions/fn.s
@@ -457,7 +457,7 @@ function write_function_call(sd ptrdata,
 			#mov ecx,imm32
 			char g_err_mov=0xb8+ecxregnumber;data g_err_mov_disp32#1
 			#cmp byte[ecx],0
-			char *={0x80,7*toregopcode|ecxregnumber};char *=0
+			char *={0x80,7*toregopcode|ecxregnumber};char *=aftercall_clearstate
 			const global_err_ex_sz=!-global_err_ex_start
 			#add rel,1 is (b8+ecx), one byte
 			set g_err_mov_disp32 global_err_ptr#
@@ -497,7 +497,8 @@ function write_function_call(sd ptrdata,
 		endelse
 		SetCall err addtosec(#g_err_jz,(bsz+bsz),code);If err!=(noerror);Return err;EndIf
 		#return
-		SetCall err addtosec(ret_end_p,ret_end_sz,code);If err!=(noerror);Return err;EndIf
+		SetCall err addtosec(ret_end_p,ret_end_sz,code)
+		#;If err!=(noerror);Return err;EndIf
 	endif
 
 	return err
@@ -527,3 +528,48 @@ function entryraw_top()
 	setcall err addtosec(#s,2,code)
 	return err
 endfunction
+
+#err
+function aftercall_manipulate(sd acall_val)
+	sd err
+	vData ptrobject%ptrobject
+	vData ptrextra%%ptr_extra
+	vData code%%ptr_codesec
+	sd global_err_ptr;setcall global_err_ptr global_err_p()
+
+	If ptrobject#==(FALSE)
+	#absolute
+		#mov [disp32],imm8 /0
+		char a=0xc6;char *=disp32regnumber;data b#1;char c#1
+		set b global_err_ptr#
+		set c acall_val
+		SetCall err addtosec(#a,7,code)
+	Else
+		#for a 64 rel: 0xc6/0xc7 is still disp32; and rex is nothing at 0xc6
+		sd normal_offset=bsz
+		sd af_relof
+		setcall af_relof reloc64_offset(normal_offset)
+
+		if af_relof!=normal_offset
+			char a64=ateaximm+ecxregnumber;data *=0
+
+			setcall err adddirectrel_base(ptrextra,af_relof,global_err_ptr#,0);If err!=(noerror);Return err;EndIf
+			setcall err reloc64_ante();If err!=(noerror);Return err;EndIf
+			SetCall err addtosec(#a64,5,code);If err!=(noerror);Return err;EndIf
+			setcall err reloc64_post();If err!=(noerror);Return err;EndIf
+
+			char g64=0xc6;char *=ecxregnumber;char val#1
+			set val acall_val
+
+			SetCall err addtosec(#g64,(bsz+bsz+bsz),code)
+		else
+			char g_err=0xc6;char *=disp32regnumber
+			data *rel=0
+
+			setcall err adddirectrel_base(ptrextra,(bsz+bsz),global_err_ptr#,0);If err!=(noerror);Return err;EndIf
+			SetCall err addtosec(#g_err,6,code);If err!=(noerror);Return err;EndIf
+			SetCall err addtosec(#acall_val,(bsz),code)
+		endelse
+	EndElse
+	return err
+endfunction
--- ocompiler-1.orig/src/files/functions/commons/getcommand.s
+++ ocompiler-1/src/files/functions/commons/getcommand.s
@@ -22,6 +22,7 @@ Char cRET_c="RET"
 Char cINCLUDE_c="INCLUDE";Char cEINCLUDE_c="EINCLUDE"
 Char cFORMAT_c="FORMAT"
 Char cIMPORTAFTERCALL_c="IMPORTAFTERCALL";Char cAFTERCALL_c="AFTERCALL"
+Char cAFTERCALLACTIVATE_c="AFTERCALLACTIVATE";Char cAFTERCALLCLEAR_c="AFTERCALLCLEAR"
 Char cORPHAN_c="ORPHAN"
 Char cCALLEXX_c="CALLEXX";Char cCALLEX_c="CALLEX"
 Char cOVERRIDE_c="OVERRIDE"
@@ -364,6 +365,18 @@ Const numberofcommandsvars=(!-commandsva
 			Data *=cDECLAREAFTERCALL
 			Data *=cAFTERCALL
 			Data *=spacereq
+	Const cMANIPULATEAFTERCALL=!-coms_start
+	Const cMANIPULATEAFTERCALL_top=!
+		Const cAFTERCALLACTIVATE=!-cMANIPULATEAFTERCALL_top
+			data *^cAFTERCALLACTIVATE_c
+			Data *=cMANIPULATEAFTERCALL
+			Data *=cAFTERCALLACTIVATE
+			Data *=spacenotreq
+		Const cAFTERCALLCLEAR=!-cMANIPULATEAFTERCALL_top
+			data *^cAFTERCALLCLEAR_c
+			Data *=cMANIPULATEAFTERCALL
+			Data *=cAFTERCALLCLEAR
+			Data *=spacenotreq
 	Const cORPHAN=!-coms_start
 		data *^cORPHAN_c
 		Data *=cORPHAN
--- ocompiler-1.orig/src/files/headers/asm.h
+++ ocompiler-1/src/files/headers/asm.h
@@ -51,6 +51,7 @@ Const edxregnumber=2
 Const ebxregnumber=3
 Const espregnumber=4
 Const ebpregnumber=5
+const disp32regnumber=5
 Const esiregnumber=6
 Const ediregnumber=7
 Const ahregnumber=4
--- ocompiler-1.orig/src/files/headers/header.h
+++ ocompiler-1/src/files/headers/header.h
@@ -496,3 +496,7 @@ const ptr_nobits_virtual^nobits_virtual
 
 data has_debug#1
 const ptr_has_debug^has_debug
+
+const aftercall_clearstate=0
+
+const unrefsign=asciiast
--- ocompiler-1.orig/tests/a
+++ ocompiler-1/tests/a
@@ -1,22 +1,67 @@
 
 if [ -z "${OCOMP}" ]; then OCOMP=../src/o; fi
-if [ -z "${OLINK}" ]; then OLINK=../ounused/ounused; fi
 
-logs=
-objs=
-for f in "${@}"; do
+comp () {
 	if [ "${edb}" = "0" ]; then
-		edb --run ${OCOMP} ${f}.s || exit 1
+		edb --run ${OCOMP} ${1}.s ${OFLAGS} || exit 1
 	else
-		${OCOMP} ${f}.s || exit 1
+		${OCOMP} ${1}.s ${OFLAGS} || exit 1
 	fi
-	logs+=" ${f}.s.log"
-	objs+=" ${f}.o"
-done
-${OLINK} ${logs} && \
-cc ${objs} && \
-if [ -z "${edb}" ]; then ./a.out
-else edb --run a.out
-fi
+}
+if [ -z "${ex}" ]; then
+	if [ -z "${OLINK}" ]; then OLINK=../ounused/ounused; fi
 
+	if [ -n "${win}" ]; then
+		OFLAGS="inplace_reloc 0"
+		if [ -z "${old}" ]; then OFLAGS+=" conv_64 2"; fi
+	#else underscore_pref 1
+	fi
+
+	logs=
+	objs=
+	for f in "${@}"; do
+		comp ${f}
+		logs+=" ${f}.s.log"
+		objs+=" ${f}.o"
+	done
+	${OLINK} ${logs} || exit 1
+
+	if [ -z "${win}" ]; then
+		if [ -z "${old}" ]; then
+			cc ${objs}
+		else
+			ld ${objs} --entry main --dynamic-linker=/lib/ld-linux.so.2 -m elf_i386 -o a.out -lc
+		fi
+		if [ -z "${edb}" ]; then ./a.out
+		else edb --run a.out
+		fi
+	else
+		if [ -z "${old}" ]; then
+			x86_64-w64-mingw32-gcc ${objs} -o a.out
+			if [ -z "${edb}" ]; then wine `pwd`/a.out
+			else wine /home/bc/Desktop/x64/release/x64/x64dbg.exe `pwd`/a.out
+			fi
+		else
+			i686-w64-mingw32-ld ${objs} -entry main -lmsvcrt -o ./a.out
+			if [ -z "${edb}" ]; then wine `pwd`/a.out
+			else wine /home/bc/Desktop/x64/release/x32/x32dbg.exe `pwd`/a.out
+			fi
+		fi
+	fi
+else
+	comp ${1}
+	if [ -z "${win}" ]; then
+		mv ${1} `pwd`/a.out
+		if [ -z "${edb}" ]; then /home/bc/Desktop/out/squashfs-root/lib32/ld-linux.so.2 ./a.out
+		else edb --run /home/bc/Desktop/out/squashfs-root/lib32/ld-linux.so.2 ./a.out
+		fi
+	else
+		mv ${1}.exe `pwd`/a.out
+		if [ -z "${edb}" ]; then wine `pwd`/a.out
+		else wine /home/bc/Desktop/x64/release/x32/x32dbg.exe `pwd`/a.out
+		fi
+	fi
+fi && \
 echo $?
+
+#wine regedit wine_debugger
--- /dev/null
+++ ocompiler-1/tests/a32
@@ -0,0 +1,2 @@
+
+old=x ./a $@
--- /dev/null
+++ ocompiler-1/tests/a32w
@@ -0,0 +1,2 @@
+
+win=x old=x ./a $@
--- /dev/null
+++ ocompiler-1/tests/acall/32.s
@@ -0,0 +1,8 @@
+
+format elfobj
+
+importx "printf" printf
+
+include "a.s"
+
+exit 0
--- /dev/null
+++ ocompiler-1/tests/acall/32w.s
@@ -0,0 +1,8 @@
+
+format elfobj
+
+importx "_printf" printf
+
+include "a.s"
+
+return 0
--- /dev/null
+++ ocompiler-1/tests/acall/64.s
@@ -0,0 +1,8 @@
+
+format elfobj64
+
+importx "printf" printf
+
+include "a.s"
+
+return 0
--- /dev/null
+++ ocompiler-1/tests/acall/a.s
@@ -0,0 +1,25 @@
+
+vdata *=0
+
+aftercall *test
+
+function a()
+	call b()
+	call c()
+endfunction
+
+function b()
+	call printf("test\n")
+endfunction
+function c()
+	call printf("test2\n")
+endfunction
+
+entry main()
+value ^e^a
+#i3
+call e()
+aftercallactivate
+call e()
+aftercallclear
+call e()
--- /dev/null
+++ ocompiler-1/tests/acall/e.s
@@ -0,0 +1,9 @@
+
+format elf
+
+library "libc.so.6"
+importx "printf" printf
+
+include "a.s"
+
+exit 0
--- /dev/null
+++ ocompiler-1/tests/acall/ew.s
@@ -0,0 +1,7 @@
+
+library "msvcrt.dll"
+importx "printf" printf
+
+include "a.s"
+
+return 0
--- /dev/null
+++ ocompiler-1/tests/ae
@@ -0,0 +1,2 @@
+
+ex=x ./a $@
--- /dev/null
+++ ocompiler-1/tests/aew
@@ -0,0 +1,2 @@
+
+win=x ex=x ./a $@
--- /dev/null
+++ ocompiler-1/tests/aw
@@ -0,0 +1,2 @@
+
+win=x ./a $@
--- ocompiler-1.orig/tests/c
+++ ocompiler-1/tests/c
@@ -1,4 +1,14 @@
 
-rm ./a.out
-rm ./*.o
-rm ./*.log
+rm -f ./a.out
+rm -f ./*.o
+rm -f ./*.log
+
+a=( `ls` )
+for var in "${a[@]}"; do
+	if [ -d "${var}" ]; then
+		cd "${var}"
+			rm -f ./*.o
+			rm -f ./*.log
+		cd ..
+	fi
+done
--- /dev/null
+++ ocompiler-1/tests/wine_debugger
@@ -0,0 +1,17 @@
+Windows Registry Editor Version 5.00
+
+[HKEY_CURRENT_USER\Software\Wine\AppDefaults]
+
+[HKEY_CURRENT_USER\Software\Wine\AppDefaults\x32dbg.exe]
+
+[HKEY_CURRENT_USER\Software\Wine\AppDefaults\x32dbg.exe\DllOverrides]
+"dbghelp"="native,builtin"
+"msvcp120"="native,builtin"
+"msvcr120"="native,builtin"
+
+[HKEY_CURRENT_USER\Software\Wine\AppDefaults\x64dbg.exe]
+
+[HKEY_CURRENT_USER\Software\Wine\AppDefaults\x64dbg.exe\DllOverrides]
+"dbghelp"="native,builtin"
+"msvcp120"="native,builtin"
+"msvcr120"="native,builtin"
