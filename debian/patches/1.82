Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 actionswf (1-82) bionic; urgency=medium
 .
   * optimizations at for, while and else
Author: bc <bc@bc-desktop>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2024-06-09

--- actionswf-1.orig/arh/pub
+++ actionswf-1/arh/pub
@@ -18,6 +18,9 @@ last=$(curl https://api.github.com/repos
 ~/test/lp x && \
 ~/test/arh2 ${last} 1
 
+#while(true)  ;true; at for
+#break jump at break;endwhile
+
 #is
 #"a=1; //dsfdsffsd
 #b=2"
--- actionswf-1.orig/include/action.h
+++ actionswf-1/include/action.h
@@ -32,18 +32,20 @@ const continue_flag=0xfa0AA0a0        #1
 const for_three=0xfb0BB0b0            #FR
 const inter_for=0xfc0CC0c0            #FR
 const ifElse_start=0xfd0DD0d0         #RG
-#const for_in=
+const for=0xfe0EE0e0                  #1
 
-const else_flag=0x40<<24                   #1
-const consecutive_flag=0x80<<24
-#const all_flags=consecutive_flag|else_flag
-const brace_blocks_function=0x7fFFffFF
+const no_flag=0                        #code only
+const top_flag=0x10<<24                #code only
+const skip_flag=0x20<<24               #code only
+const else_flag=0x40<<24               #1
+const consecutive_flag=0x80<<24        #parse only
+const brace_blocks_function=0x7fFFffFF #code only
 
-const normal_marker=0x01010202
-const if_marker=0x03030404
+const normal_marker=0x01010202        #parse only
+const if_marker=0x03030404            #parse only
 const while_marker=0x05050606         #1
-const function_marker=0x07070808
-const for_marker=0x09090a0a           #1
+const function_marker=0x07070808      #parse only
+const forin_marker=0x09090a0a         #code only
 
 const ActionSubtract=0x0B      #OP
 const ActionMultiply=0x0C      #OP
--- actionswf-1.orig/include/actionswf.h
+++ actionswf-1/include/actionswf.h
@@ -1,6 +1,6 @@
 
-#define flags_forin1 0x20
-#define flags_framesAsShows 0x40
+#define flag_forin1 0x20
+#define flag_framesAsShows 0x40
 
 #ifdef __cplusplus
 extern "C" {
--- actionswf-1.orig/include/prog.h
+++ actionswf-1/include/prog.h
@@ -118,3 +118,14 @@ const recordheader_upperbits=recordheade
 const action_debug_free=0
 const action_debug_get=1
 const action_debug_get_mem=2
+
+const actionjump_contentsize=2
+const smallbackjump=-actionjump_contentsize
+
+const actionrecordheader_tag_size=1
+const actionrecordheader_length_size=2
+const actionrecordheader_size=actionrecordheader_tag_size+actionrecordheader_length_size
+
+const ret_cont_break_nothing=0
+const ret_cont_break_something=1
+const ret_cont_break_break=2
--- actionswf-1.orig/readme.md
+++ actionswf-1/readme.md
@@ -23,7 +23,7 @@ Compile with [O Compiler](https://github
 
 ## Info
 A brief intro is at [readme.txt](https://raw.githubusercontent.com/colin-i/actionswf/master/readme.txt).\
-Games by this program at *https://www.kongregate.com/accounts/bitplayer/favorites?sort=gameplays*
+Games by this program at *https://www.kongregate.com/accounts/bitplayer/games?filter=favorites&sort=gameplays*
 
 [//]: # (https://www.kongregate.com/games/bitplayer)
 <!--- but with no sort --->
--- actionswf-1.orig/src/Makefile
+++ actionswf-1/src/Makefile
@@ -37,7 +37,7 @@ endif
 
 #this is like ld is linking, reason: ostrip is not adapted for this, there is another solutin with ocompiler and NOBITS
 #	maybe is a 0x1000 .o size rule only from libexte.a
-items = actioncode actionparse actionutil bits character file storage util ${platform} actionpool debug faction alt dtitles x
+items = actioncode actionparse actionutil bits character file storage util ${platform} actionpool debug faction alt dtitles x local
 expitems = action swf tool ../shared/action_dllmain
 
 exte=libexte.a
--- actionswf-1.orig/src/action.e.oc
+++ actionswf-1/src/action.e.oc
@@ -8,7 +8,8 @@ import "swf_actionblock" swf_actionblock
 import "alt_action" alt_action
 import "file_get_content__resources_free" file_get_content__resources_free
 
-aftercallimport ebool
+import "ebase" ebase
+#aftercallimport ebool
 
 #this/an action
 
@@ -17,6 +18,7 @@ import "action_format" action_format
 import "debug_base" debug_base
 
 functionX action(ss ac)
+valuex bp#1;base bp;call ebase(bp)
 #ss ac       actionscript string to be parsed
 	sd alt_ac;set alt_ac alt_action(ac,0)
 	if alt_ac!=(NULL)  #can be two action() same DoAction
@@ -28,6 +30,7 @@ functionX action(ss ac)
 	end
 endfunction
 functionXx actionf(ss buffer,ss *format)
+base action.bp;call ebase(action.bp)
 #ss buffer   the buffer where to sprintf the format and the arguments
 #ss format   the format
 #...         % arguments here
@@ -48,11 +51,13 @@ endfunction
 import "action_sprite_base" action_sprite_base
 
 functionX action_sprite(sd sprite,ss actions)
+base action.bp;call ebase(action.bp)
 #sd sprite    sprite id
 #ss actions   same as action
 	call action_sprite_base(sprite,actions,(TRUE))
 endfunction
 functionXx actionf_sprite(sd sprite,ss buffer,ss *format)
+base action.bp;call ebase(action.bp)
 #sd sprite    sprite id
 #ss buffer    same as actionf
 #ss format    same as actionf
--- actionswf-1.orig/src/actioncode.oc
+++ actionswf-1/src/actioncode.oc
@@ -44,24 +44,22 @@ endfunction
 import "brace_blocks_get_memblock" brace_blocks_get_memblock
 import "block_get_size" block_get_size
 
-import "cond_blocks" cond_blocks
 import "brace_blocks_counter" brace_blocks_counter
 
 function get_nr_of_forIn_statements()
-    sd block;setcall block cond_blocks()
-    sd counter;sd c;setcall c brace_blocks_counter();set counter c#
-    sd nr=0
-    while counter>0
-        dec counter
-        sub block (DWORD)
-	if block#=(brace_blocks_function)
-            return nr
-	endif
-	if block#=(for_marker)
-            inc nr
-	endif
-    endwhile
-    return nr
+	sd start;set start cond_blocks_at_index(0)
+	sd block;setcall block cond_blocks()
+	sd nr=0
+	while start!=block
+		sub block (DWORD)
+		if block#=(brace_blocks_function)
+			return nr
+		endif
+		if block#=(forin_marker)
+			inc nr
+		endif
+	endwhile
+	return nr
 endfunction
 
 #name/null
@@ -161,9 +159,40 @@ function action_code_get_pointer_touchle
 	return a
 end
 
+function infinite_loop_check(sd codepointer)
+	sd test;set test codepointer
+	if codepointer#=(ActionGetVariable)
+		add codepointer (DWORD)
+		sd name
+		set name action_code_get_pointer_touchless(#codepointer)
+		sd compare
+		set compare action_true_compare(name)
+		if compare=0
+			if codepointer#=(math_end)
+				decst codepointer
+				call action_code_get_pointer(#codepointer) #must test if debug_x to let the x file in good condition
+				add codepointer (DWORD)
+				return codepointer
+			end
+		end
+	end
+	return test
+end
+function action_true_compare(ss command)
+	sd compare
+	set compare strcmp("true",command)
+	return compare
+end
 
-aftercallimport ebool
+import "ret_cont_break" ret_cont_break
+import "brace_blocks_counter_inc" brace_blocks_counter_inc
+import "cond_blocks_at_index" cond_blocks_at_index
+import "brace_blocks_counter_dec" brace_blocks_counter_dec
+import "cond_blocks_noerror" cond_blocks_noerror
+
+#aftercallimport ebool
 
+import "cond_blocks" cond_blocks
 import "debug_phase_code" debug_phase_code
 import "debug_definefunction" debug_definefunction
 import "debug_concludefunction" debug_concludefunction
@@ -212,11 +241,19 @@ import "action_one" action_one
 import "action_member_loop_left" action_member_loop_left
 import "action_member_loop_right" action_member_loop_right
 import "brace_blocks_add_write" brace_blocks_add_write
+import "brace_blocks_add_write_offset" brace_blocks_add_write_offset
 import "brace_blocks_remove_write" brace_blocks_remove_write
+import "brace_blocks_remove_write_ex" brace_blocks_remove_write_ex
 #position
 function action__code_row(sd codepointer)
+	charx rcb#1;set rcb (FALSE)   #at definefunction is another collision with this but is not a problem now
+
 	setcall codepointer action__code_row_ex(codepointer)
 	call debug_phase_code(codepointer)
+
+	ss p;set p ret_cont_break()
+	set p# rcb
+
 	return codepointer
 endfunction
 #position
@@ -238,12 +275,18 @@ function action__code_row_ex(sd codepoin
         call close_scope_forIn_statements()
         setcall codepointer action_code_right_util(codepointer)
         call action_one((ActionReturn))
+		set action__code_row.rcb (ret_cont_break_something)
         return codepointer
 	endif
 	if attrib=(block_end)
         add codepointer (DWORD)
         if codepointer#=(else_flag)
-            call action_code_else_add()
+			ss p;set p ret_cont_break()
+			if p#=(ret_cont_break_nothing)
+				call action_code_else_add()
+			else #dead jump after return/continue/break
+				call action_code_else_resolve((skip_flag)) #and add the condition because there is number_of_unclosed after block_else_end
+			end
             add codepointer (DWORD)
         else
             call brace_blocks_remove_write()
@@ -262,12 +305,19 @@ function action__code_row_ex(sd codepoin
 	endif
 	if attrib=(break_flag)
         call action_code_break()
-        add codepointer (DWORD);return codepointer
+		add codepointer (DWORD)
+		set action__code_row.rcb (ret_cont_break_break)
+		return codepointer
 	endif
 	if attrib=(continue_flag)
         call action_code_continue()
-        add codepointer (DWORD);return codepointer
+		add codepointer (DWORD)
+		set action__code_row.rcb (ret_cont_break_something)
+		return codepointer
 	endif
+	if attrib=(else_flag)
+		call error("ELSE is not linked at this point")
+	end
     setcall codepointer action_code_pack(codepointer)
     return codepointer
 endfunction
@@ -360,11 +410,12 @@ import "resolve_dummy_jump" resolve_dumm
 
 #next/same
 function action_code_write_conditions(sd codepointer)
-    #verify for condition tag
-    sd cond;set cond codepointer#
-    if cond=(for_marker)
-        add codepointer (DWORD)
-        if codepointer#!=(for_three)
+	#verify for condition tag
+	sd infinite_guard
+	sd cond;set cond codepointer#
+	if cond=(for)
+		add codepointer (DWORD)
+		if codepointer#!=(for_three)
 			sd type;set type codepointer#
 			add codepointer (DWORD)
 			sd name
@@ -380,61 +431,70 @@ function action_code_write_conditions(sd
 				call action_push((ap_Constant8),name,-1)
 				call action_one((ActionEnumerate))
 			end
-            #
-            call add_while_top_off((for_marker))
-            #
-            sd first_reg=0
-            call actionrecordheader((ActionStoreRegister),1)
-            call swf_actionblock_add(#first_reg,1)
-            #
-            call action_push((ap_Null),-1)
-            call action_one((ActionEquals2))
-            #write the jump offset
-            call write_ifjump_addTo_braceBlocks()
-            #
-            sd attr2;set attr2 codepointer#;add codepointer (DWORD)
-            #
-            if attr2=(ActionSetMember)
-                setcall codepointer action_member_loop_left(codepointer)
-            else
-                #var or set variable
-			sd newname;set newname action_code_get_pointer(#codepointer)
-			call action_push((ap_Constant8),newname,-1)
-            endelse
-            #
-            call action_push((ap_RegisterNumber),first_reg,-1)
-            call action_one(attr2)
-            return codepointer
-        endif
-        add codepointer (DWORD)
-        if codepointer#!=(inter_for);setcall codepointer action_code_pack(codepointer);endif
-        add codepointer (DWORD)
-        #
-        call add_dummy_jump()
-        sd memblock;setcall memblock brace_blocks_get_memblock()
-        sd sizeOff;setcall sizeOff block_get_size(memblock)
-        #
-        call add_while_top_off((while_marker))
-        #
-        if codepointer#!=(inter_for);setcall codepointer action_code_pack(codepointer);endif
-        add codepointer (DWORD)
-        #
-        import "write_forward_offset" write_forward_offset
-        sub sizeOff (WORD)
-        call write_forward_offset(sizeOff)
-    elseif cond=(while_marker)
-        call add_while_top_off((while_marker))
-        add codepointer (DWORD)
-    elseif cond=(ActionIf)
-        add codepointer (DWORD)
-    else
-        return codepointer
-    endelse
-    #using the operations function
-    setcall codepointer action_code_right_util(codepointer)
-    call write_ifjump_withNot()
-    #return the current pointer
-    return codepointer
+			call add_while_top_off((forin_marker))
+			#
+			sd first_reg=0
+			call actionrecordheader((ActionStoreRegister),1)
+			call swf_actionblock_add(#first_reg,1)
+			#
+			call action_push((ap_Null),-1)
+			call action_one((ActionEquals2))
+			#write the jump offset
+			call write_ifjump_addTo_braceBlocks()
+			#
+			sd attr2;set attr2 codepointer#;add codepointer (DWORD)
+			#
+			if attr2=(ActionSetMember)
+				setcall codepointer action_member_loop_left(codepointer)
+			else
+				#var or set variable
+				sd newname;set newname action_code_get_pointer(#codepointer)
+				call action_push((ap_Constant8),newname,-1)
+			endelse
+			call action_push((ap_RegisterNumber),first_reg,-1)
+			call action_one(attr2)
+			return codepointer
+		endif
+		add codepointer (DWORD)
+		if codepointer#!=(inter_for);setcall codepointer action_code_pack(codepointer);endif
+		add codepointer (DWORD)
+		#
+		if codepointer#!=(inter_for) #else is JUMP 0
+			call add_dummy_jump()
+			sd memblock;setcall memblock brace_blocks_get_memblock()
+			sd sizeOff;setcall sizeOff block_get_size(memblock)
+		end
+		#
+		call add_while_top_off((while_marker))
+		#
+		if codepointer#!=(inter_for)
+			setcall codepointer action_code_pack(codepointer)
+			import "write_forward_offset" write_forward_offset
+			sub sizeOff (WORD)
+			call write_forward_offset(sizeOff)
+		endif
+		add codepointer (DWORD)
+		#
+		set infinite_guard codepointer
+		set codepointer infinite_loop_check(codepointer)
+	elseif cond=(while_marker)
+		call add_while_top_off((while_marker))
+		add codepointer (DWORD)
+		set infinite_guard codepointer
+		set codepointer infinite_loop_check(codepointer)
+	elseif cond=(ActionIf)
+		add codepointer (DWORD)
+		set infinite_guard codepointer
+	else
+		return codepointer
+	endelse
+	if infinite_guard=codepointer
+		#using the operations function
+		setcall codepointer action_code_right_util(codepointer)
+		call write_ifjump_withNot()
+	end
+	#return the current pointer
+	return codepointer
 endfunction
 function write_ifjump_withNot()
     #set to be not for entering the block
@@ -442,14 +502,14 @@ function write_ifjump_withNot()
     #write the jump offset
     call write_ifjump_addTo_braceBlocks()
 endfunction
-import "brace_blocks_counter_inc" brace_blocks_counter_inc
 function add_while_top_off(sd typeOfLoop)
     call brace_blocks_add_write_current()
     sd block
     setcall block cond_blocks()
     set block# typeOfLoop
-    call brace_blocks_counter_inc();add block (DWORD)
-    set block# 0
+    call brace_blocks_counter_inc()
+	set block cond_blocks() #also for the error check was: add block (DWORD)
+    set block# (top_flag)
     call brace_blocks_counter_inc()
 endfunction
 const forIn_ifBreak_size=3+1+1+3+2
@@ -458,7 +518,7 @@ function action_code_break()
     sd p_type;set p_type c_block;sub p_type (2*DWORD)
     if p_type#=(while_marker)
         call write_jump(0)
-    else
+    else  #forin_marker
         call action_push((ap_Null),-1)
         call action_one((ActionEquals2))
         call write_ifjump()
@@ -467,9 +527,9 @@ function action_code_break()
     sd memblock
     setcall memblock brace_blocks_get_memblock()
     setcall c_block# block_get_size(memblock);sub c_block# (WORD)
-    #
-    if p_type#=(for_marker);call write_jump((-2-3-forIn_ifBreak_size));endif
-    #
+	#this is a forin end, it is looping at the remaining values until NULL from ActionEnumerate/2 behaviour
+	if p_type#=(forin_marker);call write_jump((-actionjump_contentsize-actionrecordheader_size-forIn_ifBreak_size));endif
+	#
     call brace_blocks_counter_inc()
 endfunction
 function remove_forIn_stack()
@@ -489,17 +549,17 @@ function close_scope_forIn_statements()
     endwhile
 endfunction
 function write_jump(sd size)
-    call actionrecordheader((ActionJump),2)
-    call swf_actionblock_add(#size,2)
+    call actionrecordheader((ActionJump),(actionjump_contentsize))
+    call swf_actionblock_add(#size,(actionjump_contentsize))
 endfunction
 #cond_blocks top pointer
-function prepare_space_for_break()
-    sd c_blocks;setcall c_blocks cond_blocks()
-    sd c;setcall c brace_blocks_counter();sd counter;set counter c#
-    sd copy_cursor;set copy_cursor c_blocks
-    while counter>0
+function prepare_space_for_break()  #here is moving if-elses and at breaks/loopoffset is not comparing but moving them bulk
+	sd start;set start cond_blocks_at_index(0)
+	sd c_blocks;setcall c_blocks cond_blocks()
+	sd copy_cursor;set copy_cursor c_blocks
+	while start!=c_blocks
         sub c_blocks (DWORD)
-        if c_blocks#=0
+        if c_blocks#=(top_flag)
             add c_blocks (DWORD)
             sd cursor;set cursor copy_cursor;sub cursor (DWORD)
             while copy_cursor!=c_blocks
@@ -509,8 +569,7 @@ function prepare_space_for_break()
             endwhile
             return c_blocks
         endif
-        dec counter
-    endwhile
+	endwhile
     call error("it is not the right place for Break")
 endfunction
 function write_ifjump_addTo_braceBlocks()
@@ -524,11 +583,11 @@ function write_ifjump()
 endfunction
 
 function action_code_continue()
-    sd c_blocks;setcall c_blocks cond_blocks()
-    sd c;setcall c brace_blocks_counter();sd counter;set counter c#
-    while counter>0
+	sd start;set start cond_blocks_at_index(0)
+	sd c_blocks;set c_blocks cond_blocks_noerror()
+	while start!=c_blocks
         sub c_blocks (DWORD)
-        if c_blocks#=0
+        if c_blocks#=(top_flag)
             #the loop type and to the offset to jump from here
             sub c_blocks (2*DWORD)
             sd off_to_jump;set off_to_jump c_blocks#
@@ -537,30 +596,32 @@ function action_code_continue()
             call resolve_dummy_jump(off_to_jump)
             ret
         endif
-        dec counter
-    endwhile
+	endwhile
     call error("Continue without a loop error")
 endfunction
 
 function action_code_else_add()
     #write dummy jump
-    call actionrecordheader((ActionJump),2)
+    call actionrecordheader((ActionJump),(actionjump_contentsize))
     sd dummyjump
-    call swf_actionblock_add(#dummyjump,2)
+    call swf_actionblock_add(#dummyjump,(actionjump_contentsize))
+	call action_code_else_resolve((no_flag))
+end
+function action_code_else_resolve(sd flag)
     #end previous if
     call brace_blocks_remove_write()
     #add current offset
-    call brace_blocks_add_write()
+    call brace_blocks_add_write_offset((smallbackjump),flag)
 endfunction
 function action_code_conditions_end(sd codepointer)
     add codepointer (DWORD)
     sd number_of_unclosed
     set number_of_unclosed codepointer#
     add codepointer (DWORD)
-    while number_of_unclosed>0
-        call brace_blocks_remove_write()
-        dec number_of_unclosed
-    endwhile
+	while number_of_unclosed>^0
+		call brace_blocks_remove_write_ex()
+		dec number_of_unclosed
+	endwhile
     return codepointer
 endfunction
 
@@ -792,29 +853,29 @@ function action_code_right_number(sd cod
     return codepointer
 endfunction
 function action_one_command(ss command)
-    sd compare
-    #
-    setcall compare strcmp("null",command)
-    if compare=0
-        call action_push((ap_Null),-1)
-        ret
-    endif
-    setcall compare strcmp("undefined",command)
-    if compare=0
-        call action_push((ap_Undefined),-1)
-        ret
-    endif
-    setcall compare strcmp("true",command)
-    if compare=0
-        call action_push((ap_Boolean),1,-1)
-        ret
-    endif
-    setcall compare strcmp("false",command)
-    if compare=0
-        call action_push((ap_Boolean),0,-1)
-        ret
-    endif
-    call action_get_one(command)
+	sd compare
+	#
+	setcall compare strcmp("null",command)
+	if compare=0
+		call action_push((ap_Null),-1)
+		ret
+	endif
+	setcall compare strcmp("undefined",command)
+	if compare=0
+		call action_push((ap_Undefined),-1)
+		ret
+	endif
+	set compare action_true_compare(command)
+	if compare=0
+		call action_push((ap_Boolean),1,-1)
+		ret
+	endif
+	setcall compare strcmp("false",command)
+	if compare=0
+		call action_push((ap_Boolean),0,-1)
+		ret
+	endif
+	call action_get_one(command)
 endfunction
 function action_get_one(ss variable)
     call action_push((ap_Constant8),variable,-1)
@@ -850,7 +911,6 @@ function action_definefunction(sd codepo
         set index_current index_current#
     endwhile
     #close function marker for return and for..in case
-    import "brace_blocks_counter_dec" brace_blocks_counter_dec
     call brace_blocks_counter_dec()
 	#for debug log codeSize
 	call debug_concludefunction(#debug_related)
--- actionswf-1.orig/src/actionparse.oc
+++ actionswf-1/src/actionparse.oc
@@ -68,14 +68,19 @@ function brace_blocks_counter_init()
     setcall c brace_blocks_counter()
     set c# 0
 endfunction
-
-function cond_blocks()
-    sd p_i
-    setcall p_i brace_blocks_counter()
+function brace_blocks_counter_inc()
+    sd c
+    setcall c brace_blocks_counter()
+    inc c#
+endfunction
+function cond_blocks_noerror()
+    sd c
+    setcall c brace_blocks_counter()
     sd blocks
-    setcall blocks cond_blocks_at_index(p_i#)
+    setcall blocks cond_blocks_at_index(c#)
     return blocks
 endfunction
+
 function cond_blocks_at_index(sd i)
     datax blocks_mem#brace_blocks_max
     sd blocks^blocks_mem
@@ -96,14 +101,25 @@ function for_in(datax flag)
 	and flag (flag_forin1)
 end
 
-import "action_code_get" action_code_get
-import "action_code_values_index" action_code_values_index
+function ret_cont_break()
+	charx type#1
+	return #type
+end
 
+function action_data()
+	call brace_blocks_counter_init()
+	set ret_cont_break.type (ret_cont_break_nothing)
+end
 
+import "action_code_get" action_code_get
+import "action_code_values_index" action_code_values_index
+import "block_get_mem_size" block_get_mem_size
+import "block_get_size" block_get_size
+import "block_get_psize" block_get_psize
 
 
 
-aftercallimport ebool
+#aftercallimport ebool
 
 import "action_code_set" action_code_set
 import "action_code_set_pointer" action_code_set_pointer
@@ -197,7 +213,7 @@ function action_parse_conditions(ss ac,s
         setcall pointer str_expression_at_start(ac,"for")
         if pointer=ac;return pointer;endif
         #
-        call action_code_set((for_marker))
+        call action_code_set((for))
         set p_flags# (while_marker)
         set p_for_detected# 1
         #
@@ -957,19 +973,20 @@ endfunction
 
 #{} blocks
 
-function brace_blocks_counter_inc()
+function cond_blocks()
     sd c
     setcall c brace_blocks_counter()
     if c#=(brace_blocks_max)
-    #was >=
         call error("too many blocks: {}")
     endif
-    inc c#
+    sd blocks
+    setcall blocks cond_blocks_at_index(c#)
+    return blocks
 endfunction
 function brace_blocks_counter_dec()
     sd c
     setcall c brace_blocks_counter()
-    if c#<=0
+    if c#=0
         call error("unexpected end block: }")
     endif
     dec c#
@@ -1016,7 +1033,7 @@ function brace_blocks_remove_parse()
     while consecutive=(consecutive_flag)
         call brace_blocks_counter_dec()
         #
-        setcall p_type cond_blocks()
+        set p_type cond_blocks_noerror()
         setcall type type_consecutive(p_type#,#consecutive)
         if type!=(normal_marker)
             if type=(while_marker)
@@ -1041,29 +1058,37 @@ function brace_blocks_end()
     endif
 endfunction
 #
-import "block_get_size" block_get_size
 function brace_blocks_add_write()
-    call brace_blocks_add_write_offset(-2)
+    call brace_blocks_add_write_offset((smallbackjump),(no_flag))
 endfunction
 function brace_blocks_add_write_current()
-    call brace_blocks_add_write_offset(0)
+    call brace_blocks_add_write_offset(0,(no_flag))
 endfunction
-function brace_blocks_add_write_offset(sd offset)
+function brace_blocks_add_write_offset(sd offset,sd flag)
     sd block
     setcall block cond_blocks()
     sd memblock
     setcall memblock brace_blocks_get_memblock()
     setcall block# block_get_size(memblock)
     add block# offset
+	or block# flag
     call brace_blocks_counter_inc()
 endfunction
-    #
-import "block_get_mem_size" block_get_mem_size
+#
 function brace_blocks_remove_write()
     sd offset
     setcall offset brace_blocks_remove_write_offset()
     call write_forward_offset(offset)
 endfunction
+function brace_blocks_remove_write_ex()
+	sd offset
+	setcall offset brace_blocks_remove_write_offset()
+	sd test=skip_flag
+	and test offset
+	if test=0
+		call write_forward_offset(offset)
+	end
+endfunction
 function write_forward_offset(sd offset)
     sd mem
     sd size
@@ -1075,7 +1100,7 @@ function write_forward_offset(sd offset)
     add offset (WORD)
     sub size offset
     #
-    if size>0x7fFF
+    if size>^0x7fFF
         call error("offset>(signed word size) error")
     endif
     #
@@ -1086,27 +1111,75 @@ endfunction
 function brace_blocks_remove_write_offset()
     call brace_blocks_counter_dec()
     sd block
-    setcall block cond_blocks()
+    set block cond_blocks_noerror()
     return block#
 endfunction
+function brace_blocks_remove_write_jump() #here is only from endwhile (at while and fors)
+	sd skip_jump=0
+	if ret_cont_break.type=(ret_cont_break_nothing)  #skip dead code
+		call add_dummy_jump()
+	elseif ret_cont_break.type=(ret_cont_break_break) #jump 0 there?
+	#look to see if last jump is zero and if is not forin, that has a different break than for3/while
+		sd start;set start cond_blocks_at_index(0)
+		sd blocks;set blocks cond_blocks_noerror()
+		while start!=blocks
+			sub blocks (DWORD)
+			if blocks#=(top_flag) #healty while/for
+				sub blocks (DWORD)
+				if blocks#!=(forin_marker)
+					set skip_jump (actionrecordheader_size+actionjump_contentsize)
+					sd memblock
+					set memblock brace_blocks_get_memblock()
+					set memblock block_get_psize(memblock)
+					sub memblock# skip_jump
+					break
+				end
+			end
+		end
+	end
 
-function brace_blocks_remove_write_jump()
-    call add_dummy_jump()
-    #
-    call brace_blocks_remove_write_loopIfJumps_at_current_offset()
-    #
-    sd jumpoffset
-    setcall jumpoffset brace_blocks_remove_write_offset()
-    call resolve_dummy_jump(jumpoffset)
+	set blocks cond_blocks_noerror()
+	call brace_blocks_counter_dec() #with errors check
+	sub blocks (DWORD)
+	sd offset;set offset blocks#
+	if offset!=(top_flag) #can be whiletrue with no breaks even if that is not making any sense
+		whiletrue
+			call brace_blocks_counter_dec() #with errors check
+			sub blocks (DWORD)
+			if blocks#=(top_flag)
+				#here is last jump (loopjump or a moved break)
+				break
+			end
+			call write_forward_offset(offset)
+			set offset blocks#
+		end
+		#here the while was ok, last jump isn't set
+		#remove type,top offset
+	end
+	sd c
+	set c brace_blocks_counter()
+	sub blocks (2*DWORD)
+	sub c# 2
+
+	if ret_cont_break.type=(ret_cont_break_nothing)  #skip dead code
+		call resolve_dummy_jump(blocks#)  #jump back
+	elseif skip_jump!=0
+		ret
+	end
+
+	if offset!=(top_flag) #can be whiletrue with no breaks even if that is not making any sense
+		#resolve the skipped offset
+		call write_forward_offset(offset)
+	end
 endfunction
 function add_dummy_jump()
     import "actionrecordheader" actionrecordheader
-    call actionrecordheader((ActionJump),2)
+    call actionrecordheader((ActionJump),(actionjump_contentsize))
     import "swf_actionblock_add" swf_actionblock_add
     sd dummy_size=0
-    call swf_actionblock_add(#dummy_size,2)
+    call swf_actionblock_add(#dummy_size,(actionjump_contentsize))
 endfunction
-function resolve_dummy_jump(sd jumpoffset)
+function resolve_dummy_jump(sd jumpoffset)  #also at continue
     sd memblock
     ss mem
     sd size
@@ -1115,27 +1188,16 @@ function resolve_dummy_jump(sd jumpoffse
     add mem size;sub mem (WORD)
     #
     sub size jumpoffset
-    mult size -1
-    if size<0xFFff8000
-        call error("offset>(signed word size) error (at jump back)")
-    endif
+	if size>=^0x8000
+		call error("offset>(signed word size) error (at jump back)")
+	end
+	mult size -1
+	#if size<=0xFFff8000   # 0x8000 or minus 1
     #
     set mem# size
     sd byte=0x0000ff00;and byte size;div byte 0x100
     inc mem;set mem# byte
 endfunction
-function brace_blocks_remove_write_loopIfJumps_at_current_offset()
-    whiletrue
-        sd ifoffset
-        setcall ifoffset brace_blocks_remove_write_offset()
-        if ifoffset=0
-            #also remove the type of loop
-            call brace_blocks_counter_dec()
-            ret
-        endif
-        call write_forward_offset(ifoffset)
-    endwhile
-endfunction
 
 #function
 
--- actionswf-1.orig/src/actionpool.oc
+++ actionswf-1/src/actionpool.oc
@@ -38,7 +38,7 @@ import "swf_mem" swf_mem
 
 
 
-aftercallimport ebool
+#aftercallimport ebool
 
 
 
--- actionswf-1.orig/src/actionutil.oc
+++ actionswf-1/src/actionutil.oc
@@ -208,7 +208,7 @@ import "action_code_values_index" action
 import "action_code_get" action_code_get
 
 
-aftercallimport ebool
+#aftercallimport ebool
 
 import "swf_actionblock_add" swf_actionblock_add
 import "actionrecordheader" actionrecordheader
--- actionswf-1.orig/src/alt.oc
+++ actionswf-1/src/alt.oc
@@ -35,7 +35,7 @@ end
 
 importx "strlen" strlen
 
-aftercallimport ebool
+#aftercallimport ebool
 
 import "memalloc" memalloc
 import "error" error
--- actionswf-1.orig/src/bits.oc
+++ actionswf-1/src/bits.oc
@@ -135,11 +135,7 @@ endfunction
 
 
 
-
-
-aftercallimport ebool
-
-
+#aftercallimport ebool
 
 #
 import "swf_mem_add" swf_mem_add
--- actionswf-1.orig/src/character.oc
+++ actionswf-1/src/character.oc
@@ -112,11 +112,10 @@ import "action_size" action_size
 
 
 
-aftercallimport ebool
-
-importx "swf_text" swf_text
-importx "swf_shape" swf_shape
+#aftercallimport ebool
 
+import "swf_shape_local" swf_shape_local
+import "swf_text_local" swf_text_local
 import "action_sprite_base" action_sprite_base
 
 
@@ -336,7 +335,7 @@ function swf_shape_simple(sd width,sd he
         data *=0
     data *=-1
     sd id
-    setcall id swf_shape(width,height,struct)
+    setcall id swf_shape_local(width,height,struct)
     return id
 endfunction
 
@@ -350,7 +349,7 @@ function swf_text_initial_font_centered(
     sd e_struct
     setcall e_struct edittext_struct()
     sd text_id
-    setcall text_id swf_text(width,height,"",(HasFont|HasText|HasTextColor|HasLayout|ReadOnly|NoSelect),e_struct)
+    setcall text_id swf_text_local(width,height,"",(HasFont|HasText|HasTextColor|HasLayout|ReadOnly|NoSelect),e_struct)
     return text_id
 endfunction
 
--- actionswf-1.orig/src/debug.oc
+++ actionswf-1/src/debug.oc
@@ -139,7 +139,7 @@ importx "fprintf" fprintf
 
 
 
-aftercallimport ebool
+#aftercallimport ebool
 
 import "memalloc" memalloc
 import "alt_init" alt_init
--- actionswf-1.orig/src/dtitles.oc
+++ actionswf-1/src/dtitles.oc
@@ -69,7 +69,7 @@ end
 
 
 
-aftercallimport ebool
+#aftercallimport ebool
 
 
 
--- actionswf-1.orig/src/faction.oc
+++ actionswf-1/src/faction.oc
@@ -3,7 +3,7 @@ Format ElfObj64
 include "../include/prog.h"
 
 import "action_debug" action_debug
-import "brace_blocks_counter_init" brace_blocks_counter_init
+import "action_data" action_data
 import "action_code_values" action_code_values
 import "action_code_values_index" action_code_values_index
 import "escape_action" escape_action
@@ -11,7 +11,7 @@ import "action_debug_free" action_debug_
 
 
 
-aftercallimport ebool
+#aftercallimport ebool
 
 #this/an action
 
@@ -30,7 +30,7 @@ function action_base(ss ac)
 	sd nr
 	setcall nr action_code_values_index()
 	set nr# 0
-	call brace_blocks_counter_init()
+	call action_data()
 
 	import "actionx" actionx
 	sd x;set x actionx()
--- actionswf-1.orig/src/file.oc
+++ actionswf-1/src/file.oc
@@ -56,7 +56,7 @@ importx "ftell" ftell
 importx "fopen" fopen
 importx "free" free
 
-aftercallimport ebool
+#aftercallimport ebool
 
 import "error" error
 
--- /dev/null
+++ actionswf-1/src/local.oc
@@ -0,0 +1,570 @@
+
+format elfobj64
+
+include "../include/prog.h"
+
+import "identifiers_set" identifiers_set
+import "stack_to_word_arg" stack_to_word_arg
+import "rect_prepare" rect_prepare
+import "dword_swap" dword_swap
+import "args_advance" args_advance
+import "bits_packs" bits_packs
+import "NumFill_NumLin" NumFill_NumLin
+import "shapewithstyle_records" shapewithstyle_records
+import "printEr" printEr
+import "word_arg_to_stack" word_arg_to_stack
+import "file_get_content__resources_free" file_get_content__resources_free
+import "matrix_translate" matrix_translate
+import "struct_ids" struct_ids
+import "block_get_size" block_get_size
+import "block_get_mem" block_get_mem
+import "block_reset_size" block_reset_size
+
+importx "strlen" strlen
+importx "memcpy" memcpy
+
+#aftercalli
+
+import "swf_mem" swf_mem
+import "swf_mem_add" swf_mem_add
+import "rect_add" rect_add
+import "swf_frames_reg" swf_frames_reg
+import "swf_tag" swf_tag
+import "identifiers_get" identifiers_get
+import "swf_tag_recordheader_entry" swf_tag_recordheader_entry
+import "error" error
+import "file_get_content" file_get_content
+import "exportsId_get" exportsId_get
+
+function swf_new_ex_local(ss path,sd width,sd height,sd backgroundcolor,sd fps,sd add_debug)
+#ss path             file out pathname
+#sd width
+#sd height
+#sd backgroundcolor  0xRRGGBB  value
+#sd fps              swf frames per second
+
+    #F=uncompressed, C=ZLib
+const hd_start=\
+    char *=F
+    char *={W,S}
+    char *version=8
+const file_sz_off=\
+    data *FileLength#1
+data size=\-hd_start
+vdata hd_pack%hd_start
+    #rect
+const hd2=\
+    char *FrameRate=0
+        char FrameRate#1
+    char *FrameCount={0,0}  #will be incremented at least once
+data size2=\-hd2
+vdata hd_pack2%hd2
+
+	import "flags_init" flags_init
+	call flags_init(add_debug,path)
+    call swf_mem((mem_exp_init),path,(file_sz_off-hd_start))
+
+    #identifiers for swf
+    call identifiers_set(0);#font with id 0 isn't visible in the placements
+
+    call swf_mem_add(hd_pack,size)
+    call rect_add(width,height)
+    #x.x format
+    set FrameRate fps
+    call swf_mem_add(hd_pack2,size2)
+    #
+
+	call swf_frames_reg() #is a rect with nbits above, ..., faster here
+
+    char setbackgroundtag#2
+    char red#1
+    char green#1
+    char blue#1
+
+    set blue backgroundcolor
+    sd g_color=0xff00;and g_color backgroundcolor;div g_color 0x100;set green g_color
+    sd r_color=0xff0000;and r_color backgroundcolor;div r_color (0x100*0x100);set red r_color
+    call swf_tag(#setbackgroundtag,(SetBackGroundColor),3)
+endfunction
+
+#id
+function swf_font_local(ss fontname,sd font_flags)
+#ss fontname    = a string with the browser font, for example "_sans"
+#sd font_flags  = prog.h file is with the flags
+    const font_hd_start=\
+
+    char id#2
+    char Flags#1
+    char *Language=0
+    char FontNameLen#1
+
+    const font_hd_start_size=\-font_hd_start
+    vdata font_hd_start^id
+
+    data NumGlyphs=0
+
+    sd fontid
+    setcall fontid identifiers_get()
+    call stack_to_word_arg(fontid,#id)
+
+    set Flags font_flags
+
+    setcall FontNameLen strlen(fontname)
+
+    sd size=font_hd_start_size+2
+
+    sd has_layout=FontFlagsHasLayout
+    and has_layout font_flags
+    add size FontNameLen
+    if has_layout!=0
+        add size (2+2+2+2)
+    endif
+
+    call swf_tag_recordheader_entry((DefineFont2),size)
+    call swf_mem_add(font_hd_start,(font_hd_start_size))
+    call swf_mem_add(fontname,FontNameLen)
+    call swf_mem_add(#NumGlyphs,2)
+    if has_layout!=0
+        char FontAscent={0,0}
+        char *FontDescent={0,0}
+        char *FontLeading={0,0}
+        char *KerningCount={0,0}
+        call swf_mem_add(#FontAscent,(2+2+2+2))
+    endif
+    return fontid
+endfunction
+
+#id
+function swf_text_local(sd bound_width,sd bound_height,ss variablename,sd flags,sv structure)
+#sd bound_width  width of the text
+#sd bound_height height
+#ss variablename to change it with actionscript
+#sd flags        see include/text.h
+#sv structure    see edittext_struct()  from character.oc, set the flags first
+    #CharacterID
+    sd size=2
+    #RECT
+    sd rect
+    sd rectsz
+    call rect_prepare(#rect,#rectsz,bound_width,bound_height)
+    add size rectsz
+    #flags
+    add size 2
+    #FontID
+    sd p_fontid
+    sd hasfont=HasFont
+    and hasfont flags
+    if hasfont!=0
+        set p_fontid structure
+        add size 2
+    endif
+    #FontClass
+    ss fontclassname
+    sd fontclasssize
+    sd hasfontclass=HasFontClass
+    and hasfontclass flags
+    add structure (2*DWORD)
+    if hasfontclass!=0
+        if hasfont!=0
+            call error("HasFontClass can't be true if HasFont is true.")
+        endif
+        set fontclassname structure#
+        setcall fontclasssize strlen(fontclassname)
+        inc fontclasssize
+        add size fontclasssize
+    endif
+    #FontHeight
+    sd p_font_height
+    sub structure (DWORD)
+    if hasfont!=0
+        set p_font_height structure
+        add size 2
+    endif
+    #TextColor
+    sd p_rgba
+    sd hastextcolor=HasTextColor
+    and hastextcolor flags
+    add structure (DWORD+:)
+    if hastextcolor!=0
+        set p_rgba structure
+        add size 4
+    endif
+    #MaxLength
+    sd p_maxlength
+    sd hasmaxlength=HasMaxLength
+    and hasmaxlength flags
+    add structure (DWORD)
+    if hasmaxlength!=0
+        set p_maxlength structure
+        add size 2
+    endif
+    #layout
+    sd p_layout
+    data layout_size=4*WORD+BYTE
+    sd haslayout=HasLayout
+    and haslayout flags
+    add structure (DWORD+:)
+    if haslayout!=0
+        set p_layout structure
+        add size layout_size
+    endif
+    #VariableName
+    sd vlen
+    setcall vlen strlen(variablename)
+    inc vlen
+    add size vlen
+    #InitialText
+    ss initialtext
+    sd initialtextsize
+    sd hastext=HasText
+    and hastext flags
+    sub structure :
+    if hastext!=0
+        set initialtext structure#
+        setcall initialtextsize strlen(initialtext)
+        inc initialtextsize
+        add size initialtextsize
+    endif
+
+    call swf_tag_recordheader_entry((DefineEditText),size)
+    sd id
+    setcall id identifiers_get()
+    call swf_mem_add(#id,2)
+    call swf_mem_add(rect,rectsz)
+    call swf_mem_add(#flags,2)
+    #
+    if hasfont!=0
+        call swf_mem_add(p_fontid,2)
+    endif
+    if hasfontclass!=0
+        call swf_mem_add(fontclassname,fontclasssize)
+    endif
+    if hasfont!=0
+        sd height
+        set height p_font_height#
+        mult height 20
+        call swf_mem_add(#height,2)
+    endif
+    if hastextcolor!=0
+        setcall p_rgba# dword_swap(p_rgba#)
+        call swf_mem_add(p_rgba,4)
+    endif
+    if hasmaxlength!=0
+        call swf_mem_add(p_maxlength,2)
+    endif
+    if haslayout!=0
+        data layout_align#1
+        data layout_leftmargin#1
+        data layout_rightmargin#1
+        data layout_indent#1
+        data layout_leading#1
+        call memcpy(#layout_align,p_layout,(5*DWORD))
+        mult layout_leftmargin 20
+        mult layout_rightmargin 20
+        mult layout_indent 20
+        mult layout_leading 20
+        char l_align#1
+        char l_leftmargin#2
+        char l_rightmargin#2
+        char l_indent#2
+        char l_leading#2
+        set l_align layout_align
+        call stack_to_word_arg(layout_leftmargin,#l_leftmargin)
+        call stack_to_word_arg(layout_rightmargin,#l_rightmargin)
+        call stack_to_word_arg(layout_indent,#l_indent)
+        call stack_to_word_arg(layout_leading,#l_leading)
+        call swf_mem_add(#l_align,layout_size)
+    endif
+    call swf_mem_add(variablename,vlen)
+    if hastext!=0
+        call swf_mem_add(initialtext,initialtextsize)
+    endif
+    return id
+endfunction
+
+import "shape_records_add" shape_records_add
+#id
+function swf_shape_local(sd width,sd height,sd args)
+#sd width
+#sd height
+#sd args        see swf_shape_basic or swf_image(last part) for example, or see shape_records_add and it's sub-functions to see how the swf SHAPERECORD is added
+    if width=0
+        call error("shape width 0 not allowed")
+    elseif height=0
+        call error("shape height 0 not allowed")
+    endelseif
+    sd fillstyle
+    sd fillarg
+    sd linewidth
+    sd linecolor
+
+    setcall fillstyle args_advance(#args)
+    if fillstyle!=(no_fill)
+        setcall fillarg args_advance(#args)
+    endif
+    setcall linewidth args_advance(#args)
+    if linewidth!=0
+        setcall linecolor args_advance(#args)
+    endif
+    ########
+    sd shape_size
+
+    #id
+    sd shape_id
+    setcall shape_id identifiers_get()
+    set shape_size (WORD)
+
+    #rect
+    sd rect
+    sd rect_size
+    call rect_prepare(#rect,#rect_size,width,height)
+    add shape_size rect_size
+
+    #SHAPEWITHSTYLE
+    char FillStyleCount#1
+        char FillStyleType#1
+    #
+        data data#3
+    vdata fillstyles^FillStyleCount
+    set FillStyleCount 0
+    sd fillstyles_size=1
+    if fillstyle!=(no_fill)
+        set FillStyleCount 1
+        set FillStyleType fillstyle
+        add fillstyles_size 1
+        if fillstyle=(solid_fill)
+            setcall data dword_swap(fillarg)
+            add fillstyles_size (DWORD)
+        else
+        #if fillstyle==(repeating_bitmap_fill)
+        #clipped bitmap fill,non-smoothed repeating bitmap or non-smoothed clipped bitmap
+            call stack_to_word_arg(fillarg,#data)
+            sd fill_pointer^data
+            add fill_pointer (WORD)
+            #matrix,scaleX=20,scaleY=20,translateX=0,translateY=0
+            #first bit: scaleX 0 and Y 0;or 1;=>0;else is 1
+            #const FIXEDBITS=16
+            #x and y=floor(scaleX*(1<<FIXEDBITS))=0x00140000
+            #Nbits is 0x15 + 1(sign)
+            const predef_nbits=0x16
+            const predef_XYscale=0x00140000
+            #rotate is 0
+            #translate nbits is 0
+            call bits_packs(fill_pointer,6,1,1,(predef_nbits),(NBits_size),(predef_XYscale),(predef_nbits),(predef_XYscale),(predef_nbits),0,1,0,(NBits_size))
+            #char ref_id#2
+            #char matrix#7
+            add fillstyles_size (2+7)
+        endelse
+    endif
+    add shape_size fillstyles_size
+    #
+    char LineStyleCount#1
+    char line_points#2
+    data color#1
+    vdata linestyles^LineStyleCount
+    sd linestyles_size=1
+    set LineStyleCount 0
+    if linewidth!=0
+        set LineStyleCount 1
+        mult linewidth 20
+        call stack_to_word_arg(linewidth,#line_points)
+        setcall color dword_swap(linecolor)
+        add linestyles_size (WORD+DWORD)
+    endif
+    add shape_size linestyles_size
+    #NumFillBits/NumLineBits
+    call NumFill_NumLin(0,FillStyleCount,LineStyleCount)
+    sd NFill_NLin;setcall NFill_NLin NumFill_NumLin(1,(TRUE));mult NFill_NLin 0x10;orcall NFill_NLin NumFill_NumLin(1,(FALSE))
+    inc shape_size
+    #shaperecord[n]
+    sd shapewithstyle_record_start
+    setcall shapewithstyle_record_start shapewithstyle_records()
+    value pointer#1;data pos#1
+    set pos 0x80
+    set pointer shapewithstyle_record_start
+    sd p_dest_pos^pointer
+    while args#!=-1
+        call shape_records_add(p_dest_pos,#args)
+    endwhile
+    data end={0,0}
+    sd end_record^end
+    call shape_records_add(p_dest_pos,#end_record)
+    if pos!=0x80
+        inc pointer
+    endif
+    sd records_sz
+    set records_sz pointer
+    sub records_sz shapewithstyle_record_start
+    add shape_size records_sz
+
+    call swf_tag_recordheader_entry((DefineShape3),shape_size)
+    call swf_mem_add(#shape_id,2)
+    call swf_mem_add(rect,rect_size)
+    call swf_mem_add(fillstyles,fillstyles_size)
+    call swf_mem_add(linestyles,linestyles_size)
+    call swf_mem_add(#NFill_NLin,1)
+    call swf_mem_add(shapewithstyle_record_start,records_sz)
+
+    return shape_id
+endfunction
+
+#id
+function swf_shape_bitmap_local(sd bitmapId,sd width,sd height)
+#sd bitmapId    id, e.g.: from swf_dbl
+    sd shape_id
+    sd width_variable
+    set width_variable width
+    sd height_variable
+    set height_variable height
+    data struct=repeating_bitmap_fill
+        data refid#1
+        set refid bitmapId
+    data *=0
+    data *={0,StateFillStyle0}
+    data *={1,1}
+        data w1#1;data *=0
+        set w1 width_variable
+    data *={1,1}
+        data *=0;data h1#1
+        set h1 height_variable
+    data *={1,1}
+        data w2#1;data *=0
+        mult width_variable -1
+        set w2 width_variable
+    data *={1,1}
+        data *=0;data h2#1
+        mult height_variable -1
+        set h2 height_variable
+    data *=-1
+	setcall shape_id swf_shape_local(width,height,#struct)
+    return shape_id
+endfunction
+
+#id
+function swf_image_ex_local(ss imagepath,sd p_wh)
+#ss imagepath = path name for the dbl image
+#sd p_wh      = pointer width height
+    sd dbl_id
+    setcall dbl_id swf_dbl_ex_local(imagepath,p_wh)
+    #add dbl to a shape
+    sd shape_id
+    sd width;set width p_wh#;add p_wh (DWORD)
+    setcall shape_id swf_shape_bitmap_local(dbl_id,width,p_wh#)
+    return shape_id
+endfunction
+#id
+function swf_dbl_ex_local(ss imagepath,sd p_wh)
+#ss imagepath = path name for the dbl image
+#sd p_wh = pointer width a dword and height next dword
+    sd id
+    sd mem
+    sd size
+    sd cursor
+    setcall mem file_get_content(imagepath,#size)
+    if size<8
+        call error("missing image header")
+    endif
+    char hd_magic1={D,B,l,1};vdata magic1^hd_magic1
+    char hd_magic2={D,B,l,2};vdata magic2^hd_magic2
+    if mem#!=magic1#
+    if mem#!=magic2#
+        call printEr("expecting dbl(define bits lossless 1 or 2)header; filepath: ")
+        call error(imagepath)
+    endif;endif
+    sd header=DefineBitsLossless2
+    if mem#=magic1#
+        set header (DefineBitsLossless)
+    endif
+    set cursor mem
+    add cursor (DWORD)
+
+    sd image_size
+    setcall image_size dword_swap(cursor#)
+    add cursor (DWORD)
+    sub size (2*DWORD)
+    if image_size>size
+        call error("size error at dbl")
+    endif
+    #add the define bits lossless file to mem
+    add size (WORD)
+    import "swf_tag_recordheader_long_entry" swf_tag_recordheader_long_entry
+    call swf_tag_recordheader_long_entry(header,size)
+    setcall id identifiers_get()
+    call swf_mem_add(#id,(WORD))
+    if p_wh!=0
+        #get width and height;BitmapFormat UI8,BitmapWidth UI16,BitmapHeight UI16
+        if image_size<(2*WORD+BYTE)
+            call error("size error at dbl when looking for width/height")
+        endif
+        sd pointer
+        set pointer cursor
+        add pointer (BYTE)
+        setcall p_wh# word_arg_to_stack(pointer)
+        add pointer (WORD)
+        add p_wh (DWORD)
+        setcall p_wh# word_arg_to_stack(pointer)
+    endif
+    call swf_mem_add(cursor,image_size)
+    call file_get_content__resources_free()
+    return id
+endfunction
+
+function swf_placeobject_local(sd refid,sd depth)
+#sd refid    the id
+#sd depth    depth value
+     call swf_placeobject_coords_local(refid,depth,0,0)
+endfunction
+#                                                  if not data here, then will conflict at c language where we talk about int
+function swf_placeobject_coords_local(sd refid,sd depth,datax x,datax y)
+#sd refid
+#sd depth
+#sd x         x coordinate
+#sd y         y coordinate
+#const PlaceFlagHasClipActions=0x80
+#const PlaceFlagHasClipDepth=0x40
+#const PlaceFlagHasName=0x20
+#const PlaceFlagHasRatio=0x10
+#const PlaceFlagHasColorTransform=0x8
+const PlaceFlagHasMatrix=0x4
+const PlaceFlagHasCharacter=0x2
+#const PlaceFlagMove=0x1
+    sd flags=PlaceFlagHasMatrix|PlaceFlagHasCharacter
+    sd matrix
+    datax matrixsz#1
+    call matrix_translate(#matrix,#matrixsz,x,y)
+
+    sd size=5
+    add size matrixsz
+    call swf_tag_recordheader_entry((PlaceObject2),size)
+    call swf_mem_add(#flags,1)
+    call swf_mem_add(#depth,2)
+    #character id
+    call swf_mem_add(#refid,2)
+    #matrix
+    call swf_mem_add(matrix,matrixsz)
+endfunction
+function swf_removeobject_local(sd depth)
+#sd depth        depth for the removeobject2 tag
+    call swf_tag_recordheader_entry((RemoveObject2),2)
+    #depth
+    call swf_mem_add(#depth,2)
+endfunction
+
+function swf_exports_done_local()
+#write all the exports to the swf
+    sd exports
+    setcall exports exportsId_get()
+    sd block
+    setcall block struct_ids((ids_get),exports)
+    sd size
+    setcall size block_get_size(block)
+    if size!=0
+        #
+        call swf_tag_recordheader_entry((ExportAssets),size)
+        #
+        sd exp
+        setcall exp block_get_mem(block)
+        call swf_mem_add(exp,size)
+        call block_reset_size(block)
+    endif
+endfunction
--- /dev/null
+++ actionswf-1/src/mrcd
@@ -0,0 +1,3 @@
+
+make clean && \
+LD_LIBRARY_PATH=/home/bc/before LD=/home/bc/before/x86_64-linux-gnu-ld.bfd L=-L/home/bc/before/lib OFLAGSEXTRA+=" inplace_reloc 0" ./m64d
--- actionswf-1.orig/src/storage.oc
+++ actionswf-1/src/storage.oc
@@ -75,7 +75,7 @@ import "word_arg_to_stack" word_arg_to_s
 
 
 
-aftercallimport ebool
+#aftercallimport ebool
 
 
 
@@ -340,11 +340,11 @@ function swf_actionblock_add(sd value,sd
     call swf_actionblock((mem_exp_add),value,size)
 endfunction
 function actionrecordheader(sd tag,sd size)
-    char t#1
-    char length#2
+    char t#actionrecordheader_tag_size
+    char length#actionrecordheader_length_size
     set t tag
     call stack_to_word_arg(size,#length)
-    call swf_actionblock_add(#t,3)
+	call swf_actionblock_add(#t,(actionrecordheader_size))
 	import "debug_phase_code_add" debug_phase_code_add
 	call debug_phase_code_add((TRUE),#length)
 endfunction
--- actionswf-1.orig/src/swf.e.oc
+++ actionswf-1/src/swf.e.oc
@@ -7,52 +7,45 @@ importx "memcpy" memcpy
 importx "strlen" strlen
 importx "memcmp" memcmp
 
-import "identifiers_set" identifiers_set
-import "swf_frames_reg" swf_frames_reg
 import "swf_frames_pointer" swf_frames_pointer
 import "swf_sprite_frames_pointer" swf_sprite_frames_pointer
 
-import "printEr" printEr
-import "rect_prepare" rect_prepare
 import "button_mem" button_mem
 
 import "stack_to_word_arg" stack_to_word_arg
-import "dword_swap" dword_swap
-import "args_advance" args_advance
-import "bits_packs" bits_packs
-import "NumFill_NumLin" NFill_NLin
-import "shapewithstyle_records" shapewithstyle_records
 import "word_arg_to_stack" word_arg_to_stack
-import "file_get_content__resources_free" file_get_content__resources_free
 import "file_resources_set" file_resources_set
 import "file_resources_free" file_resources_free
 import "struct_ids" struct_ids
-import "matrix_translate" matrix_translate
 import "block_get_size" block_get_size
 import "block_get_mem" block_get_mem
 import "free_sprite_id" free_sprite_id
-import "block_reset_size" block_reset_size
 import "freereset" freereset   #..x with no args
 import "dtitles_conclude" dtitles_conclude
 
 
 
-aftercallimport ebool
+import "ebase" ebase
+#aftercallimport ebool
 
-import "swf_tag" swf_tag
 import "swf_mem" swf_mem
 import "swf_mem_add" swf_mem_add
 import "swf_actionblock" swf_actionblock
-import "rect_add" rect_add
 import "swf_tag_recordheader_entry" swf_tag_recordheader_entry
 import "error" error
 import "swf_shape_simple" swf_shape_simple
 import "identifiers_get" identifiers_get
 
+functionX swf_new(ss path,sd width,sd height,sd backgroundcolor,sd fps)
+valuex bp#1;base bp;call ebase(bp)
+	callg swf_new_ex_local(path,width,height,backgroundcolor,fps,(debug_none))
+endfunction
+
 import "swf_button_base" swf_button_base
 import "swf_text_initial_font_centered" swf_text_initial_font_centered
 #id
 functionX swf_button(sd width,sd height,sd ButtonData)
+base swf_new.bp;call ebase(swf_new.bp)
 data def_fill#1
 data def_line_h#1;#no pad
 data def_line#1
@@ -152,6 +145,7 @@ vstr actions#1
 endfunction
 #id
 functionX swf_button_last(ss newtext,ss actions)
+base swf_new.bp;call ebase(swf_new.bp)
 #ss newtext  is the new text for a new button with the attributes from the previous swf_button call
 #ss actions  button actions
     data shape_up#1
@@ -181,337 +175,42 @@ endfunction
 #font
 
 #id
+import "swf_font_local" swf_font_local
 functionX swf_font(ss fontname,sd font_flags)
-#ss fontname    = a string with the browser font, for example "_sans"
-#sd font_flags  = prog.h file is with the flags
-    const font_hd_start=\
-
-    char id#2
-    char Flags#1
-    char *Language=0
-    char FontNameLen#1
-
-    const font_hd_start_size=\-font_hd_start
-    vdata font_hd_start^id
-
-    data NumGlyphs=0
-
-    sd fontid
-    setcall fontid identifiers_get()
-    call stack_to_word_arg(fontid,#id)
-
-    set Flags font_flags
-
-    setcall FontNameLen strlen(fontname)
-
-    sd size=font_hd_start_size+2
-
-    sd has_layout=FontFlagsHasLayout
-    and has_layout font_flags
-    add size FontNameLen
-    if has_layout!=0
-        add size (2+2+2+2)
-    endif
-
-    call swf_tag_recordheader_entry((DefineFont2),size)
-    call swf_mem_add(font_hd_start,(font_hd_start_size))
-    call swf_mem_add(fontname,FontNameLen)
-    call swf_mem_add(#NumGlyphs,2)
-    if has_layout!=0
-        char FontAscent={0,0}
-        char *FontDescent={0,0}
-        char *FontLeading={0,0}
-        char *KerningCount={0,0}
-        call swf_mem_add(#FontAscent,(2+2+2+2))
-    endif
-    return fontid
+	base swf_new.bp;call ebase(swf_new.bp)
+	sd id;set id swf_font_local(fontname,font_flags)
+	return id
 endfunction
 #id
 functionX swf_font_basic(ss fontname)
+base swf_new.bp;call ebase(swf_new.bp)
 #ss fontname    = a string with the browser font, for example "_sans"
     sd id
-    setcall id swf_font(fontname,0)
+    setcall id swf_font_local(fontname,0)
     return id
 endfunction
 
 #text
 
 #id
+import "swf_text_local" swf_text_local
 functionX swf_text(sd bound_width,sd bound_height,ss variablename,sd flags,sv structure)
-#sd bound_width  width of the text
-#sd bound_height height
-#ss variablename to change it with actionscript
-#sd flags        see include/text.h
-#sv structure    see edittext_struct()  from character.oc, set the flags first
-    #CharacterID
-    sd size=2
-    #RECT
-    sd rect
-    sd rectsz
-    call rect_prepare(#rect,#rectsz,bound_width,bound_height)
-    add size rectsz
-    #flags
-    add size 2
-    #FontID
-    sd p_fontid
-    sd hasfont=HasFont
-    and hasfont flags
-    if hasfont!=0
-        set p_fontid structure
-        add size 2
-    endif
-    #FontClass
-    ss fontclassname
-    sd fontclasssize
-    sd hasfontclass=HasFontClass
-    and hasfontclass flags
-    add structure (2*DWORD)
-    if hasfontclass!=0
-        if hasfont!=0
-            call error("HasFontClass can't be true if HasFont is true.")
-        endif
-        set fontclassname structure#
-        setcall fontclasssize strlen(fontclassname)
-        inc fontclasssize
-        add size fontclasssize
-    endif
-    #FontHeight
-    sd p_font_height
-    sub structure (DWORD)
-    if hasfont!=0
-        set p_font_height structure
-        add size 2
-    endif
-    #TextColor
-    sd p_rgba
-    sd hastextcolor=HasTextColor
-    and hastextcolor flags
-    add structure (DWORD+:)
-    if hastextcolor!=0
-        set p_rgba structure
-        add size 4
-    endif
-    #MaxLength
-    sd p_maxlength
-    sd hasmaxlength=HasMaxLength
-    and hasmaxlength flags
-    add structure (DWORD)
-    if hasmaxlength!=0
-        set p_maxlength structure
-        add size 2
-    endif
-    #layout
-    sd p_layout
-    data layout_size=4*WORD+BYTE
-    sd haslayout=HasLayout
-    and haslayout flags
-    add structure (DWORD+:)
-    if haslayout!=0
-        set p_layout structure
-        add size layout_size
-    endif
-    #VariableName
-    sd vlen
-    setcall vlen strlen(variablename)
-    inc vlen
-    add size vlen
-    #InitialText
-    ss initialtext
-    sd initialtextsize
-    sd hastext=HasText
-    and hastext flags
-    sub structure :
-    if hastext!=0
-        set initialtext structure#
-        setcall initialtextsize strlen(initialtext)
-        inc initialtextsize
-        add size initialtextsize
-    endif
-
-    call swf_tag_recordheader_entry((DefineEditText),size)
-    sd id
-    setcall id identifiers_get()
-    call swf_mem_add(#id,2)
-    call swf_mem_add(rect,rectsz)
-    call swf_mem_add(#flags,2)
-    #
-    if hasfont!=0
-        call swf_mem_add(p_fontid,2)
-    endif
-    if hasfontclass!=0
-        call swf_mem_add(fontclassname,fontclasssize)
-    endif
-    if hasfont!=0
-        sd height
-        set height p_font_height#
-        mult height 20
-        call swf_mem_add(#height,2)
-    endif
-    if hastextcolor!=0
-        setcall p_rgba# dword_swap(p_rgba#)
-        call swf_mem_add(p_rgba,4)
-    endif
-    if hasmaxlength!=0
-        call swf_mem_add(p_maxlength,2)
-    endif
-    if haslayout!=0
-        data layout_align#1
-        data layout_leftmargin#1
-        data layout_rightmargin#1
-        data layout_indent#1
-        data layout_leading#1
-        call memcpy(#layout_align,p_layout,(5*DWORD))
-        mult layout_leftmargin 20
-        mult layout_rightmargin 20
-        mult layout_indent 20
-        mult layout_leading 20
-        char l_align#1
-        char l_leftmargin#2
-        char l_rightmargin#2
-        char l_indent#2
-        char l_leading#2
-        set l_align layout_align
-        call stack_to_word_arg(layout_leftmargin,#l_leftmargin)
-        call stack_to_word_arg(layout_rightmargin,#l_rightmargin)
-        call stack_to_word_arg(layout_indent,#l_indent)
-        call stack_to_word_arg(layout_leading,#l_leading)
-        call swf_mem_add(#l_align,layout_size)
-    endif
-    call swf_mem_add(variablename,vlen)
-    if hastext!=0
-        call swf_mem_add(initialtext,initialtextsize)
-    endif
-    return id
+	base swf_new.bp;call ebase(swf_new.bp)
+	sd id;set id swf_text_local(bound_width,bound_height,variablename,flags,structure)
+	return id
 endfunction
 
-import "shape_records_add" shape_records_add
 #id
+import "swf_shape_local" swf_shape_local
 functionX swf_shape(sd width,sd height,sd args)
-#sd width
-#sd height
-#sd args        see swf_shape_basic or swf_image(last part) for example, or see shape_records_add and it's sub-functions to see how the swf SHAPERECORD is added
-    if width=0
-        call error("shape width 0 not allowed")
-    elseif height=0
-        call error("shape height 0 not allowed")
-    endelseif
-    sd fillstyle
-    sd fillarg
-    sd linewidth
-    sd linecolor
-
-    setcall fillstyle args_advance(#args)
-    if fillstyle!=(no_fill)
-        setcall fillarg args_advance(#args)
-    endif
-    setcall linewidth args_advance(#args)
-    if linewidth!=0
-        setcall linecolor args_advance(#args)
-    endif
-    ########
-    sd shape_size
-
-    #id
-    sd shape_id
-    setcall shape_id identifiers_get()
-    set shape_size (WORD)
-
-    #rect
-    sd rect
-    sd rect_size
-    call rect_prepare(#rect,#rect_size,width,height)
-    add shape_size rect_size
-
-    #SHAPEWITHSTYLE
-    char FillStyleCount#1
-        char FillStyleType#1
-    #
-        data data#3
-    vdata fillstyles^FillStyleCount
-    set FillStyleCount 0
-    sd fillstyles_size=1
-    if fillstyle!=(no_fill)
-        set FillStyleCount 1
-        set FillStyleType fillstyle
-        add fillstyles_size 1
-        if fillstyle=(solid_fill)
-            setcall data dword_swap(fillarg)
-            add fillstyles_size (DWORD)
-        else
-        #if fillstyle==(repeating_bitmap_fill)
-        #clipped bitmap fill,non-smoothed repeating bitmap or non-smoothed clipped bitmap
-            call stack_to_word_arg(fillarg,#data)
-            sd fill_pointer^data
-            add fill_pointer (WORD)
-            #matrix,scaleX=20,scaleY=20,translateX=0,translateY=0
-            #first bit: scaleX 0 and Y 0;or 1;=>0;else is 1
-            #const FIXEDBITS=16
-            #x and y=floor(scaleX*(1<<FIXEDBITS))=0x00140000
-            #Nbits is 0x15 + 1(sign)
-            const predef_nbits=0x16
-            const predef_XYscale=0x00140000
-            #rotate is 0
-            #translate nbits is 0
-            call bits_packs(fill_pointer,6,1,1,(predef_nbits),(NBits_size),(predef_XYscale),(predef_nbits),(predef_XYscale),(predef_nbits),0,1,0,(NBits_size))
-            #char ref_id#2
-            #char matrix#7
-            add fillstyles_size (2+7)
-        endelse
-    endif
-    add shape_size fillstyles_size
-    #
-    char LineStyleCount#1
-    char line_points#2
-    data color#1
-    vdata linestyles^LineStyleCount
-    sd linestyles_size=1
-    set LineStyleCount 0
-    if linewidth!=0
-        set LineStyleCount 1
-        mult linewidth 20
-        call stack_to_word_arg(linewidth,#line_points)
-        setcall color dword_swap(linecolor)
-        add linestyles_size (WORD+DWORD)
-    endif
-    add shape_size linestyles_size
-    #NumFillBits/NumLineBits
-    call NFill_NLin(0,FillStyleCount,LineStyleCount)
-    sd NumFill_NumLin;setcall NumFill_NumLin NFill_NLin(1,(TRUE));mult NumFill_NumLin 0x10;orcall NumFill_NumLin NFill_NLin(1,(FALSE))
-    inc shape_size
-    #shaperecord[n]
-    sd shapewithstyle_record_start
-    setcall shapewithstyle_record_start shapewithstyle_records()
-    value pointer#1;data pos#1
-    set pos 0x80
-    set pointer shapewithstyle_record_start
-    sd p_dest_pos^pointer
-    while args#!=-1
-        call shape_records_add(p_dest_pos,#args)
-    endwhile
-    data end={0,0}
-    sd end_record^end
-    call shape_records_add(p_dest_pos,#end_record)
-    if pos!=0x80
-        inc pointer
-    endif
-    sd records_sz
-    set records_sz pointer
-    sub records_sz shapewithstyle_record_start
-    add shape_size records_sz
-
-    call swf_tag_recordheader_entry((DefineShape3),shape_size)
-    call swf_mem_add(#shape_id,2)
-    call swf_mem_add(rect,rect_size)
-    call swf_mem_add(fillstyles,fillstyles_size)
-    call swf_mem_add(linestyles,linestyles_size)
-    call swf_mem_add(#NumFill_NumLin,1)
-    call swf_mem_add(shapewithstyle_record_start,records_sz)
-
-    return shape_id
+	base swf_new.bp;call ebase(swf_new.bp)
+	sd id;set id swf_shape_local(width,height,args)
+	return id
 endfunction
 
 #id
 functionX swf_shape_basic(sd width,sd height,sd fillcolor,sd linecolor)
+base swf_new.bp;call ebase(swf_new.bp)
 #sd width
 #sd height
 #sd fillcolor       RGBA color to fill the shape
@@ -526,38 +225,15 @@ functionX swf_shape_basic(sd width,sd he
 endfunction
 
 #id
+import "swf_shape_bitmap_local" swf_shape_bitmap_local
 functionX swf_shape_bitmap(sd bitmapId,sd width,sd height)
-#sd bitmapId    id, e.g.: from swf_dbl
-    sd shape_id
-    sd width_variable
-    set width_variable width
-    sd height_variable
-    set height_variable height
-    data struct=repeating_bitmap_fill
-        data refid#1
-        set refid bitmapId
-    data *=0
-    data *={0,StateFillStyle0}
-    data *={1,1}
-        data w1#1;data *=0
-        set w1 width_variable
-    data *={1,1}
-        data *=0;data h1#1
-        set h1 height_variable
-    data *={1,1}
-        data w2#1;data *=0
-        mult width_variable -1
-        set w2 width_variable
-    data *={1,1}
-        data *=0;data h2#1
-        mult height_variable -1
-        set h2 height_variable
-    data *=-1
-    setcall shape_id swf_shape(width,height,#struct)
-    return shape_id
+	base swf_new.bp;call ebase(swf_new.bp)
+	sd id;set id swf_shape_bitmap_local(bitmapId,width,height)
+	return id
 endfunction
 #id
 functionX swf_shape_border(sd width,sd height,sd linesize,sd linecolor)
+base swf_new.bp;call ebase(swf_new.bp)
 #sd width      border width
 #sd height     border height
 #sd linesize  line size
@@ -589,94 +265,41 @@ functionX swf_shape_border(sd width,sd h
     data *=0;data nord#1
         set nord neg_h
     data *=-1
-    setcall shape swf_shape(width,height,#border)
+    setcall shape swf_shape_local(width,height,#border)
     return shape
 endfunction
 
 #id
 functionX swf_image(ss imagepath)
+base swf_new.bp;call ebase(swf_new.bp)
 #ss imagepath = path name for the dbl image
     data width#1;data *height#1
-    sd shape_id;setcall shape_id swf_image_ex(imagepath,#width)
+    sd shape_id;setcall shape_id swf_image_ex_local(imagepath,#width)
     return shape_id
 endfunction
 #id
+import "swf_image_ex_local" swf_image_ex_local
 functionX swf_image_ex(ss imagepath,sd p_wh)
-#ss imagepath = path name for the dbl image
-#sd p_wh      = pointer width height
-    sd dbl_id
-    setcall dbl_id swf_dbl_ex(imagepath,p_wh)
-    #add dbl to a shape
-    sd shape_id
-    sd width;set width p_wh#;add p_wh (DWORD)
-    setcall shape_id swf_shape_bitmap(dbl_id,width,p_wh#)
-    return shape_id
+	base swf_new.bp;call ebase(swf_new.bp)
+	sd id;set id swf_image_ex_local(imagepath,p_wh)
+	return id
 endfunction
 
 ######################dbl
 #id
 functionX swf_dbl(ss imagepath)
+base swf_new.bp;call ebase(swf_new.bp)
 #ss imagepath = path name for the dbl image
     sd id
-    setcall id swf_dbl_ex(imagepath,0)
+    setcall id swf_dbl_ex_local(imagepath,0)
     return id
 endfunction
-import "file_get_content" file_get_content
 #id
+import "swf_dbl_ex_local" swf_dbl_ex_local
 functionX swf_dbl_ex(ss imagepath,sd p_wh)
-#ss imagepath = path name for the dbl image
-#sd p_wh = pointer width a dword and height next dword
-    sd id
-    sd mem
-    sd size
-    sd cursor
-    setcall mem file_get_content(imagepath,#size)
-    if size<8
-        call error("missing image header")
-    endif
-    char hd_magic1={D,B,l,1};vdata magic1^hd_magic1
-    char hd_magic2={D,B,l,2};vdata magic2^hd_magic2
-    if mem#!=magic1#
-    if mem#!=magic2#
-        call printEr("expecting dbl(define bits lossless 1 or 2)header; filepath: ")
-        call error(imagepath)
-    endif;endif
-    sd header=DefineBitsLossless2
-    if mem#=magic1#
-        set header (DefineBitsLossless)
-    endif
-    set cursor mem
-    add cursor (DWORD)
-
-    sd image_size
-    setcall image_size dword_swap(cursor#)
-    add cursor (DWORD)
-    sub size (2*DWORD)
-    if image_size>size
-        call error("size error at dbl")
-    endif
-    #add the define bits lossless file to mem
-    add size (WORD)
-    import "swf_tag_recordheader_long_entry" swf_tag_recordheader_long_entry
-    call swf_tag_recordheader_long_entry(header,size)
-    setcall id identifiers_get()
-    call swf_mem_add(#id,(WORD))
-    if p_wh!=0
-        #get width and height;BitmapFormat UI8,BitmapWidth UI16,BitmapHeight UI16
-        if image_size<(2*WORD+BYTE)
-            call error("size error at dbl when looking for width/height")
-        endif
-        sd pointer
-        set pointer cursor
-        add pointer (BYTE)
-        setcall p_wh# word_arg_to_stack(pointer)
-        add pointer (WORD)
-        add p_wh (DWORD)
-        setcall p_wh# word_arg_to_stack(pointer)
-    endif
-    call swf_mem_add(cursor,image_size)
-    call file_get_content__resources_free()
-    return id
+	base swf_new.bp;call ebase(swf_new.bp)
+	sd id;set id swf_dbl_ex_local(imagepath,p_wh)
+	return id
 endfunction
 import "file_open" file_open
 import "file_seek" file_seek
@@ -685,6 +308,7 @@ import "filesize" filesize
 
 #width
 functionX swf_dbl_width(ss imagepath)
+base swf_new.bp;call ebase(swf_new.bp)
 #ss imagepath = path name for the dbl image
     sd file
     setcall file file_open(imagepath,(_open_read))
@@ -702,6 +326,7 @@ functionX swf_dbl_width(ss imagepath)
 endfunction
 #height
 functionX swf_dbl_height(ss imagepath)
+base swf_new.bp;call ebase(swf_new.bp)
 #ss imagepath = path name for the dbl image
     sd file
     setcall file file_open(imagepath,(_open_read))
@@ -721,7 +346,8 @@ endfunction
 ##############
 import "exportsId_get" exportsId_get
 functionX swf_done()
-    call swf_exports_done();#remaining exports?
+base swf_new.bp;call ebase(swf_new.bp)
+	call swf_exports_done_local();#remaining exports?
 
 	sd p;set p swf_frames_pointer()
 	call swf_actionblock((mem_exp_part_done),(from_done),p);#in case there are remaining actions
@@ -731,104 +357,33 @@ functionX swf_done()
     call freereset()
 endfunction
 
-functionX swf_new(ss path,sd width,sd height,sd backgroundcolor,sd fps)
-	callg swf_new_ex(path,width,height,backgroundcolor,fps,(debug_none))
-endfunction
+import "swf_new_ex_local" swf_new_ex_local
 functionX swf_new_ex(ss path,sd width,sd height,sd backgroundcolor,sd fps,sd add_debug)
-#ss path             file out pathname
-#sd width
-#sd height
-#sd backgroundcolor  0xRRGGBB  value
-#sd fps              swf frames per second
-
-    #F=uncompressed, C=ZLib
-const hd_start=\
-    char *=F
-    char *={W,S}
-    char *version=8
-const file_sz_off=\
-    data *FileLength#1
-data size=\-hd_start
-vdata hd_pack%hd_start
-    #rect
-const hd2=\
-    char *FrameRate=0
-        char FrameRate#1
-    char *FrameCount={0,0}  #will be incremented at least once
-data size2=\-hd2
-vdata hd_pack2%hd2
-
-	import "flags_init" flags_init
-	call flags_init(add_debug,path)
-    call swf_mem((mem_exp_init),path,(file_sz_off-hd_start))
-
-    #identifiers for swf
-    call identifiers_set(0);#font with id 0 isn't visible in the placements
-
-    call swf_mem_add(hd_pack,size)
-    call rect_add(width,height)
-    #x.x format
-    set FrameRate fps
-    call swf_mem_add(hd_pack2,size2)
-    #
-
-	call swf_frames_reg() #is a rect with nbits above, ..., faster here
-
-    char setbackgroundtag#2
-    char red#1
-    char green#1
-    char blue#1
-
-    set blue backgroundcolor
-    sd g_color=0xff00;and g_color backgroundcolor;div g_color 0x100;set green g_color
-    sd r_color=0xff0000;and r_color backgroundcolor;div r_color (0x100*0x100);set red r_color
-    call swf_tag(#setbackgroundtag,(SetBackGroundColor),3)
+	base swf_new.bp;call ebase(swf_new.bp)
+	call swf_new_ex_local(path,width,height,backgroundcolor,fps,add_debug)
 endfunction
 
+import "swf_placeobject_local" swf_placeobject_local
 functionX swf_placeobject(sd refid,sd depth)
-#sd refid    the id
-#sd depth    depth value
-     call swf_placeobject_coords(refid,depth,0,0)
+	base swf_new.bp;call ebase(swf_new.bp)
+	call swf_placeobject_local(refid,depth)
 endfunction
 #                                                  if not data here, then will conflict at c language where we talk about int
+import "swf_placeobject_coords_local" swf_placeobject_coords_local
 functionX swf_placeobject_coords(sd refid,sd depth,datax x,datax y)
-#sd refid
-#sd depth
-#sd x         x coordinate
-#sd y         y coordinate
-#const PlaceFlagHasClipActions=0x80
-#const PlaceFlagHasClipDepth=0x40
-#const PlaceFlagHasName=0x20
-#const PlaceFlagHasRatio=0x10
-#const PlaceFlagHasColorTransform=0x8
-const PlaceFlagHasMatrix=0x4
-const PlaceFlagHasCharacter=0x2
-#const PlaceFlagMove=0x1
-    sd flags=PlaceFlagHasMatrix|PlaceFlagHasCharacter
-    sd matrix
-    datax matrixsz#1
-    call matrix_translate(#matrix,#matrixsz,x,y)
-
-    sd size=5
-    add size matrixsz
-    call swf_tag_recordheader_entry((PlaceObject2),size)
-    call swf_mem_add(#flags,1)
-    call swf_mem_add(#depth,2)
-    #character id
-    call swf_mem_add(#refid,2)
-    #matrix
-    call swf_mem_add(matrix,matrixsz)
+	base swf_new.bp;call ebase(swf_new.bp)
+	call swf_placeobject_coords_local(refid,depth,x,y)
 endfunction
+import "swf_removeobject_local" swf_removeobject_local
 functionX swf_removeobject(sd depth)
-#sd depth        depth for the removeobject2 tag
-    call swf_tag_recordheader_entry((RemoveObject2),2)
-    #depth
-    call swf_mem_add(#depth,2)
+	base swf_new.bp;call ebase(swf_new.bp)
+	call swf_removeobject_local(depth)
 endfunction
 
 import "swf_showframe_base" swf_showframe_base
 
 functionX swf_showframe()
+base swf_new.bp;call ebase(swf_new.bp)
 	sd p;set p swf_frames_pointer()
 	call swf_showframe_base(p)
 endfunction
@@ -839,6 +394,7 @@ endfunction
 
 #id
 functionX swf_sprite_done(sd spriteid)
+base swf_new.bp;call ebase(swf_new.bp)
 #sd spriteid        pre-id created with swf_sprite_new
     call swf_mem((mem_exp_change),spriteid)
 
@@ -877,6 +433,7 @@ endfunction
 import "new_sprite_id" new_sprite_id
 #pre-id
 functionX swf_sprite_new()
+base swf_new.bp;call ebase(swf_new.bp)
 #a pre-id to be used
     sd id
     setcall id new_sprite_id()
@@ -889,27 +446,31 @@ functionX swf_sprite_new()
     return id
 endfunction
 functionX swf_sprite_placeobject(sd spriteid,sd object,sd depth)
+base swf_new.bp;call ebase(swf_new.bp)
 #sd spriteid          pre-id
 #sd object,sd depth   same as swf_placeobject
     call swf_mem((mem_exp_change),spriteid)
-    call swf_placeobject(object,depth)
+    call swf_placeobject_local(object,depth)
     call swf_mem((mem_exp_change_back))
 endfunction
 functionX swf_sprite_placeobject_coords(sd spriteid,sd object,sd depth,sd x,sd y)
+base swf_new.bp;call ebase(swf_new.bp)
 #sd spriteid                   pre-id
 #sd object,sd depth,sd x,sd y  same as swf_placeobject_coords
     call swf_mem((mem_exp_change),spriteid)
-    call swf_placeobject_coords(object,depth,x,y)
+    call swf_placeobject_coords_local(object,depth,x,y)
     call swf_mem((mem_exp_change_back))
 endfunction
 functionX swf_sprite_removeobject(sd spriteid,sd depth)
+base swf_new.bp;call ebase(swf_new.bp)
 #sd spriteid   pre-id
 #sd depth      same as swf_removeobject
     call swf_mem((mem_exp_change),spriteid)
-    call swf_removeobject(depth)
+    call swf_removeobject_local(depth)
     call swf_mem((mem_exp_change_back))
 endfunction
 functionX swf_sprite_showframe(sd spriteid)
+base swf_new.bp;call ebase(swf_new.bp)
 #sd spriteid   pre-id
     call swf_mem((mem_exp_change),spriteid)
     call swf_actionblock((mem_exp_change),spriteid)
@@ -924,6 +485,7 @@ endfunction
 #exports
 
 functionX swf_exports_add(sd id,ss name)
+base swf_new.bp;call ebase(swf_new.bp)
 #sd id
 #ss name       name to be used at the actionscript
     sd exports
@@ -955,21 +517,8 @@ functionX swf_exports_add(sd id,ss name)
     #
     call swf_mem((mem_exp_change_back))
 endfunction
+import "swf_exports_done_local" swf_exports_done_local
 functionX swf_exports_done()
-#write all the exports to the swf
-    sd exports
-    setcall exports exportsId_get()
-    sd block
-    setcall block struct_ids((ids_get),exports)
-    sd size
-    setcall size block_get_size(block)
-    if size!=0
-        #
-        call swf_tag_recordheader_entry((ExportAssets),size)
-        #
-        sd exp
-        setcall exp block_get_mem(block)
-        call swf_mem_add(exp,size)
-        call block_reset_size(block)
-    endif
+	base swf_new.bp;call ebase(swf_new.bp)
+	call swf_exports_done_local()
 endfunction
--- actionswf-1.orig/src/util.oc
+++ actionswf-1/src/util.oc
@@ -111,6 +111,11 @@ function block_get_size(sd block)
     sub size (mem_struct_size)
     return size
 endfunction
+#psize
+function block_get_psize(sd block)
+	add block (mem_struct__size_off)
+	return block
+endfunction
 #size
 function block_get_fullsize(sd block)
     sd size
@@ -305,23 +310,26 @@ import "freereset" freereset   #..x with
 import "action_debug_free" action_debug_free
 import "file_get_content__resources_free" file_get_content__resources_free
 
-
+function ebase(valuex bp)
+end
 
 function erbool()
-    aftercall ebool
-    return #ebool
+	#aftercall ebool #still needed at flashalizer at aftecall_get and _reset
+	char ebool=0
+	return #ebool
 endfunction
 
 
 
 function error(ss msg)
-    call string_nl_print(msg)
-    call action_error()
+	call string_nl_print(msg)
+	call action_error()
 
 	call freereset()
 	call freelater()
 
-    ss p;setcall p erbool();set p# 1
+	ss p;setcall p erbool();set p# 1
+	leave ebase.bp
 endfunction
 
 #
--- actionswf-1.orig/src/x.oc
+++ actionswf-1/src/x.oc
@@ -52,7 +52,7 @@ importx "fread" fread
 importx "fclose" fclose
 
 
-aftercallimport ebool
+#aftercallimport ebool
 
 
 import "action__code_row" action__code_row
--- actionswf-1.orig/tests/.expected/a.swf.log
+++ actionswf-1/tests/.expected/a.swf.log
@@ -1,5 +1,5 @@
 0
-24
+26
 
 /*
 debug_x
@@ -17,12 +17,14 @@ var b=(-2+0x2-2*2/2%2&2|2^2<2>2==2!=2<=2
 var c=1.2;var d=a[0];var e='q';
 f=2;var g;delete g;delete this.f;
 h=function(){var a;}var i=h();
-if(2==2){var j;}else if(2==2){var k;}else{var l;}
+if(2==2){var j;return 9;}else if(2==2){var k;}else{var l;}
 while(2==2){var m;}
 f++;f--;f+=2;
 for(var n=2;n<3;n++){break;}
 for(var o in a){continue;}
 for(a[0] in a[0]){}
+while(true){break;continue;var p;}
+for(;;){}
 
 5,9,0009
 1,5,
@@ -33,9 +35,11 @@ for(a[0] in a[0]){}
 1,2,9,,2,2,,5,,,2,2,
 1,2,5,,2,,2,,,2,,2,,
 1,2,5,0006,2,,,2,5,2,,
-1,5,5,,,2,2,,2,5,5,,,2,2,,2,2,
+1,5,5,,,2,2,,5,,5,5,,,2,2,,2,2,
 1,5,5,,,2,2,,2
 1,2,,,,,2,,,,,2,,,5,,
-1,2,5,,2,2,,,,,2,,5,,,2,2,2
-1,2,,,1,1,,2,2,2,,2,2
+1,2,5,,2,2,,,,,2,,5,,,2,2
+1,2,,,1,1,,2,2,2,,2
 1,2,,5,,,1,1,,2,2,,5,2,,2
+1,2,2,2,,2
+1,2,,,2,2
--- actionswf-1.orig/tests/.expected/a.swf.txt
+++ actionswf-1/tests/.expected/a.swf.txt
@@ -1,15 +1,16 @@
-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
+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
+AgAFAJkCAO//AAAA
--- actionswf-1.orig/tests/.expected/a.swf.x.txt
+++ actionswf-1/tests/.expected/a.swf.x.txt
@@ -1,31 +1,33 @@
-mAEAAAAAAABmdW5jdGlvbiBmbgBhAHtyZXR1cm4gMgB9dGhpcwB0aGlzAGdldFZlcnNpb24AKTt0
+yAEAAAAAAABmdW5jdGlvbiBmbgBhAHtyZXR1cm4gMgB9dGhpcwB0aGlzAGdldFZlcnNpb24AKTt0
 aGlzAHRoaXMAdGhpcwB0aGlzAGEAbmV3IEFycmF5ADEAO3ZhciBiACgtMgAweDIAMgAyADIAMgAy
 ADIAMgAyADIAPTIAPTIAPTIAPTIAPDIAPjIAPj4yACYyAHwyADIAMwAAdmFyIGMAMS4yAHZhciBk
 AGEAMAAAdmFyIGUAJ3EAAGYAMgB2YXIgZwBkZWxldGUgZwBkZWxldGUgdGhpcwBmAGgAZnVuY3Rp
-b24AKXt2YXIgYQB9dmFyIGkAaAApAGlmKDIAPTIAe3ZhciBqAH1lbHNlIGlmKDIAPTIAe3ZhciBr
-AH1lbHNle3ZhciBsAH13aGlsZSgyAD0yAHt2YXIgbQB9ZgArAGYALQBmAAAyAGZvcih2YXIgbgAy
-AG4AMwBuACsAe2JyZWFrO31mb3IodmFyIG8AaW4gYQB7Y29udGludWU7fWZvcihhADAAAGluIGEA
-MAAAe30AAAAAAAAAAAAAAAAwMAPzCgAAAAAAAAANAAAAAAAAAAAAAAAAAAAAPgAAAAcAAAACAAAA
-/////7u7u/sQEAHxJAAAAAAAAADu7u7+GgAAAAAAAAAfAAAAAAAAAAAAAAAAAAAAqqqq+k8AAAAx
-AAAAAAAAADYAAAAAAAAAOwAAAAAAAAAAAAAAAAAAAKqqqvocAAAAQAAAAAAAAAD/////HQAAAEUA
-AAAAAAAAQEAE9EsAAAAAAAAABwAAAAEAAAD/////7u7u/gAAAAAAAAAAPAAAAFgAAAAAAAAAgIAI
-+AcAAAD+////RwAAAAcAAAACAAAACwAAAAcAAAACAAAADAAAAAcAAAACAAAADQAAAAcAAAACAAAA
-PwAAAAcAAAACAAAAYAAAAAcAAAACAAAAYQAAAAcAAAACAAAAYgAAAAcAAAACAAAAcHAH90gAAAAA
-AAAABwAAAAIAAABwcAf3ZwAAAAAAAAAHAAAAAgAAAHBwB/dJAAAAAAAAAAcAAAACAAAAcHAH90kA
-AAASAAAABwAAAAIAAABwcAf3ZwAAABIAAAAHAAAAAgAAAHBwB/dIAAAAEgAAAAcAAAACAAAAYwAA
-AAcAAAACAAAAZAAAAAcAAAACAAAAZQAAAAcAAAACAAAAEAAAAAcAAAACAAAAEQAAAAcAAAACAAAA
-0NAN/QcAAAACAAAA/////wcAAAADAAAA//////////88AAAAmQAAAAAAAAAGAAAAMzPzPzMzMzP/
-////PAAAAKMAAAAAAAAATgAAAKUAAAAAAAAAAAAAAAAAAABQUAX1BwAAAAAAAAD/////AAAAAAAA
-AACqqqr6/////zwAAACuAAAAAAAAAAgAAACxAAAAAAAAAP////8dAAAAtAAAAAAAAAAHAAAAAgAA
-AP////9BAAAAvAAAAAAAAAA7AAAAxQAAAAAAAAA6AAAAzgAAAAAAAADTAAAAAAAAAAAAAAAAAAAA
-qqqq+h0AAADVAAAAAAAAADAwA/PfAAAAAAAAAAAAAAAAAAAAQQAAAOYAAAAAAAAAu7u7+zwAAADt
-AAAAAAAAACAgAvLvAAAAAAAAAO7u7v4AAAAAAAAAAP////+dAAAABwAAAAIAAABwcAf3SQAAAAAA
-AAAHAAAAAgAAAP////9BAAAAAAEAAAAAAAC7u7v7AAAAQJ0AAAAHAAAAAgAAAHBwB/dJAAAAAAAA
-AAcAAAACAAAA/////0EAAAAVAQAAAAAAALu7u/sAAABAQQAAACEBAAAAAAAAzMzM/AIAAAAGBgUF
-BwAAAAIAAABwcAf3SQAAAAAAAAAHAAAAAgAAAP////9BAAAANAEAAAAAAADd3d39HQAAADcBAAAA
-AAAAUAAAAB0AAAA7AQAAAAAAAFEAAAAdAAAAPwEAAAAAAABgYAb2RwAAAAcAAAACAAAA/////woK
-CQmwsAv7PAAAAEwBAAAAAAAABwAAAAIAAAD/////wMAM/B0AAABUAQAAAAAAAFAAAADAwAz8HAAA
-AFABAAAAAAAAcHAH90gAAAAAAAAABwAAAAMAAAD/////kJAJ+d3d3f0KCgkJHAAAAG0BAAAAAAAA
-PAAAAGgBAAAAAAAAoKAK+t3d3f0KCgkJTgAAAIYBAAAAAAAAAAAAAAAAAABQUAX1BwAAAAAAAAD/
-////AAAAAAAAAACqqqr6TwAAAH4BAAAAAAAAAAAAAAAAAABQUAX1BwAAAAAAAAD/////AAAAAAAA
-AACqqqr63d3d/f////8=
+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
--- actionswf-1.orig/tests/.expected/a.swf.x32.txt
+++ actionswf-1/tests/.expected/a.swf.x32.txt
@@ -1,27 +1,29 @@
-nAEAAGZ1bmN0aW9uIGZuAGEAe3JldHVybiAyAH10aGlzAHRoaXMAZ2V0VmVyc2lvbgApO3RoaXMA
+zAEAAGZ1bmN0aW9uIGZuAGEAe3JldHVybiAyAH10aGlzAHRoaXMAZ2V0VmVyc2lvbgApO3RoaXMA
 dGhpcwB0aGlzAHRoaXMAYQBuZXcgQXJyYXkAMQA7dmFyIGIAKC0yADB4MgAyADIAMgAyADIAMgAy
 ADIAMgA9MgA9MgA9MgA9MgA8MgA+MgA+PjIAJjIAfDIAMgAzAAB2YXIgYwAxLjIAdmFyIGQAYQAw
 AAB2YXIgZQAncQAAZgAyAHZhciBnAGRlbGV0ZSBnAGRlbGV0ZSB0aGlzAGYAaABmdW5jdGlvbgAp
-e3ZhciBhAH12YXIgaQBoACkAaWYoMgA9MgB7dmFyIGoAfWVsc2UgaWYoMgA9MgB7dmFyIGsAfWVs
-c2V7dmFyIGwAfXdoaWxlKDIAPTIAe3ZhciBtAH1mACsAZgAtAGYAADIAZm9yKHZhciBuADIAbgAz
-AG4AKwB7YnJlYWs7fWZvcih2YXIgbwBpbiBhAHtjb250aW51ZTt9Zm9yKGEAMAAAaW4gYQAwAAB7
-fQAAAAAAAAAAAAAAAAAAAAAwMAPzCgAAAA0AAAAAAAAAPgAAAAcAAAACAAAA/////7u7u/sQEAHx
-JAAAAO7u7v4aAAAAHwAAAAAAAACqqqr6TwAAADEAAAA2AAAAOwAAAAAAAACqqqr6HAAAAEAAAAD/
-////HQAAAEUAAABAQAT0SwAAAAcAAAABAAAA/////+7u7v4AAAAAPAAAAFgAAACAgAj4BwAAAP7/
-//9HAAAABwAAAAIAAAALAAAABwAAAAIAAAAMAAAABwAAAAIAAAANAAAABwAAAAIAAAA/AAAABwAA
-AAIAAABgAAAABwAAAAIAAABhAAAABwAAAAIAAABiAAAABwAAAAIAAABwcAf3SAAAAAAAAAAHAAAA
-AgAAAHBwB/dnAAAAAAAAAAcAAAACAAAAcHAH90kAAAAAAAAABwAAAAIAAABwcAf3SQAAABIAAAAH
-AAAAAgAAAHBwB/dnAAAAEgAAAAcAAAACAAAAcHAH90gAAAASAAAABwAAAAIAAABjAAAABwAAAAIA
-AABkAAAABwAAAAIAAABlAAAABwAAAAIAAAAQAAAABwAAAAIAAAARAAAABwAAAAIAAADQ0A39BwAA
-AAIAAAD/////BwAAAAMAAAD//////////zwAAACZAAAABgAAADMz8z8zMzMz/////zwAAACjAAAA
-TgAAAKUAAAAAAAAAUFAF9QcAAAAAAAAA/////wAAAACqqqr6/////zwAAACuAAAACAAAALEAAAD/
-////HQAAALQAAAAHAAAAAgAAAP////9BAAAAvAAAADsAAADFAAAAOgAAAM4AAADTAAAAAAAAAKqq
-qvodAAAA1QAAADAwA/PfAAAAAAAAAEEAAADmAAAAu7u7+zwAAADtAAAAICAC8u8AAADu7u7+AAAA
-AP////+dAAAABwAAAAIAAABwcAf3SQAAAAAAAAAHAAAAAgAAAP////9BAAAAAAEAALu7u/sAAABA
-nQAAAAcAAAACAAAAcHAH90kAAAAAAAAABwAAAAIAAAD/////QQAAABUBAAC7u7v7AAAAQEEAAAAh
-AQAAzMzM/AIAAAAGBgUFBwAAAAIAAABwcAf3SQAAAAAAAAAHAAAAAgAAAP////9BAAAANAEAAN3d
-3f0dAAAANwEAAFAAAAAdAAAAOwEAAFEAAAAdAAAAPwEAAGBgBvZHAAAABwAAAAIAAAD/////CgoJ
-CbCwC/s8AAAATAEAAAcAAAACAAAA/////8DADPwdAAAAVAEAAFAAAADAwAz8HAAAAFABAABwcAf3
-SAAAAAAAAAAHAAAAAwAAAP////+QkAn53d3d/QoKCQkcAAAAbQEAADwAAABoAQAAoKAK+t3d3f0K
-CgkJTgAAAIYBAAAAAAAAUFAF9QcAAAAAAAAA/////wAAAACqqqr6TwAAAH4BAAAAAAAAUFAF9QcA
-AAAAAAAA/////wAAAACqqqr63d3d/f////8=
+e3ZhciBhAH12YXIgaQBoACkAaWYoMgA9MgB7dmFyIGoAcmV0dXJuIDkAfWVsc2UgaWYoMgA9MgB7
+dmFyIGsAfWVsc2V7dmFyIGwAfXdoaWxlKDIAPTIAe3ZhciBtAH1mACsAZgAtAGYAADIAZm9yKHZh
+ciBuADIAbgAzAG4AKwB7YnJlYWs7fWZvcih2YXIgbwBpbiBhAHtjb250aW51ZTt9Zm9yKGEAMAAA
+aW4gYQAwAAB7fXdoaWxlKHRydWUAe2JyZWFrO2NvbnRpbnVlO3ZhciBwAH1mb3IoOwApe30AAAAA
+AAAAAAAAAAAwMAPzCgAAAA0AAAAAAAAAPgAAAAcAAAACAAAA/////7u7u/sQEAHxJAAAAO7u7v4a
+AAAAHwAAAAAAAACqqqr6TwAAADEAAAA2AAAAOwAAAAAAAACqqqr6HAAAAEAAAAD/////HQAAAEUA
+AABAQAT0SwAAAAcAAAABAAAA/////+7u7v4AAAAAPAAAAFgAAACAgAj4BwAAAP7///9HAAAABwAA
+AAIAAAALAAAABwAAAAIAAAAMAAAABwAAAAIAAAANAAAABwAAAAIAAAA/AAAABwAAAAIAAABgAAAA
+BwAAAAIAAABhAAAABwAAAAIAAABiAAAABwAAAAIAAABwcAf3SAAAAAAAAAAHAAAAAgAAAHBwB/dn
+AAAAAAAAAAcAAAACAAAAcHAH90kAAAAAAAAABwAAAAIAAABwcAf3SQAAABIAAAAHAAAAAgAAAHBw
+B/dnAAAAEgAAAAcAAAACAAAAcHAH90gAAAASAAAABwAAAAIAAABjAAAABwAAAAIAAABkAAAABwAA
+AAIAAABlAAAABwAAAAIAAAAQAAAABwAAAAIAAAARAAAABwAAAAIAAADQ0A39BwAAAAIAAAD/////
+BwAAAAMAAAD//////////zwAAACZAAAABgAAADMz8z8zMzMz/////zwAAACjAAAATgAAAKUAAAAA
+AAAAUFAF9QcAAAAAAAAA/////wAAAACqqqr6/////zwAAACuAAAACAAAALEAAAD/////HQAAALQA
+AAAHAAAAAgAAAP////9BAAAAvAAAADsAAADFAAAAOgAAAM4AAADTAAAAAAAAAKqqqvodAAAA1QAA
+ADAwA/PfAAAAAAAAAEEAAADmAAAAu7u7+zwAAADtAAAAICAC8u8AAADu7u7+AAAAAP////+dAAAA
+BwAAAAIAAABwcAf3SQAAAAAAAAAHAAAAAgAAAP////9BAAAAAAEAAD4AAAAHAAAACQAAAP////+7
+u7v7AAAAQJ0AAAAHAAAAAgAAAHBwB/dJAAAAAAAAAAcAAAACAAAA/////0EAAAAeAQAAu7u7+wAA
+AEBBAAAAKgEAAMzMzPwCAAAABgYFBQcAAAACAAAAcHAH90kAAAAAAAAABwAAAAIAAAD/////QQAA
+AD0BAADd3d39HQAAAEABAABQAAAAHQAAAEQBAABRAAAAHQAAAEgBAABgYAb2RwAAAAcAAAACAAAA
+/////+DgDv6wsAv7PAAAAFUBAAAHAAAAAgAAAP/////AwAz8HQAAAF0BAABQAAAAwMAM/BwAAABZ
+AQAAcHAH90gAAAAAAAAABwAAAAMAAAD/////kJAJ+d3d3f3g4A7+HAAAAHYBAAA8AAAAcQEAAKCg
+Cvrd3d394OAO/k4AAACPAQAAAAAAAFBQBfUHAAAAAAAAAP////8AAAAAqqqq+k8AAACHAQAAAAAA
+AFBQBfUHAAAAAAAAAP////8AAAAAqqqq+t3d3f0GBgUFHAAAAJwBAAD/////kJAJ+aCgCvpBAAAA
+tQEAAN3d3f3g4A7+sLAL+8DADPzAwAz8HAAAAL0BAAD/////3d3d/f////8=
--- actionswf-1.orig/tests/a.oc
+++ actionswf-1/tests/a.oc
@@ -5,10 +5,12 @@ importx "_exit" exit
 
 einclude "../dev/import.h"
 
-entryraw main(sd argc)
+include "entryraw.oc" "entry.oc"
 
 sd f=debug_log|debug_x_pad
 if argc=2
+	importx "puts" puts
+	call puts("flag_x")
 	or f (flag_x)
 end
 call swf_new_ex("a.swf",0x80,0x80,0x001100,2,f)
@@ -30,12 +32,14 @@ var b=(-2+0x2-2*2/2%2&2|2^2<2>2==2!=2<=2
 var c=1.2;var d=a[0];var e='q';
 f=2;var g;delete g;delete this.f;
 h=function(){var a;}var i=h();
-if(2==2){var j;}else if(2==2){var k;}else{var l;}
+if(2==2){var j;return 9;}else if(2==2){var k;}else{var l;}
 while(2==2){var m;}
 f++;f--;f+=2;
 for(var n=2;n<3;n++){break;}
 for(var o in a){continue;}
 for(a[0] in a[0]){}
+while(true){break;continue;var p;}
+for(;;){}
 ")
 
 call swf_done()
--- actionswf-1.orig/tests/as
+++ actionswf-1/tests/as
@@ -1,6 +1,6 @@
 
 if [ -z "${conv_64}" ]; then conv_64=0; fi
-o a.oc logfile 0 conv_64 ${conv_64} && {
+o a.oc logfile 0 conv_64 ${conv_64} include_sec 1 && {
 	if [ ${conv_64} = 1 ]; then
 		if [ "`dpkg-architecture -qDEB_HOST_ARCH`" = "amd64" ]; then #cross
 			LD_LIBRARY_PATH=/home/bc/Desktop/out/ld/usr/lib/i386-linux-gnu /home/bc/Desktop/out/ld/usr/bin/i686-linux-gnu-ld.bfd \
@@ -13,5 +13,6 @@ o a.oc logfile 0 conv_64 ${conv_64} && {
 	fi && {
 		if [ -z "${LD_LIBRARY_PATH}" ]; then LD_LIBRARY_PATH=../src; fi
 		LD_LIBRARY_PATH=${LD_LIBRARY_PATH} ./a.out
+		LD_LIBRARY_PATH=${LD_LIBRARY_PATH} ./a.out x
 	}
 }
--- actionswf-1.orig/tests/c
+++ actionswf-1/tests/c
@@ -34,7 +34,14 @@ smart_diff () {
 	smart_diff .expected/a.swf a.swf
 	if [ $? != 0 ]; then
 		if [ ${1} != 0 ]; then { echo not ok; exit 1; } fi
-		echo y \?; read -n1 -t $((60*60*24)) ans
+		echo y \? m \?; read -n1 -t $((60*60*24)) ans
+		if [ "${ans}" = "m" ]; then
+			swfdump -D .expected/a.swf > 1
+			swfdump -D a.swf > 2
+			diff 1 2
+			rm 1 2
+			echo y \?; read -n1 -t $((60*60*24)) ans
+		fi
 		if [ "${ans}" != "y" ]; then { echo not ok; exit 1; } fi
 		base64 a.swf > .expected/a.swf.txt
 	fi
--- /dev/null
+++ actionswf-1/tests/entry.oc
@@ -0,0 +1 @@
+entry main(sd argc)
--- /dev/null
+++ actionswf-1/tests/entryraw.oc
@@ -0,0 +1 @@
+entryraw main(sd argc)
--- actionswf-1.orig/x.html
+++ actionswf-1/x.html
@@ -37,8 +37,8 @@
 	<tr><td class="green">2</td></tr>
 	<tr><td class="green">F</td></tr>
 	<tr><td>call_action_left</td><td class="green">C</td></tr>
-	<tr><td class="green" rowspan=2>I</td><td class="red" rowspan=2>{</td><td rowspan=2>else_flag</td><td class="green" colspan=2>I</td>                         <td class="red">}</td></tr>
-	<tr>                                                                                              <td class="green">{1}</td><td colspan=2>block_else_end</td></tr>
+	<tr><td class="green" rowspan=2>I</td><td class="red" rowspan=2>{</td><td rowspan=2>else_flag</td><td class="green">I</td>  <td class="red">}</td></tr>
+	<tr>                                                                                              <td class="green">{1}</td><td>block_else_end</td><td>number_of_elses</td></tr>
 	<tr><td>while_marker</td><td class="green">RG<sup-r>c</sup-r></td><td class="green">{1}</td><td>whileblock_end</td></tr>
 	<tr><td class="green">FR</td></tr>
 	<tr><td>break_flag</td></tr>
@@ -73,9 +73,9 @@
 
 <br>Table FR: <!--  action_parse_conditions<>action_code_write_conditions -->
 <table id="selection_table">
-	<tr><td rowspan=3>for_marker</td><td>for_three</td>                 <td class="green">[2]</td>   <td>inter_for</td><td class="green">[2]</td><td>inter_for</td><td class="green">RG<sup-r>c</sup-r></td><td class="green" rowspan=3>{1}</td><td rowspan=3>whileblock_end</td></tr>
-	<tr>                             <td class="green" colspan=2>RT</td>                             <td class="green" colspan=4 rowspan=2>L</td></tr>
-	<tr>                             <td>ActionEnumerate</td>           <td class="blue">pattern</td></tr>
+	<tr><td rowspan=3>for</td><td>for_three</td>                 <td class="green">[2]</td>   <td>inter_for</td><td class="green">[2]</td><td>inter_for</td><td class="green">RG<sup-r>c</sup-r></td><td class="green" rowspan=3>{1}</td><td rowspan=3>whileblock_end</td></tr>
+	<tr>                      <td class="green" colspan=2>RT</td>                             <td class="green" colspan=4 rowspan=2>L</td></tr>
+	<tr>                      <td>ActionEnumerate</td>           <td class="blue">pattern</td></tr>
 </table>
 
 <br>Table If: <!-- at action_parse_conditions<>at action_code_write_conditions -->
