Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 actionswf (1-95) bionic; urgency=medium
 .
   * pool at xx
Author: bc <bc@bc-desktop>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2024-08-30

--- actionswf-1.orig/Makefile
+++ actionswf-1/Makefile
@@ -18,7 +18,11 @@ $(SUBDIRS):
 
 test:
 	cd tests && conv_64=${conv_64} /bin/bash ./as && conv_64=${conv_64} /bin/bash ./c 1 && cd ffdec && conv_64=${conv_64} /bin/bash ./as && echo tests ok
-
 clean:
 	cd tests; /bin/bash ./c; cd ffdec; /bin/bash ./c; cd ../data; /bin/bash ./c
+install:
+	install -D oaalternative $(DESTDIR)$(prefix)/bin/oaalternative
+uninstall:
+	-rm -f $(DESTDIR)$(prefix)/bin/oaalternative
+
 .NOTPARALLEL:
--- actionswf-1.orig/example/Makefile
+++ actionswf-1/example/Makefile
@@ -21,7 +21,7 @@ linkfile=${linkname}.lib
 ifeq (${platform},win)
 	OFLAGS += inplace_reloc 0
 else
-	libname=${linkname}.so
+	libname=lib${linkname}.so
 	OFLAGS += underscore_pref 1
 	ifdef ldprefer
 		OFLAGS += include_sec 1
@@ -89,7 +89,7 @@ clean:
 	-rm -f ${name}.exe
 	-rm -f ${linkfile}
 	-rm -f ${sfile}.log
-	-rm -f ${sfile}.x
+	-rm -f ${sfile}.x ${sfile}.xx
 	-rm -f ${sfile}
 
 distclean: clean
--- actionswf-1.orig/example/entry.oc
+++ actionswf-1/example/entry.oc
@@ -1,9 +1,8 @@
 
 entryraw main(sd argc,sd *argv0,ss *argv1)
-sd flags=flag_pool
+sd flags=debug_log|flag_pool_write|debug_xpad
 if argc!=1
-	or flags (flag_pool_read)
-	or flags (debug_x_pad|debug_log) #for tests/data
-	or flags (debug_titles) #on display for oadbg
+	or flags (flag_pool_read|flag_x) #for tests/data
+	or flags (debug_titles)
 end
 #sub argv1# 0x30
--- actionswf-1.orig/example/entry_arg.oc
+++ actionswf-1/example/entry_arg.oc
@@ -1,9 +1,8 @@
 
 entry main(sd argc,sv *argv)
-sd flags=flag_pool
+sd flags=debug_log|flag_pool_write|debug_xpad
 if argc!=1
-	or flags (flag_pool_read)
-	or flags (debug_x_pad|debug_log) #for tests/data
-	or flags (debug_titles) #only to be same with entryraw
+	or flags (flag_pool_read|flag_x) #for tests/data
+	or flags (debug_titles)
 end
 #incst argv;ss argv1;set argv1 argv#;sub argv1# 0x30
--- actionswf-1.orig/example/example.oc
+++ actionswf-1/example/example.oc
@@ -54,9 +54,12 @@ call swf_exports_done()
 call action("
 var x_coef=1;
 var y_coef=1;
-this.attachMovie('movie','_movie',1);
-_movie._x=100;
-_movie._y=100;
+function test(){
+	attachMovie('movie','_movie',1);
+	_movie._x=100;
+	_movie._y=100;
+}
+test()
 ")
 
 call swf_showframe()
--- actionswf-1.orig/include/actionswf.h
+++ actionswf-1/include/actionswf.h
@@ -1,7 +1,7 @@
 
 #define flag_forin1 0x20
 #define flag_framesAsShows 0x40
-#define flag_pool 0x100
+#define flag_pool_write 0x100
 #define flag_pool_read 0x200
 
 #ifdef __cplusplus
--- actionswf-1.orig/include/flags.h
+++ actionswf-1/include/flags.h
@@ -8,9 +8,14 @@ const debug_x_pad=0x10
 
 const flag_forin1=0x20
 const flag_framesAsShows=0x40
-const flag_x=0x80
 
-const flags_x=debug_x|debug_x_pad|flag_x
+const flag_x=0x80           #will turn off antix_read flags
+const flag_pool_write=0x100
+const flag_pool_read=0x200  #will turn off flag_pool_write
 
-const flag_pool=0x100
-const flag_pool_read=0x200 # else is write
+const debug_xpad=debug_x|debug_x_pad
+const flags_pool=flag_pool_write|flag_pool_read
+const flags_x=debug_x|flag_x
+const prexx_flags=debug_log|flag_pool_write|debug_x
+const xx_flags=debug_log|flag_pool_read|flag_x
+const antix_read=debug_log|debug_alt|debug_xpad
--- actionswf-1.orig/include/prog.h
+++ actionswf-1/include/prog.h
@@ -13,7 +13,7 @@ const NULL=0
 const BYTE=1
 const WORD=2
 const DWORD=4
-#const QWORD=8
+const QWORD=8
 
 const SEEK_SET=0
 const SEEK_CUR=1
@@ -145,3 +145,5 @@ const doubleH_sign=0x80000000
 
 #const F_OK=0  # 0 2 4 6 are same as windows
 const R_OK=4
+
+include "xlog.h"
--- /dev/null
+++ actionswf-1/include/xlog.h
@@ -0,0 +1,5 @@
+
+const xlog_code=0
+const xlog_unique=1
+const xlog_new=2
+const xlog_id=3
--- actionswf-1.orig/oaalternative
+++ actionswf-1/oaalternative
@@ -104,7 +104,7 @@ while read p; do
 		else
 			if [ ${lines} -gt 0 ]; then
 				lines=$((lines-1))
-			elif [ -z "`echo ${p} | grep ,`" ] && [ -z "`echo ${p} | grep \|`" ]; then
+			elif [ -z "`echo ${p} | grep ,`" ]; then
 				new_tag
 			fi
 		fi
--- actionswf-1.orig/src/actionpool.oc
+++ actionswf-1/src/actionpool.oc
@@ -49,6 +49,27 @@ function pool_realentry(sd pos)
 	set mem# (constpool_multi)
 end
 
+function pool_init(sd flags)
+#when entering a frame must know what is. a frame with no savings at read will have cursor at start and later in that frame if is a pool request then will error
+	sd test=flags_pool
+	and test flags
+	if test!=0
+		and test (flag_pool_read)
+		if test=0
+			set pool_data.write (TRUE)
+			set pool_data.read (FALSE)  #is a read alone test case
+		else
+			set pool_data.write (FALSE) #most of are write else read
+			set pool_data.read (TRUE)
+			and flags (~flag_pool_write)
+		end
+		return flags
+	end
+	set pool_data.write (FALSE)  #there is one write alone test cases
+	set pool_data.read (FALSE)
+	return flags
+end
+
 importx "access" access
 importx "fseek" fseek
 importx "fread" fread
@@ -74,29 +95,13 @@ import "f_write" f_write
 import "memalloc" memalloc
 import "mem_block_add" mem_block_add
 
-function pool_init(sd flags)
-#when entering a frame must know what is. a frame with no savings at read will have cursor at start and later in that frame if is a pool request then will error
-	sd test=flag_pool
-	and test flags
-	if test!=0
-		and flags (flag_pool_read)
-		if flags=0
-			set pool_data.write (TRUE)
-			set pool_data.read (FALSE)  #is a read alone test case
-		else
-			set pool_data.write (FALSE) #most of are write else read
-			set pool_data.read (TRUE)
-		end
-		ret
-	end
-	set pool_data.write (FALSE)  #there are 2 write alone test cases
-	set pool_data.read (FALSE)
-end
 function pool_entry()
 	sd id;set id actionpoolid_get()
 	sd pb;set pb struct_ids_actionpool_filter((ids_get_pointer),id)
 	char a=constpool_unique
-	callg mem_block_add(pb,#a,1)
+	call mem_block_add(pb,#a,1)
+	import "debug_xlog_pool" debug_xlog_pool
+	callg debug_xlog_pool()
 end
 function pool_reentry()
 	sd id;set id actionpoolid_get()
@@ -108,6 +113,8 @@ function pool_reentry()
 		inc mem#
 		add mem cursor
 		if mem#s=(constpool_unique)
+			import "x_log_val_if" x_log_val_if
+			callg x_log_val_if((xlog_unique),0)
 			return (not_an_id)
 		end
 		return (any_id)
@@ -237,6 +244,8 @@ function actionpool_getvalue_ex(ss value
 				if testid=(not_an_id)
 					return (not_an_id)
 				end
+				import "x_log_const" x_log_const
+				call x_log_const(value)
 			end
 		end
 		sd onevalue=1
@@ -260,6 +269,9 @@ function actionpool_getvalue_ex(ss value
 						sub nr count
 						if pool_data.write!=(FALSE)
 							call pool_realentry(nr)
+							call debug_xlog_pool()
+						else
+							callg x_log_val_if((xlog_id),(WORD),nr) #read and rest of xx flags
 						end
 						return nr
 					endif
@@ -275,6 +287,7 @@ function actionpool_getvalue_ex(ss value
 				if testid=(not_an_id)
 					return (not_an_id)
 				end
+				call x_log_const(value)
 			end
 			setcall mem block_get_mem(block)
 		end
--- actionswf-1.orig/src/debug.oc
+++ actionswf-1/src/debug.oc
@@ -144,13 +144,12 @@ import "word_arg_to_stack" word_arg_to_s
 import "for_in" for_in
 import "frames_as_shows" frames_as_shows
 import "ainit" ainit
+import "pool_init" pool_init
 
 importx "fseek" fseek
 importx "fread" fread
 importx "fprintf" fprintf
 
-
-
 #aftercallimport ebool
 
 import "memalloc" memalloc
@@ -161,6 +160,7 @@ import "f_open_mem" f_open_mem
 import "strlen_of" strlen_of
 
 function flags_init(sd flags,sd path)
+	set flags pool_init(flags)
 	set flags x_init(flags,path)
 	call log_init(flags,path)
 	call alt_init(flags,path)
@@ -168,17 +168,16 @@ function flags_init(sd flags,sd path)
 
 	call frames_as_shows(flags)
 	call for_in(flags)
-	import "pool_init" pool_init
-	callg pool_init(flags)
 endfunction
 
-function log_init(sd flags,sd path)
+function log_init(datax prexx,sd path)
 	sv of%p_offsets
 	if of#!=(NULL)
 		call error("swf started, log not closed")
 	end
-	and flags (debug_log)
-	if flags=(debug_log)
+	sd test=debug_log
+	and test prexx
+	if test=(debug_log)
 		setcall of# memalloc(1)  #0 on some systems can be NULL return
 
 		sd size;setcall size strlen_of(path,4+1)
@@ -191,6 +190,7 @@ function log_init(sd flags,sd path)
 		#this is later #set debug_data.size 0
 		set debug_data.all_size 1
 	end
+	and prexx (prexx_flags)
 end
 
 import "f_printf" f_printf
@@ -421,7 +421,7 @@ end
 
 import "x_log" x_log
 function debug_xlog_ex(sd codepointer,sd type)
-	if debug_mark_get.offsets!=(NULL)
+	if log_init.prexx=(prexx_flags)
 		call debug_phase_code_add((FALSE),type)
 	else
 		callg x_log(codepointer)
@@ -429,9 +429,14 @@ function debug_xlog_ex(sd codepointer,sd
 end
 function debug_xlog(sd codepointer)
 # [else loop}[ forin{[ for;;[ if/loop{[ ?[ :[ func{[ if}[
-	call debug_xlog_ex(codepointer,(Slash))
+	callg debug_xlog_ex(codepointer,(Slash))
 end
 function debug_xlog_stepout(sd codepointer)
 # for;;[| func{[}|
-	call debug_xlog_ex(codepointer,(Verticalbar))
+	callg debug_xlog_ex(codepointer,(Verticalbar))
+end
+function debug_xlog_pool() #pool_flag is already tested
+	if log_init.prexx=(prexx_flags)
+		callg debug_phase_code_add((FALSE),(Caret))
+	end
 end
--- actionswf-1.orig/src/x.oc
+++ actionswf-1/src/x.oc
@@ -71,7 +71,7 @@ function x_log(sd codepointer)
 #before: is visible that var a is 6 bytes in swf and 12 in x ; divu test 0x10000;call debug_phase_code_add((TRUE),#test)
 #there are more calculations if write at .log, expands comes from member(compressed)/fn/args to fn/args/member(uncompressed)
 		sub codepointer base
-		callg f_write(x_data.flog,#codepointer,(DWORD)) #DWORD like x_data.size
+		callg x_log_val((xlog_code),(DWORD),codepointer) #DWORD like x_data.size
 	end
 end
 
@@ -119,20 +119,21 @@ function x_init(sd flags,sd path)
 	elseif x_data.mem!=(NULL)
 		call error(err)
 	end
-	datax flag#1
-	set flag flags  ##log is on current x, here is another x, no parse, no log/alt
-	and flag (flags_x)
-	if flag!=0
+
+	sd test=flags_x
+	and test flags
+	if test!=0
 		sd size;setcall size strlen_of(path,2+1)
 		sd b;setcall b memalloc(size)
 		call sprintf(b,"%s.x",path)
 
-		sd x=flag_x
-		and x flag
-		if x=0 #save
+		and test (flag_x)
+		if test=0 #save
 			set x_data.f f_open_mem(b,"wb") #'b' on windows is not 't' that can change line ends and is working more there
-			and flag (debug_x_pad)
-		else #restore
+			datax flag#1
+			set flag (debug_x_pad)
+			and flag flags
+		else #restore ,no parse, no log/alt
 			sd file;set file f_open_mem(b,"rb")
 			call fseek(file,0,(SEEK_END))
 			set actionx.end f_tell_errors(file)
@@ -143,16 +144,14 @@ function x_init(sd flags,sd path)
 			set actionx.pointer x_data.mem
 			add actionx.end actionx.pointer
 
-			sd xx=debug_log
+			sd xx=xx_flags
 			and xx flags
-			if xx!=0
+			if xx=(xx_flags)
 				inc size
 				set b memalloc(size)
 				call sprintf(b,"%s.xx",path)
 				set x_data.flog f_open_mem(b,"wb")
 			end
-
-			const antix_read=debug_log|debug_alt
 			and flags (~antix_read)
 		end
 	end
@@ -257,3 +256,21 @@ function x_call(sv pmember,sv pfname,sv
 	end
 	return codepointer
 end
+
+function x_log_val(sd type,sd size,sd val)
+	call f_write(x_data.flog,#type,(BYTE))
+	if size!=0
+		callg f_write(x_data.flog,#val,size)
+	end
+end
+function x_log_val_if(sd type,sd size,sd val)
+	if x_data.flog!=(NULL)
+		callg x_log_val(type,size,val)
+	end
+end
+function x_log_const(sd offset)
+	if x_data.flog!=(NULL) #flag_pool_read is already tested
+		sub offset x_pointer.base
+		callg x_log_val((xlog_new),(QWORD),offset)
+	end
+end
--- actionswf-1.orig/tests/.expected/a.swf.log
+++ actionswf-1/tests/.expected/a.swf.log
@@ -98,70 +98,70 @@ attachMovie('carSymbol','fastCar_mc',1,a
 5,9,0009/
 1,5,
 1|
-1,7,,2,,2,,
-2,2,,2,,4,,
-3,E,,
-1,C,,5,,5,,5,,5,,5,,5,,5,,5,,5,,5,,5,,,5,,,5,,,5,,5,,5,,5,,5,,,2/,5,2/,5,
-1,B,,4,,5,,,4,
-1,7,,2,,2,,,2,,2,,
-1,2,5,0006/,2,|,,9,,
-1,A,,,2/,2,,5,/,A,,,2/,2,,2/,2,,A,,,2//
-1,A,,,2/,2,,2/
-1,2,,,,,2,,,,,2,,,5,,
-1,7,,2/,2,,,,|,2,,5,,,2//
-1,2,,,1,1,,2,4,/,2/
-1,2,,5,,,1,1,,2,2,,7,/,2/
-1,2,2,2,,2/
-1,2,,,2/,2/
-2,9,,
-1,2,,7,
-1,2,,E,,,2,,2,,A,
-1,2,,9,,
-1,2,,2,,7,
-1,2,,2,,1,,,2,,,,
-1,2,,2,,5,,1,,,2,,,,
-1,2,,2,,2,,1,,,2,,,5,,
-2,4,,5,,2/,2,,2/,2,,
-3,2,5,0006/
-1,2,
+1^,7,^,2,^,2,,
+2^,2,^,2,^^,4,,
+3^^,E,,
+1^,C,,5,,5,,5,,5,,5,,5,,5,,5,,5,,5,,5,,,5,,,5,,,5,,5,,5,,5,,5,,,2/,5,2/,5,
+1^,B,^^,4,,5,,^^,4,
+1^,7,^,2,^,2,,^,2,^,2,,
+1^,2,5,0006/^,2,|,^^,9,,
+1,A,,,2/^,2,,5,/,A,,,2/^,2,,2/^,2,,A,,,2//
+1,A,,,2/^,2,,2/
+1^,2,,,,^,2,,,,^,2,,,5,,
+1^,7,,2/^,2,,,,|^,2,,5,,,2//
+1^,2,,,1,1,,2^,4,/,2/
+1^,2,,5,,,1,1,,2^,2,,7,/,2/
+1,2,2^,2,,2/
+1^,2,,,2/,2/
+2^^,9,,
+1^,2,^,7,
+1^,2,^^,E,,^,2,^,2,,A,
+1^,2,^^,9,,
+1^,2,^,2,^,7,
+1^,2,^,2,,1,,,2,,,,
+1^,2,^,2,,5,,1,,,2,,,,
+1^,2,^,2,^,2,,1,,,2,,,5,,
+2^^,4,,5,,2/^,2,,2/^,2,,
+3^,2,5,F0006
+1^,2,
 1|,
-1,2,,2,,2,5,0006/
-1,2,
+1^,2,^,2,^,2,5,F0006
+1^,2,
 1|,
-1,8,,2,,7,,
-1,2,5,0030/
-1,2,
-1,7,,2,,2,,
-1,7,,2,,
+1^,8,^,2,^,7,,
+1^,2,5,F0030
+1^,2,
+1^,7,^,2,^,2,,
+1^,7,^,2,,
 1|,
-1,2,,2,,4,,2,,
-1,2,,2,,4,,
-1,2,,2,,2,5,0006/
-1,2,
+1^,2,^,2,^^,4,^,2,,
+1^,2,^,2,^^,4,,
+1^,2,^,2,^,2,5,F0006
+1^,2,
 1|,
-1,8,,2,,7,,
-1,2,5,0030/
-1,2,
-1,7,,2,,2,,
-1,7,,2,,
+1^,8,^,2,^,7,,
+1^,2,5,F0030
+1^,2,
+1^,7,^,2,^,2,,
+1^,7,^,2,,
 1|,
-1,2,,2,,4,,2,,
-1,2,,2,,4,,
-1,9,,
-8,7,,9,,2,,5,,
-3,B,,5,,
-3,B,,5,,2,,5,,2,,5,,2,,5,,
+1^,2,^,2,^^,4,^,2,,
+1^,2,^,2,^^,4,,
+1^^,9,,
+8^,7,,9,^,2,,5,,
+3^,B,,5,,
+3^,B,,5,^,2,,5,^,2,,5,^,2,,5,,
 3,9,
-3,A,0014/,2,,2,,2,,,
-1|,19,,
-6,9,,
-1,2,,7,
-1,2,,10,,
+3,A,0014/^,2,^,2,^,2,,,
+1|^,19,,
+6^^,9,,
+1^,2,^,7,
+1^,2,^^^,10,,
 2
 0
 1
 trace('b'+this.value)
-1,4,,2,,,
+1^^,4,^,2,,,
 2
 1
 6
@@ -172,9 +172,9 @@ function Vehicle(){
 Object.registerClass('carSymbol',Vehicle)
 
 2,C,0010/
-1,4,,2,,,
+1^^,4,^,2,,,
 1|
-1,2,,9,,2,,
+1^,2,^^,9,^,2,,
 2
 
 1
--- actionswf-1.orig/tests/a.oc
+++ actionswf-1/tests/a.oc
@@ -7,11 +7,11 @@ einclude "../dev/import.h"
 
 include "entryraw.oc" "entry.oc"
 
-sd f=debug_log|debug_titles|debug_x_pad|flag_pool
+sd f=debug_log|flag_pool_write|debug_xpad
 if argc=2
 	importx "puts" puts
 	call puts("flag_x flag_pool_read")
-	or f (flag_x|flag_pool_read)
+	or f (flag_pool_read|flag_x|debug_titles)
 end
 call swf_new_ex("a.swf",0x80,0x80,0x001100,2,f)
 
--- actionswf-1.orig/tests/ffdec/a.oc
+++ actionswf-1/tests/ffdec/a.oc
@@ -7,13 +7,13 @@ einclude "../../dev/import.h"
 
 include "../entryraw.oc" "../entry.oc"
 
-sd f=debug_titles|flag_pool
+sd f=debug_titles
 if argc=1
-	or f (debug_log)
+	set f (debug_log|flag_pool_write)
 else
 	importx "puts" puts
 	call puts("debug_alt flag_pool_read")
-	or f (debug_alt|flag_pool_read)
+	set f (debug_alt|flag_pool_read)
 	sub a1# (0x30)
 	or f a1#
 end
